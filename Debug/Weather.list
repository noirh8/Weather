
Weather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005244c  080100a0  080100a0  000110a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080624ec  080624ec  00064234  2**0
                  CONTENTS
  4 .ARM          00000008  080624ec  080624ec  000634ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080624f4  080624f4  00064234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080624f4  080624f4  000634f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080624f8  080624f8  000634f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  080624fc  00064000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00064234  2**0
                  CONTENTS
 10 .bss          00001564  20000234  20000234  00064234  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001798  20001798  00064234  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00064234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c1c0  00000000  00000000  00064264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cee  00000000  00000000  00080424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00086118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001301  00000000  00000000  00087d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028995  00000000  00000000  00089019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c0d2  00000000  00000000  000b19ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc31b  00000000  00000000  000dda80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b9d9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ba8  00000000  00000000  001b9de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003e  00000000  00000000  001c1988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000234 	.word	0x20000234
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010084 	.word	0x08010084

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000238 	.word	0x20000238
 80001cc:	08010084 	.word	0x08010084

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b9a0 	b.w	8000fb4 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f83c 	bl	8000cf8 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2lz>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	460d      	mov	r5, r1
 8000c96:	f7ff ff21 	bl	8000adc <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x1c>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fc97 	bl	80005f8 <__aeabi_dmul>
 8000cca:	f7ff ff57 	bl	8000b7c <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc18 	bl	8000504 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fc8e 	bl	80005f8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fad0 	bl	8000288 <__aeabi_dsub>
 8000ce8:	f7ff ff48 	bl	8000b7c <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <Common_ArrayClean>:
    *Month = ts.tm_mon;
    *Year = ts.tm_year;
}

void Common_ArrayClean(char *Buffer, uint16_t BufferSize)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
    for(uint16_t i = 0; i < BufferSize; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	81fb      	strh	r3, [r7, #14]
 8000fc8:	e007      	b.n	8000fda <Common_ArrayClean+0x22>
    {
        Buffer[i] = 0;
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < BufferSize; i++)
 8000fd4:	89fb      	ldrh	r3, [r7, #14]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	81fb      	strh	r3, [r7, #14]
 8000fda:	89fa      	ldrh	r2, [r7, #14]
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d3f3      	bcc.n	8000fca <Common_ArrayClean+0x12>
    }

}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <appScreen>:




void appScreen ()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	if(runningScreen == 1)
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <appScreen+0x7c>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d109      	bne.n	8001010 <appScreen+0x20>
	{
		 lcdPrintf( "" , App());
 8000ffc:	f000 f8c8 	bl	8001190 <App>
 8001000:	4603      	mov	r3, r0
 8001002:	4619      	mov	r1, r3
 8001004:	481a      	ldr	r0, [pc, #104]	@ (8001070 <appScreen+0x80>)
 8001006:	f004 fe6b 	bl	8005ce0 <lcdPrintf>
		 runningScreen = 0;
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <appScreen+0x7c>)
 800100c:	2200      	movs	r2, #0
 800100e:	801a      	strh	r2, [r3, #0]
		// lcdPrintf( "" , optionScreen());
	}
	if(checkXY(20, 20, 40, 40))
 8001010:	2328      	movs	r3, #40	@ 0x28
 8001012:	2228      	movs	r2, #40	@ 0x28
 8001014:	2114      	movs	r1, #20
 8001016:	2014      	movs	r0, #20
 8001018:	f007 fa32 	bl	8008480 <checkXY>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00c      	beq.n	800103c <appScreen+0x4c>
		{

			while (TouchIsTouched()){}
 8001022:	bf00      	nop
 8001024:	f007 f9a2 	bl	800836c <TouchIsTouched>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1fa      	bne.n	8001024 <appScreen+0x34>
			runningScreen=1;
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <appScreen+0x7c>)
 8001030:	2201      	movs	r2, #1
 8001032:	801a      	strh	r2, [r3, #0]
			addFunction(&currentScreen, waitingScreenScreen);
 8001034:	490f      	ldr	r1, [pc, #60]	@ (8001074 <appScreen+0x84>)
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <appScreen+0x88>)
 8001038:	f000 fab2 	bl	80015a0 <addFunction>
		}

	if(checkXY(80, 20, 40, 40))
 800103c:	2328      	movs	r3, #40	@ 0x28
 800103e:	2228      	movs	r2, #40	@ 0x28
 8001040:	2114      	movs	r1, #20
 8001042:	2050      	movs	r0, #80	@ 0x50
 8001044:	f007 fa1c 	bl	8008480 <checkXY>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <appScreen+0x78>
		{

			while (TouchIsTouched()){}
 800104e:	bf00      	nop
 8001050:	f007 f98c 	bl	800836c <TouchIsTouched>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1fa      	bne.n	8001050 <appScreen+0x60>
			runningScreen=1;
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <appScreen+0x7c>)
 800105c:	2201      	movs	r2, #1
 800105e:	801a      	strh	r2, [r3, #0]
			addFunction(&currentScreen, displayWaitingGameScreen);
 8001060:	4906      	ldr	r1, [pc, #24]	@ (800107c <appScreen+0x8c>)
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <appScreen+0x88>)
 8001064:	f000 fa9c 	bl	80015a0 <addFunction>
		}


}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	080100a0 	.word	0x080100a0
 8001074:	08002705 	.word	0x08002705
 8001078:	20000250 	.word	0x20000250
 800107c:	0800217d 	.word	0x0800217d

08001080 <initApp>:


void initApp ()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	initFunctionList(&currentScreen, 2);
 8001084:	2102      	movs	r1, #2
 8001086:	4804      	ldr	r0, [pc, #16]	@ (8001098 <initApp+0x18>)
 8001088:	f000 fa72 	bl	8001570 <initFunctionList>
	addFunction(&currentScreen, appScreen);
 800108c:	4903      	ldr	r1, [pc, #12]	@ (800109c <initApp+0x1c>)
 800108e:	4802      	ldr	r0, [pc, #8]	@ (8001098 <initApp+0x18>)
 8001090:	f000 fa86 	bl	80015a0 <addFunction>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000250 	.word	0x20000250
 800109c:	08000ff1 	.word	0x08000ff1

080010a0 <runScreen>:
void runScreen ()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	callLastFunction(&currentScreen);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <runScreen+0x10>)
 80010a6:	f000 fabb 	bl	8001620 <callLastFunction>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000250 	.word	0x20000250

080010b4 <controlButton>:

void controlButton ()
 {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	 //Back
	 	if (checkXY(0, 295, 15, 30))
 80010b8:	231e      	movs	r3, #30
 80010ba:	220f      	movs	r2, #15
 80010bc:	f240 1127 	movw	r1, #295	@ 0x127
 80010c0:	2000      	movs	r0, #0
 80010c2:	f007 f9dd 	bl	8008480 <checkXY>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <controlButton+0x30>
	 	{
	 		while (TouchIsTouched()){}
 80010cc:	bf00      	nop
 80010ce:	f007 f94d 	bl	800836c <TouchIsTouched>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1fa      	bne.n	80010ce <controlButton+0x1a>
	 		runningScreen=1;
 80010d8:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <controlButton+0xc4>)
 80010da:	2201      	movs	r2, #1
 80010dc:	801a      	strh	r2, [r3, #0]
	 		removeLastFunction(&currentScreen);
 80010de:	4827      	ldr	r0, [pc, #156]	@ (800117c <controlButton+0xc8>)
 80010e0:	f000 fa8b 	bl	80015fa <removeLastFunction>
	 	}
	 	//Refresh
	 	if (checkXY(200,295,40,30))
 80010e4:	231e      	movs	r3, #30
 80010e6:	2228      	movs	r2, #40	@ 0x28
 80010e8:	f240 1127 	movw	r1, #295	@ 0x127
 80010ec:	20c8      	movs	r0, #200	@ 0xc8
 80010ee:	f007 f9c7 	bl	8008480 <checkXY>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d022      	beq.n	800113e <controlButton+0x8a>
	 	{
	 		while (TouchIsTouched()){}
 80010f8:	bf00      	nop
 80010fa:	f007 f937 	bl	800836c <TouchIsTouched>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1fa      	bne.n	80010fa <controlButton+0x46>
	 		lcdFillRGB(COLOR_WHITE);
 8001104:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001108:	f004 fa00 	bl	800550c <lcdFillRGB>
	 		lcdSetTextColor(COLOR_BLUE, COLOR_WHITE);
 800110c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001110:	201f      	movs	r0, #31
 8001112:	f004 fe81 	bl	8005e18 <lcdSetTextColor>
	 		lcdSetCursor( 35 , 162 );
 8001116:	21a2      	movs	r1, #162	@ 0xa2
 8001118:	2023      	movs	r0, #35	@ 0x23
 800111a:	f004 fefd 	bl	8005f18 <lcdSetCursor>
	 		lcdSetTextFont( & Font16 );
 800111e:	4818      	ldr	r0, [pc, #96]	@ (8001180 <controlButton+0xcc>)
 8001120:	f004 fe6a 	bl	8005df8 <lcdSetTextFont>
	 		lcdPrintf( ".............." );
 8001124:	4817      	ldr	r0, [pc, #92]	@ (8001184 <controlButton+0xd0>)
 8001126:	f004 fddb 	bl	8005ce0 <lcdPrintf>
	 		lcdPrintf( "",Button() );
 800112a:	f001 fb0d 	bl	8002748 <Button>
 800112e:	4603      	mov	r3, r0
 8001130:	4619      	mov	r1, r3
 8001132:	4815      	ldr	r0, [pc, #84]	@ (8001188 <controlButton+0xd4>)
 8001134:	f004 fdd4 	bl	8005ce0 <lcdPrintf>
	 		runningScreen = 1;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <controlButton+0xc4>)
 800113a:	2201      	movs	r2, #1
 800113c:	801a      	strh	r2, [r3, #0]
	 	}
	 	//Home
	 	if (checkXY(100,295,30,30))
 800113e:	231e      	movs	r3, #30
 8001140:	221e      	movs	r2, #30
 8001142:	f240 1127 	movw	r1, #295	@ 0x127
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f007 f99a 	bl	8008480 <checkXY>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00f      	beq.n	8001172 <controlButton+0xbe>
	 	{
	 		while (TouchIsTouched()){}
 8001152:	bf00      	nop
 8001154:	f007 f90a 	bl	800836c <TouchIsTouched>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1fa      	bne.n	8001154 <controlButton+0xa0>
	 		runningScreen = 1;
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <controlButton+0xc4>)
 8001160:	2201      	movs	r2, #1
 8001162:	801a      	strh	r2, [r3, #0]
	 		clearAllFunctions(&currentScreen);
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <controlButton+0xc8>)
 8001166:	f000 fa72 	bl	800164e <clearAllFunctions>
	 		addFunction(&currentScreen, appScreen);
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <controlButton+0xd8>)
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <controlButton+0xc8>)
 800116e:	f000 fa17 	bl	80015a0 <addFunction>

	 	}
 }
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000000 	.word	0x20000000
 800117c:	20000250 	.word	0x20000250
 8001180:	20000024 	.word	0x20000024
 8001184:	080100a4 	.word	0x080100a4
 8001188:	080100a0 	.word	0x080100a0
 800118c:	08000ff1 	.word	0x08000ff1

08001190 <App>:

unsigned long App()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	lcdFillRGB(COLOR_BackGround_2);
 8001194:	f248 50fc 	movw	r0, #34300	@ 0x85fc
 8001198:	f004 f9b8 	bl	800550c <lcdFillRGB>
	lcdDrawImage( 20 , 20, & iconApp);
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <App+0x74>)
 800119e:	2114      	movs	r1, #20
 80011a0:	2014      	movs	r0, #20
 80011a2:	f004 fc9f 	bl	8005ae4 <lcdDrawImage>
	lcdSetCursor( 22 , 62 );
 80011a6:	213e      	movs	r1, #62	@ 0x3e
 80011a8:	2016      	movs	r0, #22
 80011aa:	f004 feb5 	bl	8005f18 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_2);
 80011ae:	f248 51fc 	movw	r1, #34300	@ 0x85fc
 80011b2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011b6:	f004 fe2f 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font8 );
 80011ba:	4813      	ldr	r0, [pc, #76]	@ (8001208 <App+0x78>)
 80011bc:	f004 fe1c 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "Weather" );
 80011c0:	4812      	ldr	r0, [pc, #72]	@ (800120c <App+0x7c>)
 80011c2:	f004 fd8d 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "",Button() );
 80011c6:	f001 fabf 	bl	8002748 <Button>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4810      	ldr	r0, [pc, #64]	@ (8001210 <App+0x80>)
 80011d0:	f004 fd86 	bl	8005ce0 <lcdPrintf>


	lcdDrawImage( 80 , 20, & iconAppGame);
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <App+0x84>)
 80011d6:	2114      	movs	r1, #20
 80011d8:	2050      	movs	r0, #80	@ 0x50
 80011da:	f004 fc83 	bl	8005ae4 <lcdDrawImage>
	lcdSetCursor( 82 , 62 );
 80011de:	213e      	movs	r1, #62	@ 0x3e
 80011e0:	2052      	movs	r0, #82	@ 0x52
 80011e2:	f004 fe99 	bl	8005f18 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_2);
 80011e6:	f248 51fc 	movw	r1, #34300	@ 0x85fc
 80011ea:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011ee:	f004 fe13 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font8 );
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <App+0x78>)
 80011f4:	f004 fe00 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "Sky War" );
 80011f8:	4807      	ldr	r0, [pc, #28]	@ (8001218 <App+0x88>)
 80011fa:	f004 fd71 	bl	8005ce0 <lcdPrintf>

	return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	bd80      	pop	{r7, pc}
 8001204:	080216fc 	.word	0x080216fc
 8001208:	2000003c 	.word	0x2000003c
 800120c:	080100b4 	.word	0x080100b4
 8001210:	080100a0 	.word	0x080100a0
 8001214:	08015310 	.word	0x08015310
 8001218:	080100bc 	.word	0x080100bc

0800121c <GetTimeString>:




char* GetTimeString(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	//fixed
    sprintf(TimeString, "%02d:%02d", hour, min);
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <GetTimeString+0x1c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <GetTimeString+0x20>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4905      	ldr	r1, [pc, #20]	@ (8001240 <GetTimeString+0x24>)
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <GetTimeString+0x28>)
 800122c:	f00c fa98 	bl	800d760 <siprintf>
    return TimeString;
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <GetTimeString+0x28>)
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000a94 	.word	0x20000a94
 800123c:	20000a98 	.word	0x20000a98
 8001240:	080100c4 	.word	0x080100c4
 8001244:	20000260 	.word	0x20000260

08001248 <GetDayString>:



char* GetDayString(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	//fixed
	Common_ArrayClean(DayString, 12);
 800124c:	210c      	movs	r1, #12
 800124e:	484d      	ldr	r0, [pc, #308]	@ (8001384 <GetDayString+0x13c>)
 8001250:	f7ff feb2 	bl	8000fb8 <Common_ArrayClean>

	  if (strstr(date, "Monday") != NULL) {
 8001254:	494c      	ldr	r1, [pc, #304]	@ (8001388 <GetDayString+0x140>)
 8001256:	484d      	ldr	r0, [pc, #308]	@ (800138c <GetDayString+0x144>)
 8001258:	f00c fb6c 	bl	800d934 <strstr>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <GetDayString+0x22>
	        RtcDate.WeekDay = 1;
 8001262:	4b4b      	ldr	r3, [pc, #300]	@ (8001390 <GetDayString+0x148>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e044      	b.n	80012f4 <GetDayString+0xac>
	    } else if (strstr(date, "Tuesday") != NULL) {
 800126a:	494a      	ldr	r1, [pc, #296]	@ (8001394 <GetDayString+0x14c>)
 800126c:	4847      	ldr	r0, [pc, #284]	@ (800138c <GetDayString+0x144>)
 800126e:	f00c fb61 	bl	800d934 <strstr>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <GetDayString+0x38>
	        RtcDate.WeekDay = 2;
 8001278:	4b45      	ldr	r3, [pc, #276]	@ (8001390 <GetDayString+0x148>)
 800127a:	2202      	movs	r2, #2
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e039      	b.n	80012f4 <GetDayString+0xac>
	    } else if (strstr(date, "Wednesday") != NULL) {
 8001280:	4945      	ldr	r1, [pc, #276]	@ (8001398 <GetDayString+0x150>)
 8001282:	4842      	ldr	r0, [pc, #264]	@ (800138c <GetDayString+0x144>)
 8001284:	f00c fb56 	bl	800d934 <strstr>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <GetDayString+0x4e>
	        RtcDate.WeekDay = 3;
 800128e:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <GetDayString+0x148>)
 8001290:	2203      	movs	r2, #3
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e02e      	b.n	80012f4 <GetDayString+0xac>
	    } else if (strstr(date, "Thursday") != NULL) {
 8001296:	4941      	ldr	r1, [pc, #260]	@ (800139c <GetDayString+0x154>)
 8001298:	483c      	ldr	r0, [pc, #240]	@ (800138c <GetDayString+0x144>)
 800129a:	f00c fb4b 	bl	800d934 <strstr>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <GetDayString+0x64>
	        RtcDate.WeekDay = 4;
 80012a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <GetDayString+0x148>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e023      	b.n	80012f4 <GetDayString+0xac>
	    } else if (strstr(date, "Friday") != NULL) {
 80012ac:	493c      	ldr	r1, [pc, #240]	@ (80013a0 <GetDayString+0x158>)
 80012ae:	4837      	ldr	r0, [pc, #220]	@ (800138c <GetDayString+0x144>)
 80012b0:	f00c fb40 	bl	800d934 <strstr>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <GetDayString+0x7a>
	        RtcDate.WeekDay = 5;
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <GetDayString+0x148>)
 80012bc:	2205      	movs	r2, #5
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e018      	b.n	80012f4 <GetDayString+0xac>
	    } else if (strstr(date, "Saturday") != NULL) {
 80012c2:	4938      	ldr	r1, [pc, #224]	@ (80013a4 <GetDayString+0x15c>)
 80012c4:	4831      	ldr	r0, [pc, #196]	@ (800138c <GetDayString+0x144>)
 80012c6:	f00c fb35 	bl	800d934 <strstr>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <GetDayString+0x90>
	        RtcDate.WeekDay = 6;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <GetDayString+0x148>)
 80012d2:	2206      	movs	r2, #6
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e00d      	b.n	80012f4 <GetDayString+0xac>
	    } else if (strstr(date, "Sunday") != NULL) {
 80012d8:	4933      	ldr	r1, [pc, #204]	@ (80013a8 <GetDayString+0x160>)
 80012da:	482c      	ldr	r0, [pc, #176]	@ (800138c <GetDayString+0x144>)
 80012dc:	f00c fb2a 	bl	800d934 <strstr>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <GetDayString+0xa6>
	        RtcDate.WeekDay = 0;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <GetDayString+0x148>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e002      	b.n	80012f4 <GetDayString+0xac>
	    } else {
	        RtcDate.WeekDay = -1;  // Nếu không phải là một ngày hợp lệ
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <GetDayString+0x148>)
 80012f0:	22ff      	movs	r2, #255	@ 0xff
 80012f2:	701a      	strb	r2, [r3, #0]
	    }

    switch(RtcDate.WeekDay)
 80012f4:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <GetDayString+0x148>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b06      	cmp	r3, #6
 80012fa:	d83b      	bhi.n	8001374 <GetDayString+0x12c>
 80012fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001304 <GetDayString+0xbc>)
 80012fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001302:	bf00      	nop
 8001304:	08001321 	.word	0x08001321
 8001308:	0800132d 	.word	0x0800132d
 800130c:	08001339 	.word	0x08001339
 8001310:	08001345 	.word	0x08001345
 8001314:	08001351 	.word	0x08001351
 8001318:	0800135d 	.word	0x0800135d
 800131c:	08001369 	.word	0x08001369
    {
    case 0:
    	memcpy(DayString, "SUN", strlen("SUN"));
 8001320:	2203      	movs	r2, #3
 8001322:	4922      	ldr	r1, [pc, #136]	@ (80013ac <GetDayString+0x164>)
 8001324:	4817      	ldr	r0, [pc, #92]	@ (8001384 <GetDayString+0x13c>)
 8001326:	f00c fba6 	bl	800da76 <memcpy>
        break;
 800132a:	e027      	b.n	800137c <GetDayString+0x134>
    case 1:
    	memcpy(DayString, "MON", strlen( "MON"));
 800132c:	2203      	movs	r2, #3
 800132e:	4920      	ldr	r1, [pc, #128]	@ (80013b0 <GetDayString+0x168>)
 8001330:	4814      	ldr	r0, [pc, #80]	@ (8001384 <GetDayString+0x13c>)
 8001332:	f00c fba0 	bl	800da76 <memcpy>
        break;
 8001336:	e021      	b.n	800137c <GetDayString+0x134>
    case 2:
    	memcpy(DayString, "TUE", strlen("TUE"));
 8001338:	2203      	movs	r2, #3
 800133a:	491e      	ldr	r1, [pc, #120]	@ (80013b4 <GetDayString+0x16c>)
 800133c:	4811      	ldr	r0, [pc, #68]	@ (8001384 <GetDayString+0x13c>)
 800133e:	f00c fb9a 	bl	800da76 <memcpy>
        break;
 8001342:	e01b      	b.n	800137c <GetDayString+0x134>
    case 3:
    	memcpy(DayString, "WED", strlen("WED"));
 8001344:	2203      	movs	r2, #3
 8001346:	491c      	ldr	r1, [pc, #112]	@ (80013b8 <GetDayString+0x170>)
 8001348:	480e      	ldr	r0, [pc, #56]	@ (8001384 <GetDayString+0x13c>)
 800134a:	f00c fb94 	bl	800da76 <memcpy>
        break;
 800134e:	e015      	b.n	800137c <GetDayString+0x134>
    case 4:
    	memcpy(DayString, "THU", strlen("THU"));
 8001350:	2203      	movs	r2, #3
 8001352:	491a      	ldr	r1, [pc, #104]	@ (80013bc <GetDayString+0x174>)
 8001354:	480b      	ldr	r0, [pc, #44]	@ (8001384 <GetDayString+0x13c>)
 8001356:	f00c fb8e 	bl	800da76 <memcpy>
        break;
 800135a:	e00f      	b.n	800137c <GetDayString+0x134>
    case 5:
    	memcpy(DayString, "FRI", strlen("FRI"));
 800135c:	2203      	movs	r2, #3
 800135e:	4918      	ldr	r1, [pc, #96]	@ (80013c0 <GetDayString+0x178>)
 8001360:	4808      	ldr	r0, [pc, #32]	@ (8001384 <GetDayString+0x13c>)
 8001362:	f00c fb88 	bl	800da76 <memcpy>
        break;
 8001366:	e009      	b.n	800137c <GetDayString+0x134>
    case 6:
    	memcpy(DayString, "SAT", strlen("SAT"));
 8001368:	2203      	movs	r2, #3
 800136a:	4916      	ldr	r1, [pc, #88]	@ (80013c4 <GetDayString+0x17c>)
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <GetDayString+0x13c>)
 800136e:	f00c fb82 	bl	800da76 <memcpy>
        break;
 8001372:	e003      	b.n	800137c <GetDayString+0x134>

    default:
    	strcpy(DayString, "ERR");
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <GetDayString+0x13c>)
 8001376:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <GetDayString+0x180>)
 8001378:	601a      	str	r2, [r3, #0]
        break;
 800137a:	bf00      	nop
    }
    return DayString;
 800137c:	4b01      	ldr	r3, [pc, #4]	@ (8001384 <GetDayString+0x13c>)
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000026c 	.word	0x2000026c
 8001388:	080100d0 	.word	0x080100d0
 800138c:	20000a9c 	.word	0x20000a9c
 8001390:	2000025c 	.word	0x2000025c
 8001394:	080100d8 	.word	0x080100d8
 8001398:	080100e0 	.word	0x080100e0
 800139c:	080100ec 	.word	0x080100ec
 80013a0:	080100f8 	.word	0x080100f8
 80013a4:	08010100 	.word	0x08010100
 80013a8:	0801010c 	.word	0x0801010c
 80013ac:	08010114 	.word	0x08010114
 80013b0:	08010118 	.word	0x08010118
 80013b4:	0801011c 	.word	0x0801011c
 80013b8:	08010120 	.word	0x08010120
 80013bc:	08010124 	.word	0x08010124
 80013c0:	08010128 	.word	0x08010128
 80013c4:	0801012c 	.word	0x0801012c
 80013c8:	00525245 	.word	0x00525245

080013cc <GetNext_1_DayString>:


char* GetNext_1_DayString(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    NextDayString(Next_1_DayString, 1);
 80013d0:	2101      	movs	r1, #1
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <GetNext_1_DayString+0x14>)
 80013d4:	f000 f842 	bl	800145c <NextDayString>
    return Next_1_DayString;
 80013d8:	4b01      	ldr	r3, [pc, #4]	@ (80013e0 <GetNext_1_DayString+0x14>)
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000278 	.word	0x20000278

080013e4 <GetNext_2_DayString>:

char* GetNext_2_DayString(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    NextDayString(Next_2_DayString, 2);
 80013e8:	2102      	movs	r1, #2
 80013ea:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <GetNext_2_DayString+0x14>)
 80013ec:	f000 f836 	bl	800145c <NextDayString>
    return Next_2_DayString;
 80013f0:	4b01      	ldr	r3, [pc, #4]	@ (80013f8 <GetNext_2_DayString+0x14>)
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000284 	.word	0x20000284

080013fc <GetNext_3_DayString>:

char* GetNext_3_DayString(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    NextDayString(Next_3_DayString, 3);
 8001400:	2103      	movs	r1, #3
 8001402:	4803      	ldr	r0, [pc, #12]	@ (8001410 <GetNext_3_DayString+0x14>)
 8001404:	f000 f82a 	bl	800145c <NextDayString>
    return Next_3_DayString;
 8001408:	4b01      	ldr	r3, [pc, #4]	@ (8001410 <GetNext_3_DayString+0x14>)
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000290 	.word	0x20000290

08001414 <GetNext_4_DayString>:
char* GetNext_4_DayString(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    NextDayString(Next_4_DayString, 4);
 8001418:	2104      	movs	r1, #4
 800141a:	4803      	ldr	r0, [pc, #12]	@ (8001428 <GetNext_4_DayString+0x14>)
 800141c:	f000 f81e 	bl	800145c <NextDayString>
    return Next_4_DayString;
 8001420:	4b01      	ldr	r3, [pc, #4]	@ (8001428 <GetNext_4_DayString+0x14>)
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000029c 	.word	0x2000029c

0800142c <GetNext_5_DayString>:
char* GetNext_5_DayString(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
    NextDayString(Next_5_DayString, 5);
 8001430:	2105      	movs	r1, #5
 8001432:	4803      	ldr	r0, [pc, #12]	@ (8001440 <GetNext_5_DayString+0x14>)
 8001434:	f000 f812 	bl	800145c <NextDayString>
    return Next_5_DayString;
 8001438:	4b01      	ldr	r3, [pc, #4]	@ (8001440 <GetNext_5_DayString+0x14>)
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002a8 	.word	0x200002a8

08001444 <GetNext_6_DayString>:
char* GetNext_6_DayString(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    NextDayString(Next_6_DayString, 6);
 8001448:	2106      	movs	r1, #6
 800144a:	4803      	ldr	r0, [pc, #12]	@ (8001458 <GetNext_6_DayString+0x14>)
 800144c:	f000 f806 	bl	800145c <NextDayString>
    return Next_6_DayString;
 8001450:	4b01      	ldr	r3, [pc, #4]	@ (8001458 <GetNext_6_DayString+0x14>)
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002b4 	.word	0x200002b4

0800145c <NextDayString>:
static void NextDayString(char *NexDayString, uint8_t NextDayNumber)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
    uint8_t CalculateDay = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]

    if(RtcDate.WeekDay + NextDayNumber <= 6)
 800146c:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <NextDayString+0xec>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	4413      	add	r3, r2
 8001476:	2b06      	cmp	r3, #6
 8001478:	dc05      	bgt.n	8001486 <NextDayString+0x2a>
    {
        CalculateDay = RtcDate.WeekDay + NextDayNumber;
 800147a:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <NextDayString+0xec>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	4413      	add	r3, r2
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e018      	b.n	80014b8 <NextDayString+0x5c>
    }
    else if(RtcDate.WeekDay + NextDayNumber > 6)
 8001486:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <NextDayString+0xec>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	4413      	add	r3, r2
 8001490:	2b06      	cmp	r3, #6
 8001492:	dd11      	ble.n	80014b8 <NextDayString+0x5c>
    {
        CalculateDay = ((RtcDate.WeekDay + NextDayNumber) % 6) - 1;
 8001494:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <NextDayString+0xec>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	441a      	add	r2, r3
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <NextDayString+0xf0>)
 80014a0:	fb83 3102 	smull	r3, r1, r3, r2
 80014a4:	17d3      	asrs	r3, r2, #31
 80014a6:	1ac9      	subs	r1, r1, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	1ad1      	subs	r1, r2, r3
 80014b2:	b2cb      	uxtb	r3, r1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
    }

    switch(CalculateDay)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d83a      	bhi.n	8001534 <NextDayString+0xd8>
 80014be:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <NextDayString+0x68>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014e1 	.word	0x080014e1
 80014c8:	080014ed 	.word	0x080014ed
 80014cc:	080014f9 	.word	0x080014f9
 80014d0:	08001505 	.word	0x08001505
 80014d4:	08001511 	.word	0x08001511
 80014d8:	0800151d 	.word	0x0800151d
 80014dc:	08001529 	.word	0x08001529
    {
    case 0:
        memcpy(NexDayString, "SUN", strlen("SUN"));
 80014e0:	2203      	movs	r2, #3
 80014e2:	491b      	ldr	r1, [pc, #108]	@ (8001550 <NextDayString+0xf4>)
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f00c fac6 	bl	800da76 <memcpy>
        break;
 80014ea:	e029      	b.n	8001540 <NextDayString+0xe4>
    case 1:
        memcpy(NexDayString, "MON", strlen("MON"));
 80014ec:	2203      	movs	r2, #3
 80014ee:	4919      	ldr	r1, [pc, #100]	@ (8001554 <NextDayString+0xf8>)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f00c fac0 	bl	800da76 <memcpy>
        break;
 80014f6:	e023      	b.n	8001540 <NextDayString+0xe4>
    case 2:
        memcpy(NexDayString, "TUE", strlen("TUE"));
 80014f8:	2203      	movs	r2, #3
 80014fa:	4917      	ldr	r1, [pc, #92]	@ (8001558 <NextDayString+0xfc>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f00c faba 	bl	800da76 <memcpy>
        break;
 8001502:	e01d      	b.n	8001540 <NextDayString+0xe4>
    case 3:
        memcpy(NexDayString, "WED", strlen("WED"));
 8001504:	2203      	movs	r2, #3
 8001506:	4915      	ldr	r1, [pc, #84]	@ (800155c <NextDayString+0x100>)
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f00c fab4 	bl	800da76 <memcpy>
        break;
 800150e:	e017      	b.n	8001540 <NextDayString+0xe4>
    case 4:
        memcpy(NexDayString, "THU", strlen("THU"));
 8001510:	2203      	movs	r2, #3
 8001512:	4913      	ldr	r1, [pc, #76]	@ (8001560 <NextDayString+0x104>)
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f00c faae 	bl	800da76 <memcpy>
        break;
 800151a:	e011      	b.n	8001540 <NextDayString+0xe4>
    case 5:
        memcpy(NexDayString, "FRI", strlen("FRI"));
 800151c:	2203      	movs	r2, #3
 800151e:	4911      	ldr	r1, [pc, #68]	@ (8001564 <NextDayString+0x108>)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f00c faa8 	bl	800da76 <memcpy>
        break;
 8001526:	e00b      	b.n	8001540 <NextDayString+0xe4>
    case 6:
        memcpy(NexDayString, "SAT", strlen("SAT"));
 8001528:	2203      	movs	r2, #3
 800152a:	490f      	ldr	r1, [pc, #60]	@ (8001568 <NextDayString+0x10c>)
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f00c faa2 	bl	800da76 <memcpy>
        break;
 8001532:	e005      	b.n	8001540 <NextDayString+0xe4>

    default:
        memcpy(NexDayString, "ERR", strlen("ERR"));
 8001534:	2203      	movs	r2, #3
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <NextDayString+0x110>)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f00c fa9c 	bl	800da76 <memcpy>
        break;
 800153e:	bf00      	nop
    }
    //return DayString;
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000025c 	.word	0x2000025c
 800154c:	2aaaaaab 	.word	0x2aaaaaab
 8001550:	08010114 	.word	0x08010114
 8001554:	08010118 	.word	0x08010118
 8001558:	0801011c 	.word	0x0801011c
 800155c:	08010120 	.word	0x08010120
 8001560:	08010124 	.word	0x08010124
 8001564:	08010128 	.word	0x08010128
 8001568:	0801012c 	.word	0x0801012c
 800156c:	08010130 	.word	0x08010130

08001570 <initFunctionList>:
#include <stdlib.h>
#include "FunctionPointer.h"


void initFunctionList(FunctionList *list, int initialCapacity)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
    list->size = 0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
    list->capacity = initialCapacity;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	609a      	str	r2, [r3, #8]
    list->functions = (FunctionPointer *)malloc(initialCapacity * sizeof(FunctionPointer));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4618      	mov	r0, r3
 800158c:	f00b f8a4 	bl	800c6d8 <malloc>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <addFunction>:

// Thêm con trỏ hàm vào cuối

void addFunction(FunctionList *list, FunctionPointer func)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    if (list->size == list->capacity)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d110      	bne.n	80015d8 <addFunction+0x38>
    {
        list->capacity += 2;  // Tăng dung lượng mảng nếu không đủ chỗ
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	1c9a      	adds	r2, r3, #2
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
        list->functions = (FunctionPointer *)realloc(list->functions, list->capacity * sizeof(FunctionPointer));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f00b f939 	bl	800c844 <realloc>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	601a      	str	r2, [r3, #0]
    }
    list->functions[list->size] = func;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	601a      	str	r2, [r3, #0]
    list->size++;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	605a      	str	r2, [r3, #4]
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <removeLastFunction>:

// Bỏ con trỏ hàm cuối

void removeLastFunction(FunctionList *list)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
    if (list->size > 1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b01      	cmp	r3, #1
 8001608:	dd04      	ble.n	8001614 <removeLastFunction+0x1a>
    {
        list->size--;  // Giảm kích thước danh sách, bỏ con trỏ cuối
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]
    }
    else
    {

    }
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <callLastFunction>:

// Gọi con trỏ hàm cuối

void callLastFunction(FunctionList *list) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    if (list->size > 0)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd0a      	ble.n	8001646 <callLastFunction+0x26>
    {
        list->functions[list->size - 1]();  // Gọi hàm cuối cùng
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800163c:	3b01      	subs	r3, #1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4798      	blx	r3
    }
    else
    {

    }
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <clearAllFunctions>:
    }
}


void clearAllFunctions(FunctionList *list)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
    list->size = 0;  // Đặt lại số lượng phần tử về 0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <initMainPlane>:
struct miniBossStruct miniBossData[5];
struct bossStruct bossData;


void initMainPlane()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	switch(checkMainSelected)
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <initMainPlane+0x30>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d002      	beq.n	800167a <initMainPlane+0x12>
 8001674:	2b02      	cmp	r3, #2
 8001676:	d004      	beq.n	8001682 <initMainPlane+0x1a>
 8001678:	e007      	b.n	800168a <initMainPlane+0x22>
	{
		case 1:
		{
			initMainDPS(&mainPlane);
 800167a:	4808      	ldr	r0, [pc, #32]	@ (800169c <initMainPlane+0x34>)
 800167c:	f005 fdc4 	bl	8007208 <initMainDPS>
			break;
 8001680:	e007      	b.n	8001692 <initMainPlane+0x2a>
		}
		case 2:
		{
			initMainTank(&mainPlane);
 8001682:	4806      	ldr	r0, [pc, #24]	@ (800169c <initMainPlane+0x34>)
 8001684:	f005 fe5a 	bl	800733c <initMainTank>
			break;
 8001688:	e003      	b.n	8001692 <initMainPlane+0x2a>
		}
		default:
		{
			initMainSpeed(&mainPlane);
 800168a:	4804      	ldr	r0, [pc, #16]	@ (800169c <initMainPlane+0x34>)
 800168c:	f005 fd02 	bl	8007094 <initMainSpeed>
		}

	}
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000010 	.word	0x20000010
 800169c:	200002d4 	.word	0x200002d4

080016a0 <mainPlaneUsed>:
void mainPlaneUsed()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af02      	add	r7, sp, #8
	switch(checkMainSelected)
 80016a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001790 <mainPlaneUsed+0xf0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d002      	beq.n	80016b4 <mainPlaneUsed+0x14>
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d004      	beq.n	80016bc <mainPlaneUsed+0x1c>
 80016b2:	e007      	b.n	80016c4 <mainPlaneUsed+0x24>
	{
		case 1:
		{
			mainDPS(&mainPlane);
 80016b4:	4837      	ldr	r0, [pc, #220]	@ (8001794 <mainPlaneUsed+0xf4>)
 80016b6:	f005 fdef 	bl	8007298 <mainDPS>
			break;
 80016ba:	e006      	b.n	80016ca <mainPlaneUsed+0x2a>
		}
		case 2:
		{
			mainTank(&mainPlane);
 80016bc:	4835      	ldr	r0, [pc, #212]	@ (8001794 <mainPlaneUsed+0xf4>)
 80016be:	f005 fe8b 	bl	80073d8 <mainTank>
			break;
 80016c2:	e002      	b.n	80016ca <mainPlaneUsed+0x2a>
		}
		default:
		{
			mainSpeed(&mainPlane);
 80016c4:	4833      	ldr	r0, [pc, #204]	@ (8001794 <mainPlaneUsed+0xf4>)
 80016c6:	f005 fd2d 	bl	8007124 <mainSpeed>
		}

	}
	if(mainPlane.energy<=0)
 80016ca:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <mainPlaneUsed+0xf4>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	dc02      	bgt.n	80016d8 <mainPlaneUsed+0x38>
	{
		mainPlane.energy=0;
 80016d2:	4b30      	ldr	r3, [pc, #192]	@ (8001794 <mainPlaneUsed+0xf4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	641a      	str	r2, [r3, #64]	@ 0x40
	}
	if(mainPlane.hp<=0)
 80016d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <mainPlaneUsed+0xf4>)
 80016da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	dc02      	bgt.n	80016e6 <mainPlaneUsed+0x46>
	{
		mainPlane.hp=0;
 80016e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <mainPlaneUsed+0xf4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	lcdFillRect(100,0, 140, 10,COLOR_BLACK);
 80016e6:	2300      	movs	r3, #0
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	230a      	movs	r3, #10
 80016ec:	228c      	movs	r2, #140	@ 0x8c
 80016ee:	2100      	movs	r1, #0
 80016f0:	2064      	movs	r0, #100	@ 0x64
 80016f2:	f004 f99b 	bl	8005a2c <lcdFillRect>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80016f6:	2100      	movs	r1, #0
 80016f8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80016fc:	f004 fb8c 	bl	8005e18 <lcdSetTextColor>
	lcdSetCursor( 200 , 0 );
 8001700:	2100      	movs	r1, #0
 8001702:	20c8      	movs	r0, #200	@ 0xc8
 8001704:	f004 fc08 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 8001708:	4823      	ldr	r0, [pc, #140]	@ (8001798 <mainPlaneUsed+0xf8>)
 800170a:	f004 fb75 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "HP:" );
 800170e:	4823      	ldr	r0, [pc, #140]	@ (800179c <mainPlaneUsed+0xfc>)
 8001710:	f004 fae6 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor(210 , 0 );
 8001714:	2100      	movs	r1, #0
 8001716:	20d2      	movs	r0, #210	@ 0xd2
 8001718:	f004 fbfe 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 800171c:	481e      	ldr	r0, [pc, #120]	@ (8001798 <mainPlaneUsed+0xf8>)
 800171e:	f004 fb6b 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "%2u",mainPlane.hp );
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <mainPlaneUsed+0xf4>)
 8001724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001726:	4619      	mov	r1, r3
 8001728:	481d      	ldr	r0, [pc, #116]	@ (80017a0 <mainPlaneUsed+0x100>)
 800172a:	f004 fad9 	bl	8005ce0 <lcdPrintf>

	lcdSetCursor( 150 , 0 );
 800172e:	2100      	movs	r1, #0
 8001730:	2096      	movs	r0, #150	@ 0x96
 8001732:	f004 fbf1 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 8001736:	4818      	ldr	r0, [pc, #96]	@ (8001798 <mainPlaneUsed+0xf8>)
 8001738:	f004 fb5e 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "E:" );
 800173c:	4819      	ldr	r0, [pc, #100]	@ (80017a4 <mainPlaneUsed+0x104>)
 800173e:	f004 facf 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor(160 , 0 );
 8001742:	2100      	movs	r1, #0
 8001744:	20a0      	movs	r0, #160	@ 0xa0
 8001746:	f004 fbe7 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 800174a:	4813      	ldr	r0, [pc, #76]	@ (8001798 <mainPlaneUsed+0xf8>)
 800174c:	f004 fb54 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "%2u",mainPlane.energy );
 8001750:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <mainPlaneUsed+0xf4>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	4619      	mov	r1, r3
 8001756:	4812      	ldr	r0, [pc, #72]	@ (80017a0 <mainPlaneUsed+0x100>)
 8001758:	f004 fac2 	bl	8005ce0 <lcdPrintf>

	lcdSetTextColor(COLOR_WHITE, COLOR_BLUE);
 800175c:	211f      	movs	r1, #31
 800175e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001762:	f004 fb59 	bl	8005e18 <lcdSetTextColor>
	lcdFillCircle(220, 270, 15, COLOR_BLUE);
 8001766:	231f      	movs	r3, #31
 8001768:	220f      	movs	r2, #15
 800176a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800176e:	20dc      	movs	r0, #220	@ 0xdc
 8001770:	f004 f884 	bl	800587c <lcdFillCircle>
	lcdSetCursor( 207 , 268 );
 8001774:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001778:	20cf      	movs	r0, #207	@ 0xcf
 800177a:	f004 fbcd 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <mainPlaneUsed+0xf8>)
 8001780:	f004 fb3a 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "Skill" );
 8001784:	4808      	ldr	r0, [pc, #32]	@ (80017a8 <mainPlaneUsed+0x108>)
 8001786:	f004 faab 	bl	8005ce0 <lcdPrintf>

}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000010 	.word	0x20000010
 8001794:	200002d4 	.word	0x200002d4
 8001798:	2000003c 	.word	0x2000003c
 800179c:	08010134 	.word	0x08010134
 80017a0:	08010138 	.word	0x08010138
 80017a4:	0801013c 	.word	0x0801013c
 80017a8:	08010140 	.word	0x08010140

080017ac <mission3>:




void mission3()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0ae      	sub	sp, #184	@ 0xb8
 80017b0:	af00      	add	r7, sp, #0
	if(runningScreen==1)
 80017b2:	4b97      	ldr	r3, [pc, #604]	@ (8001a10 <mission3+0x264>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 80e3 	bne.w	8001982 <mission3+0x1d6>
	{
		//initMainPlane();

		lcdFillRGB(COLOR_BLACK);
 80017bc:	2000      	movs	r0, #0
 80017be:	f003 fea5 	bl	800550c <lcdFillRGB>
		lcdPrintf( "",Button() );
 80017c2:	f000 ffc1 	bl	8002748 <Button>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4892      	ldr	r0, [pc, #584]	@ (8001a14 <mission3+0x268>)
 80017cc:	f004 fa88 	bl	8005ce0 <lcdPrintf>
		countYboss=0;
 80017d0:	4b91      	ldr	r3, [pc, #580]	@ (8001a18 <mission3+0x26c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
		countYMiniBoss=0;
 80017d6:	4b91      	ldr	r3, [pc, #580]	@ (8001a1c <mission3+0x270>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
//		miniBossData[0]=(struct miniBossStruct){0,-60,50,0,{{25,-20,0,0,2},{25,-20,0,0,2},{25,-20,0,0,2}}};

		bossData=(struct bossStruct){75,-80,200,0,{{140,-5,0,0,3} , {140,-5,0,0,3} , {140,-5,0,0,3} , {140,-5,0,0,4} , {140,-5,0,0,4}, {140,-5,0,0,3}, {140,-5,0,0,3}}};
 80017dc:	4b90      	ldr	r3, [pc, #576]	@ (8001a20 <mission3+0x274>)
 80017de:	4618      	mov	r0, r3
 80017e0:	23b8      	movs	r3, #184	@ 0xb8
 80017e2:	461a      	mov	r2, r3
 80017e4:	2100      	movs	r1, #0
 80017e6:	f00c f86b 	bl	800d8c0 <memset>
 80017ea:	4b8d      	ldr	r3, [pc, #564]	@ (8001a20 <mission3+0x274>)
 80017ec:	224b      	movs	r2, #75	@ 0x4b
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	4b8b      	ldr	r3, [pc, #556]	@ (8001a20 <mission3+0x274>)
 80017f2:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	4b89      	ldr	r3, [pc, #548]	@ (8001a20 <mission3+0x274>)
 80017fa:	22c8      	movs	r2, #200	@ 0xc8
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	4b88      	ldr	r3, [pc, #544]	@ (8001a20 <mission3+0x274>)
 8001800:	228c      	movs	r2, #140	@ 0x8c
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	4b86      	ldr	r3, [pc, #536]	@ (8001a20 <mission3+0x274>)
 8001806:	f06f 0204 	mvn.w	r2, #4
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	4b84      	ldr	r3, [pc, #528]	@ (8001a20 <mission3+0x274>)
 800180e:	2203      	movs	r2, #3
 8001810:	621a      	str	r2, [r3, #32]
 8001812:	4b83      	ldr	r3, [pc, #524]	@ (8001a20 <mission3+0x274>)
 8001814:	228c      	movs	r2, #140	@ 0x8c
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
 8001818:	4b81      	ldr	r3, [pc, #516]	@ (8001a20 <mission3+0x274>)
 800181a:	f06f 0204 	mvn.w	r2, #4
 800181e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001820:	4b7f      	ldr	r3, [pc, #508]	@ (8001a20 <mission3+0x274>)
 8001822:	2203      	movs	r2, #3
 8001824:	639a      	str	r2, [r3, #56]	@ 0x38
 8001826:	4b7e      	ldr	r3, [pc, #504]	@ (8001a20 <mission3+0x274>)
 8001828:	228c      	movs	r2, #140	@ 0x8c
 800182a:	641a      	str	r2, [r3, #64]	@ 0x40
 800182c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a20 <mission3+0x274>)
 800182e:	f06f 0204 	mvn.w	r2, #4
 8001832:	645a      	str	r2, [r3, #68]	@ 0x44
 8001834:	4b7a      	ldr	r3, [pc, #488]	@ (8001a20 <mission3+0x274>)
 8001836:	2203      	movs	r2, #3
 8001838:	651a      	str	r2, [r3, #80]	@ 0x50
 800183a:	4b79      	ldr	r3, [pc, #484]	@ (8001a20 <mission3+0x274>)
 800183c:	228c      	movs	r2, #140	@ 0x8c
 800183e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001840:	4b77      	ldr	r3, [pc, #476]	@ (8001a20 <mission3+0x274>)
 8001842:	f06f 0204 	mvn.w	r2, #4
 8001846:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001848:	4b75      	ldr	r3, [pc, #468]	@ (8001a20 <mission3+0x274>)
 800184a:	2204      	movs	r2, #4
 800184c:	669a      	str	r2, [r3, #104]	@ 0x68
 800184e:	4b74      	ldr	r3, [pc, #464]	@ (8001a20 <mission3+0x274>)
 8001850:	228c      	movs	r2, #140	@ 0x8c
 8001852:	671a      	str	r2, [r3, #112]	@ 0x70
 8001854:	4b72      	ldr	r3, [pc, #456]	@ (8001a20 <mission3+0x274>)
 8001856:	f06f 0204 	mvn.w	r2, #4
 800185a:	675a      	str	r2, [r3, #116]	@ 0x74
 800185c:	4b70      	ldr	r3, [pc, #448]	@ (8001a20 <mission3+0x274>)
 800185e:	2204      	movs	r2, #4
 8001860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001864:	4b6e      	ldr	r3, [pc, #440]	@ (8001a20 <mission3+0x274>)
 8001866:	228c      	movs	r2, #140	@ 0x8c
 8001868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800186c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a20 <mission3+0x274>)
 800186e:	f06f 0204 	mvn.w	r2, #4
 8001872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001876:	4b6a      	ldr	r3, [pc, #424]	@ (8001a20 <mission3+0x274>)
 8001878:	2203      	movs	r2, #3
 800187a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800187e:	4b68      	ldr	r3, [pc, #416]	@ (8001a20 <mission3+0x274>)
 8001880:	228c      	movs	r2, #140	@ 0x8c
 8001882:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8001886:	4b66      	ldr	r3, [pc, #408]	@ (8001a20 <mission3+0x274>)
 8001888:	f06f 0204 	mvn.w	r2, #4
 800188c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8001890:	4b63      	ldr	r3, [pc, #396]	@ (8001a20 <mission3+0x274>)
 8001892:	2203      	movs	r2, #3
 8001894:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		miniBossData[3]=(struct miniBossStruct){25,-100,100,0,{{70,40,0,0,2},{70,40,0,0,2},{70,40,0,0,2}}};
 8001898:	4b62      	ldr	r3, [pc, #392]	@ (8001a24 <mission3+0x278>)
 800189a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800189e:	2258      	movs	r2, #88	@ 0x58
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00c f80c 	bl	800d8c0 <memset>
 80018a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a24 <mission3+0x278>)
 80018aa:	2219      	movs	r2, #25
 80018ac:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 80018b0:	4b5c      	ldr	r3, [pc, #368]	@ (8001a24 <mission3+0x278>)
 80018b2:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80018b6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 80018ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001a24 <mission3+0x278>)
 80018bc:	2264      	movs	r2, #100	@ 0x64
 80018be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 80018c2:	4b58      	ldr	r3, [pc, #352]	@ (8001a24 <mission3+0x278>)
 80018c4:	2246      	movs	r2, #70	@ 0x46
 80018c6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
 80018ca:	4b56      	ldr	r3, [pc, #344]	@ (8001a24 <mission3+0x278>)
 80018cc:	2228      	movs	r2, #40	@ 0x28
 80018ce:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80018d2:	4b54      	ldr	r3, [pc, #336]	@ (8001a24 <mission3+0x278>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
 80018da:	4b52      	ldr	r3, [pc, #328]	@ (8001a24 <mission3+0x278>)
 80018dc:	2246      	movs	r2, #70	@ 0x46
 80018de:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 80018e2:	4b50      	ldr	r3, [pc, #320]	@ (8001a24 <mission3+0x278>)
 80018e4:	2228      	movs	r2, #40	@ 0x28
 80018e6:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 80018ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001a24 <mission3+0x278>)
 80018ec:	2202      	movs	r2, #2
 80018ee:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80018f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a24 <mission3+0x278>)
 80018f4:	2246      	movs	r2, #70	@ 0x46
 80018f6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 80018fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001a24 <mission3+0x278>)
 80018fc:	2228      	movs	r2, #40	@ 0x28
 80018fe:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 8001902:	4b48      	ldr	r3, [pc, #288]	@ (8001a24 <mission3+0x278>)
 8001904:	2202      	movs	r2, #2
 8001906:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

		miniBossData[4]=(struct miniBossStruct){160,-100,100,0,{{165,40,0,0,2},{165,40,0,0,2},{165,40,0,0,2}}};
 800190a:	4b46      	ldr	r3, [pc, #280]	@ (8001a24 <mission3+0x278>)
 800190c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001910:	2258      	movs	r2, #88	@ 0x58
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f00b ffd3 	bl	800d8c0 <memset>
 800191a:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <mission3+0x278>)
 800191c:	22a0      	movs	r2, #160	@ 0xa0
 800191e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 8001922:	4b40      	ldr	r3, [pc, #256]	@ (8001a24 <mission3+0x278>)
 8001924:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8001928:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 800192c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <mission3+0x278>)
 800192e:	2264      	movs	r2, #100	@ 0x64
 8001930:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8001934:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <mission3+0x278>)
 8001936:	22a5      	movs	r2, #165	@ 0xa5
 8001938:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 800193c:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <mission3+0x278>)
 800193e:	2228      	movs	r2, #40	@ 0x28
 8001940:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8001944:	4b37      	ldr	r3, [pc, #220]	@ (8001a24 <mission3+0x278>)
 8001946:	2202      	movs	r2, #2
 8001948:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 800194c:	4b35      	ldr	r3, [pc, #212]	@ (8001a24 <mission3+0x278>)
 800194e:	22a5      	movs	r2, #165	@ 0xa5
 8001950:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 8001954:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <mission3+0x278>)
 8001956:	2228      	movs	r2, #40	@ 0x28
 8001958:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 800195c:	4b31      	ldr	r3, [pc, #196]	@ (8001a24 <mission3+0x278>)
 800195e:	2202      	movs	r2, #2
 8001960:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 8001964:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <mission3+0x278>)
 8001966:	22a5      	movs	r2, #165	@ 0xa5
 8001968:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 800196c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <mission3+0x278>)
 800196e:	2228      	movs	r2, #40	@ 0x28
 8001970:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 8001974:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <mission3+0x278>)
 8001976:	2202      	movs	r2, #2
 8001978:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0





		runningScreen=0;
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <mission3+0x264>)
 800197e:	2200      	movs	r2, #0
 8001980:	801a      	strh	r2, [r3, #0]

	}


	boss(&bossData,&mainPlane);
 8001982:	4929      	ldr	r1, [pc, #164]	@ (8001a28 <mission3+0x27c>)
 8001984:	4826      	ldr	r0, [pc, #152]	@ (8001a20 <mission3+0x274>)
 8001986:	f002 fd67 	bl	8004458 <boss>
	miniBoss(&miniBossData[3],&mainPlane);
 800198a:	4927      	ldr	r1, [pc, #156]	@ (8001a28 <mission3+0x27c>)
 800198c:	4827      	ldr	r0, [pc, #156]	@ (8001a2c <mission3+0x280>)
 800198e:	f002 fa7c 	bl	8003e8a <miniBoss>
	miniBoss(&miniBossData[4],&mainPlane);
 8001992:	4925      	ldr	r1, [pc, #148]	@ (8001a28 <mission3+0x27c>)
 8001994:	4826      	ldr	r0, [pc, #152]	@ (8001a30 <mission3+0x284>)
 8001996:	f002 fa78 	bl	8003e8a <miniBoss>

	mainPlaneUsed(&mainPlane);
 800199a:	4823      	ldr	r0, [pc, #140]	@ (8001a28 <mission3+0x27c>)
 800199c:	f7ff fe80 	bl	80016a0 <mainPlaneUsed>
	if (mainPlane.hp<=0)
 80019a0:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <mission3+0x27c>)
 80019a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dc11      	bgt.n	80019cc <mission3+0x220>
	{
		lose();
 80019a8:	f006 f82a 	bl	8007a00 <lose>
		HAL_Delay(1000);
 80019ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b0:	f006 fe44 	bl	800863c <HAL_Delay>
 		runningScreen=1;
 80019b4:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <mission3+0x264>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	801a      	strh	r2, [r3, #0]
 		removeLastFunction(&currentScreen);
 80019ba:	481e      	ldr	r0, [pc, #120]	@ (8001a34 <mission3+0x288>)
 80019bc:	f7ff fe1d 	bl	80015fa <removeLastFunction>
 		removeLastFunction(&currentScreen);
 80019c0:	481c      	ldr	r0, [pc, #112]	@ (8001a34 <mission3+0x288>)
 80019c2:	f7ff fe1a 	bl	80015fa <removeLastFunction>
 		removeLastFunction(&currentScreen);
 80019c6:	481b      	ldr	r0, [pc, #108]	@ (8001a34 <mission3+0x288>)
 80019c8:	f7ff fe17 	bl	80015fa <removeLastFunction>
	}
	if ( bossData.hp+miniBossData[3].hp+miniBossData[4].hp==0)
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <mission3+0x274>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <mission3+0x278>)
 80019d2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80019d6:	441a      	add	r2, r3
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <mission3+0x278>)
 80019da:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80019de:	4413      	add	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d111      	bne.n	8001a08 <mission3+0x25c>
	{
		win();
 80019e4:	f006 f824 	bl	8007a30 <win>
		HAL_Delay(1000);
 80019e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ec:	f006 fe26 	bl	800863c <HAL_Delay>
 		runningScreen=1;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <mission3+0x264>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	801a      	strh	r2, [r3, #0]
 		removeLastFunction(&currentScreen);
 80019f6:	480f      	ldr	r0, [pc, #60]	@ (8001a34 <mission3+0x288>)
 80019f8:	f7ff fdff 	bl	80015fa <removeLastFunction>
 		removeLastFunction(&currentScreen);
 80019fc:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <mission3+0x288>)
 80019fe:	f7ff fdfc 	bl	80015fa <removeLastFunction>
 		removeLastFunction(&currentScreen);
 8001a02:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <mission3+0x288>)
 8001a04:	f7ff fdf9 	bl	80015fa <removeLastFunction>

	}



}
 8001a08:	bf00      	nop
 8001a0a:	37b8      	adds	r7, #184	@ 0xb8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000000 	.word	0x20000000
 8001a14:	08010148 	.word	0x08010148
 8001a18:	20000974 	.word	0x20000974
 8001a1c:	20000970 	.word	0x20000970
 8001a20:	200008b8 	.word	0x200008b8
 8001a24:	20000700 	.word	0x20000700
 8001a28:	200002d4 	.word	0x200002d4
 8001a2c:	20000808 	.word	0x20000808
 8001a30:	20000860 	.word	0x20000860
 8001a34:	20000250 	.word	0x20000250

08001a38 <mission2>:


void mission2()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b098      	sub	sp, #96	@ 0x60
 8001a3c:	af00      	add	r7, sp, #0
	if(runningScreen==1)
 8001a3e:	4bb1      	ldr	r3, [pc, #708]	@ (8001d04 <mission2+0x2cc>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	f040 8114 	bne.w	8001c70 <mission2+0x238>
	{

		//initMainPlane();
		lcdFillRGB(COLOR_BLACK);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f003 fd5f 	bl	800550c <lcdFillRGB>
		lcdPrintf( "",Button() );
 8001a4e:	f000 fe7b 	bl	8002748 <Button>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	48ac      	ldr	r0, [pc, #688]	@ (8001d08 <mission2+0x2d0>)
 8001a58:	f004 f942 	bl	8005ce0 <lcdPrintf>
		countYMiniBoss=0;
 8001a5c:	4bab      	ldr	r3, [pc, #684]	@ (8001d0c <mission2+0x2d4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
		miniBossData[0]=(struct miniBossStruct){0,-60,60,0,{{25,-20,0,0,2},{25,-20,0,0,2},{25,-20,0,0,2}}};
 8001a62:	4bab      	ldr	r3, [pc, #684]	@ (8001d10 <mission2+0x2d8>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	2358      	movs	r3, #88	@ 0x58
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	f00b ff28 	bl	800d8c0 <memset>
 8001a70:	4ba7      	ldr	r3, [pc, #668]	@ (8001d10 <mission2+0x2d8>)
 8001a72:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	4ba5      	ldr	r3, [pc, #660]	@ (8001d10 <mission2+0x2d8>)
 8001a7a:	223c      	movs	r2, #60	@ 0x3c
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	4ba4      	ldr	r3, [pc, #656]	@ (8001d10 <mission2+0x2d8>)
 8001a80:	2219      	movs	r2, #25
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	4ba2      	ldr	r3, [pc, #648]	@ (8001d10 <mission2+0x2d8>)
 8001a86:	f06f 0213 	mvn.w	r2, #19
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d10 <mission2+0x2d8>)
 8001a8e:	2202      	movs	r2, #2
 8001a90:	621a      	str	r2, [r3, #32]
 8001a92:	4b9f      	ldr	r3, [pc, #636]	@ (8001d10 <mission2+0x2d8>)
 8001a94:	2219      	movs	r2, #25
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a98:	4b9d      	ldr	r3, [pc, #628]	@ (8001d10 <mission2+0x2d8>)
 8001a9a:	f06f 0213 	mvn.w	r2, #19
 8001a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001aa0:	4b9b      	ldr	r3, [pc, #620]	@ (8001d10 <mission2+0x2d8>)
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aa6:	4b9a      	ldr	r3, [pc, #616]	@ (8001d10 <mission2+0x2d8>)
 8001aa8:	2219      	movs	r2, #25
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aac:	4b98      	ldr	r3, [pc, #608]	@ (8001d10 <mission2+0x2d8>)
 8001aae:	f06f 0213 	mvn.w	r2, #19
 8001ab2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ab4:	4b96      	ldr	r3, [pc, #600]	@ (8001d10 <mission2+0x2d8>)
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	651a      	str	r2, [r3, #80]	@ 0x50

		miniBossData[1]=(struct miniBossStruct){95,-60,100,0,{{120,-20,0,0,2},{120,-20,0,0,2},{120,-20,0,0,2}}};
 8001aba:	4b95      	ldr	r3, [pc, #596]	@ (8001d10 <mission2+0x2d8>)
 8001abc:	3358      	adds	r3, #88	@ 0x58
 8001abe:	2258      	movs	r2, #88	@ 0x58
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00b fefc 	bl	800d8c0 <memset>
 8001ac8:	4b91      	ldr	r3, [pc, #580]	@ (8001d10 <mission2+0x2d8>)
 8001aca:	225f      	movs	r2, #95	@ 0x5f
 8001acc:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ace:	4b90      	ldr	r3, [pc, #576]	@ (8001d10 <mission2+0x2d8>)
 8001ad0:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ad6:	4b8e      	ldr	r3, [pc, #568]	@ (8001d10 <mission2+0x2d8>)
 8001ad8:	2264      	movs	r2, #100	@ 0x64
 8001ada:	661a      	str	r2, [r3, #96]	@ 0x60
 8001adc:	4b8c      	ldr	r3, [pc, #560]	@ (8001d10 <mission2+0x2d8>)
 8001ade:	2278      	movs	r2, #120	@ 0x78
 8001ae0:	669a      	str	r2, [r3, #104]	@ 0x68
 8001ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8001d10 <mission2+0x2d8>)
 8001ae4:	f06f 0213 	mvn.w	r2, #19
 8001ae8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001aea:	4b89      	ldr	r3, [pc, #548]	@ (8001d10 <mission2+0x2d8>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	679a      	str	r2, [r3, #120]	@ 0x78
 8001af0:	4b87      	ldr	r3, [pc, #540]	@ (8001d10 <mission2+0x2d8>)
 8001af2:	2278      	movs	r2, #120	@ 0x78
 8001af4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001af8:	4b85      	ldr	r3, [pc, #532]	@ (8001d10 <mission2+0x2d8>)
 8001afa:	f06f 0213 	mvn.w	r2, #19
 8001afe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001b02:	4b83      	ldr	r3, [pc, #524]	@ (8001d10 <mission2+0x2d8>)
 8001b04:	2202      	movs	r2, #2
 8001b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001b0a:	4b81      	ldr	r3, [pc, #516]	@ (8001d10 <mission2+0x2d8>)
 8001b0c:	2278      	movs	r2, #120	@ 0x78
 8001b0e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001b12:	4b7f      	ldr	r3, [pc, #508]	@ (8001d10 <mission2+0x2d8>)
 8001b14:	f06f 0213 	mvn.w	r2, #19
 8001b18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001b1c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d10 <mission2+0x2d8>)
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

		miniBossData[2]=(struct miniBossStruct){190,-60,60,0,{{215,-20,0,0,2},{215,-20,0,0,2},{215,-20,0,0,2}}};
 8001b24:	4b7a      	ldr	r3, [pc, #488]	@ (8001d10 <mission2+0x2d8>)
 8001b26:	33b0      	adds	r3, #176	@ 0xb0
 8001b28:	2258      	movs	r2, #88	@ 0x58
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00b fec7 	bl	800d8c0 <memset>
 8001b32:	4b77      	ldr	r3, [pc, #476]	@ (8001d10 <mission2+0x2d8>)
 8001b34:	22be      	movs	r2, #190	@ 0xbe
 8001b36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001b3a:	4b75      	ldr	r3, [pc, #468]	@ (8001d10 <mission2+0x2d8>)
 8001b3c:	f06f 023b 	mvn.w	r2, #59	@ 0x3b
 8001b40:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8001b44:	4b72      	ldr	r3, [pc, #456]	@ (8001d10 <mission2+0x2d8>)
 8001b46:	223c      	movs	r2, #60	@ 0x3c
 8001b48:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001b4c:	4b70      	ldr	r3, [pc, #448]	@ (8001d10 <mission2+0x2d8>)
 8001b4e:	22d7      	movs	r2, #215	@ 0xd7
 8001b50:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8001b54:	4b6e      	ldr	r3, [pc, #440]	@ (8001d10 <mission2+0x2d8>)
 8001b56:	f06f 0213 	mvn.w	r2, #19
 8001b5a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8001b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d10 <mission2+0x2d8>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8001b66:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <mission2+0x2d8>)
 8001b68:	22d7      	movs	r2, #215	@ 0xd7
 8001b6a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8001b6e:	4b68      	ldr	r3, [pc, #416]	@ (8001d10 <mission2+0x2d8>)
 8001b70:	f06f 0213 	mvn.w	r2, #19
 8001b74:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8001b78:	4b65      	ldr	r3, [pc, #404]	@ (8001d10 <mission2+0x2d8>)
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001b80:	4b63      	ldr	r3, [pc, #396]	@ (8001d10 <mission2+0x2d8>)
 8001b82:	22d7      	movs	r2, #215	@ 0xd7
 8001b84:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001b88:	4b61      	ldr	r3, [pc, #388]	@ (8001d10 <mission2+0x2d8>)
 8001b8a:	f06f 0213 	mvn.w	r2, #19
 8001b8e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001b92:	4b5f      	ldr	r3, [pc, #380]	@ (8001d10 <mission2+0x2d8>)
 8001b94:	2202      	movs	r2, #2
 8001b96:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

		miniBossData[3]=(struct miniBossStruct){45,0,60,0,{{70,40,0,0,2},{70,40,0,0,2},{70,40,0,0,2}}};
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d10 <mission2+0x2d8>)
 8001b9c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001ba0:	2258      	movs	r2, #88	@ 0x58
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00b fe8b 	bl	800d8c0 <memset>
 8001baa:	4b59      	ldr	r3, [pc, #356]	@ (8001d10 <mission2+0x2d8>)
 8001bac:	222d      	movs	r2, #45	@ 0x2d
 8001bae:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8001bb2:	4b57      	ldr	r3, [pc, #348]	@ (8001d10 <mission2+0x2d8>)
 8001bb4:	223c      	movs	r2, #60	@ 0x3c
 8001bb6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8001bba:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <mission2+0x2d8>)
 8001bbc:	2246      	movs	r2, #70	@ 0x46
 8001bbe:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
 8001bc2:	4b53      	ldr	r3, [pc, #332]	@ (8001d10 <mission2+0x2d8>)
 8001bc4:	2228      	movs	r2, #40	@ 0x28
 8001bc6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8001bca:	4b51      	ldr	r3, [pc, #324]	@ (8001d10 <mission2+0x2d8>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
 8001bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8001d10 <mission2+0x2d8>)
 8001bd4:	2246      	movs	r2, #70	@ 0x46
 8001bd6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 8001bda:	4b4d      	ldr	r3, [pc, #308]	@ (8001d10 <mission2+0x2d8>)
 8001bdc:	2228      	movs	r2, #40	@ 0x28
 8001bde:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8001be2:	4b4b      	ldr	r3, [pc, #300]	@ (8001d10 <mission2+0x2d8>)
 8001be4:	2202      	movs	r2, #2
 8001be6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001bea:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <mission2+0x2d8>)
 8001bec:	2246      	movs	r2, #70	@ 0x46
 8001bee:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 8001bf2:	4b47      	ldr	r3, [pc, #284]	@ (8001d10 <mission2+0x2d8>)
 8001bf4:	2228      	movs	r2, #40	@ 0x28
 8001bf6:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 8001bfa:	4b45      	ldr	r3, [pc, #276]	@ (8001d10 <mission2+0x2d8>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

		miniBossData[4]=(struct miniBossStruct){140,0,60,0,{{165,40,0,0,2},{165,40,0,0,2},{165,40,0,0,2}}};
 8001c02:	4b43      	ldr	r3, [pc, #268]	@ (8001d10 <mission2+0x2d8>)
 8001c04:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001c08:	2258      	movs	r2, #88	@ 0x58
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00b fe57 	bl	800d8c0 <memset>
 8001c12:	4b3f      	ldr	r3, [pc, #252]	@ (8001d10 <mission2+0x2d8>)
 8001c14:	228c      	movs	r2, #140	@ 0x8c
 8001c16:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d10 <mission2+0x2d8>)
 8001c1c:	223c      	movs	r2, #60	@ 0x3c
 8001c1e:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8001c22:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <mission2+0x2d8>)
 8001c24:	22a5      	movs	r2, #165	@ 0xa5
 8001c26:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8001c2a:	4b39      	ldr	r3, [pc, #228]	@ (8001d10 <mission2+0x2d8>)
 8001c2c:	2228      	movs	r2, #40	@ 0x28
 8001c2e:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8001c32:	4b37      	ldr	r3, [pc, #220]	@ (8001d10 <mission2+0x2d8>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 8001c3a:	4b35      	ldr	r3, [pc, #212]	@ (8001d10 <mission2+0x2d8>)
 8001c3c:	22a5      	movs	r2, #165	@ 0xa5
 8001c3e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 8001c42:	4b33      	ldr	r3, [pc, #204]	@ (8001d10 <mission2+0x2d8>)
 8001c44:	2228      	movs	r2, #40	@ 0x28
 8001c46:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 8001c4a:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <mission2+0x2d8>)
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 8001c52:	4b2f      	ldr	r3, [pc, #188]	@ (8001d10 <mission2+0x2d8>)
 8001c54:	22a5      	movs	r2, #165	@ 0xa5
 8001c56:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <mission2+0x2d8>)
 8001c5c:	2228      	movs	r2, #40	@ 0x28
 8001c5e:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 8001c62:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <mission2+0x2d8>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0




		runningScreen=0;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <mission2+0x2cc>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	801a      	strh	r2, [r3, #0]

	}


	passMission2=miniBossData[0].hp;
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <mission2+0x2d8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a27      	ldr	r2, [pc, #156]	@ (8001d14 <mission2+0x2dc>)
 8001c76:	6013      	str	r3, [r2, #0]
	for(int i=0;i<5;i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c7c:	e019      	b.n	8001cb2 <mission2+0x27a>
	{
		miniBoss(&miniBossData[i],&mainPlane);
 8001c7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c80:	2258      	movs	r2, #88	@ 0x58
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4a22      	ldr	r2, [pc, #136]	@ (8001d10 <mission2+0x2d8>)
 8001c88:	4413      	add	r3, r2
 8001c8a:	4923      	ldr	r1, [pc, #140]	@ (8001d18 <mission2+0x2e0>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 f8fc 	bl	8003e8a <miniBoss>
		passMission2+=miniBossData[i].hp;
 8001c92:	4a1f      	ldr	r2, [pc, #124]	@ (8001d10 <mission2+0x2d8>)
 8001c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c96:	2158      	movs	r1, #88	@ 0x58
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <mission2+0x2dc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d14 <mission2+0x2dc>)
 8001caa:	6013      	str	r3, [r2, #0]
	for(int i=0;i<5;i++)
 8001cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cae:	3301      	adds	r3, #1
 8001cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	dde2      	ble.n	8001c7e <mission2+0x246>
	}

	mainPlaneUsed(&mainPlane);
 8001cb8:	4817      	ldr	r0, [pc, #92]	@ (8001d18 <mission2+0x2e0>)
 8001cba:	f7ff fcf1 	bl	80016a0 <mainPlaneUsed>

	if(passMission2==0)
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <mission2+0x2dc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <mission2+0x29c>
	{
		runningScreen=1;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <mission2+0x2cc>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	801a      	strh	r2, [r3, #0]
		addFunction(&currentScreen, mission3);
 8001ccc:	4913      	ldr	r1, [pc, #76]	@ (8001d1c <mission2+0x2e4>)
 8001cce:	4814      	ldr	r0, [pc, #80]	@ (8001d20 <mission2+0x2e8>)
 8001cd0:	f7ff fc66 	bl	80015a0 <addFunction>
	}

	if (mainPlane.hp<=0)
 8001cd4:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <mission2+0x2e0>)
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	dc0e      	bgt.n	8001cfa <mission2+0x2c2>
	{
		lose();
 8001cdc:	f005 fe90 	bl	8007a00 <lose>
		HAL_Delay(1000);
 8001ce0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ce4:	f006 fcaa 	bl	800863c <HAL_Delay>
 		runningScreen=1;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <mission2+0x2cc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	801a      	strh	r2, [r3, #0]
 		removeLastFunction(&currentScreen);
 8001cee:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <mission2+0x2e8>)
 8001cf0:	f7ff fc83 	bl	80015fa <removeLastFunction>
 		removeLastFunction(&currentScreen);
 8001cf4:	480a      	ldr	r0, [pc, #40]	@ (8001d20 <mission2+0x2e8>)
 8001cf6:	f7ff fc80 	bl	80015fa <removeLastFunction>
	}

}
 8001cfa:	bf00      	nop
 8001cfc:	3760      	adds	r7, #96	@ 0x60
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000
 8001d08:	08010148 	.word	0x08010148
 8001d0c:	20000970 	.word	0x20000970
 8001d10:	20000700 	.word	0x20000700
 8001d14:	200002c4 	.word	0x200002c4
 8001d18:	200002d4 	.word	0x200002d4
 8001d1c:	080017ad 	.word	0x080017ad
 8001d20:	20000250 	.word	0x20000250

08001d24 <mission1>:




void mission1()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	@ 0x50
 8001d28:	af02      	add	r7, sp, #8
	if(runningScreen==1)
 8001d2a:	4b82      	ldr	r3, [pc, #520]	@ (8001f34 <mission1+0x210>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	f040 80d0 	bne.w	8001ed4 <mission1+0x1b0>
	{
		countMission1=2000;
 8001d34:	4b80      	ldr	r3, [pc, #512]	@ (8001f38 <mission1+0x214>)
 8001d36:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d3a:	601a      	str	r2, [r3, #0]
		lcdFillRGB(COLOR_BLACK);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f003 fbe5 	bl	800550c <lcdFillRGB>
		lcdPrintf( "",Button() );
 8001d42:	f000 fd01 	bl	8002748 <Button>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	487c      	ldr	r0, [pc, #496]	@ (8001f3c <mission1+0x218>)
 8001d4c:	f003 ffc8 	bl	8005ce0 <lcdPrintf>
		for(int i=0;i<24;i++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d54:	e0b5      	b.n	8001ec2 <mission1+0x19e>
		{
			if(i>=8&&i<16)
 8001d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d58:	2b07      	cmp	r3, #7
 8001d5a:	dd3b      	ble.n	8001dd4 <mission1+0xb0>
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	dc38      	bgt.n	8001dd4 <mission1+0xb0>
			{
				creepData[i]=(struct creepStruct){(i-8)*30,0,4,0,1};
 8001d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d64:	f1a3 0208 	sub.w	r2, r3, #8
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4618      	mov	r0, r3
 8001d72:	4973      	ldr	r1, [pc, #460]	@ (8001f40 <mission1+0x21c>)
 8001d74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	6018      	str	r0, [r3, #0]
 8001d82:	496f      	ldr	r1, [pc, #444]	@ (8001f40 <mission1+0x21c>)
 8001d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	3304      	adds	r3, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	496a      	ldr	r1, [pc, #424]	@ (8001f40 <mission1+0x21c>)
 8001d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3308      	adds	r3, #8
 8001da6:	2204      	movs	r2, #4
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	4965      	ldr	r1, [pc, #404]	@ (8001f40 <mission1+0x21c>)
 8001dac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	330c      	adds	r3, #12
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	4960      	ldr	r1, [pc, #384]	@ (8001f40 <mission1+0x21c>)
 8001dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3310      	adds	r3, #16
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
			{
 8001dd2:	e073      	b.n	8001ebc <mission1+0x198>
			}
			else if(i<8)
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd6:	2b07      	cmp	r3, #7
 8001dd8:	dc37      	bgt.n	8001e4a <mission1+0x126>
			{
				creepData[i]=(struct creepStruct){i*30,-40,4,0,1};
 8001dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	4956      	ldr	r1, [pc, #344]	@ (8001f40 <mission1+0x21c>)
 8001de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	6018      	str	r0, [r3, #0]
 8001df6:	4952      	ldr	r1, [pc, #328]	@ (8001f40 <mission1+0x21c>)
 8001df8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3304      	adds	r3, #4
 8001e06:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	494c      	ldr	r1, [pc, #304]	@ (8001f40 <mission1+0x21c>)
 8001e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	4947      	ldr	r1, [pc, #284]	@ (8001f40 <mission1+0x21c>)
 8001e22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	330c      	adds	r3, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	4942      	ldr	r1, [pc, #264]	@ (8001f40 <mission1+0x21c>)
 8001e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3310      	adds	r3, #16
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e038      	b.n	8001ebc <mission1+0x198>
			}
			else
			{
				creepData[i]=(struct creepStruct){(i-16)*30,-80,4,0,1};
 8001e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4c:	f1a3 0210 	sub.w	r2, r3, #16
 8001e50:	4613      	mov	r3, r2
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	4939      	ldr	r1, [pc, #228]	@ (8001f40 <mission1+0x21c>)
 8001e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	6018      	str	r0, [r3, #0]
 8001e6a:	4935      	ldr	r1, [pc, #212]	@ (8001f40 <mission1+0x21c>)
 8001e6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3304      	adds	r3, #4
 8001e7a:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	492f      	ldr	r1, [pc, #188]	@ (8001f40 <mission1+0x21c>)
 8001e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3308      	adds	r3, #8
 8001e90:	2204      	movs	r2, #4
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	492a      	ldr	r1, [pc, #168]	@ (8001f40 <mission1+0x21c>)
 8001e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4925      	ldr	r1, [pc, #148]	@ (8001f40 <mission1+0x21c>)
 8001eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
		for(int i=0;i<24;i++)
 8001ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec4:	2b17      	cmp	r3, #23
 8001ec6:	f77f af46 	ble.w	8001d56 <mission1+0x32>
			}

		}

		initMainPlane();
 8001eca:	f7ff fbcd 	bl	8001668 <initMainPlane>

		runningScreen=0;
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <mission1+0x210>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	801a      	strh	r2, [r3, #0]

	}

	countMission1 -=1;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <mission1+0x214>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <mission1+0x214>)
 8001edc:	6013      	str	r3, [r2, #0]

	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ee4:	f003 ff98 	bl	8005e18 <lcdSetTextColor>
	lcdFillRect(0,0, 30, 10,COLOR_BLACK);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	230a      	movs	r3, #10
 8001eee:	221e      	movs	r2, #30
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f003 fd9a 	bl	8005a2c <lcdFillRect>
	lcdSetCursor( 0 , 0 );
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2000      	movs	r0, #0
 8001efc:	f004 f80c 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 8001f00:	4810      	ldr	r0, [pc, #64]	@ (8001f44 <mission1+0x220>)
 8001f02:	f003 ff79 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "Time:" );
 8001f06:	4810      	ldr	r0, [pc, #64]	@ (8001f48 <mission1+0x224>)
 8001f08:	f003 feea 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor(20 , 0 );
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2014      	movs	r0, #20
 8001f10:	f004 f802 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 8001f14:	480b      	ldr	r0, [pc, #44]	@ (8001f44 <mission1+0x220>)
 8001f16:	f003 ff6f 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "%2u",countMission1 );
 8001f1a:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <mission1+0x214>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480a      	ldr	r0, [pc, #40]	@ (8001f4c <mission1+0x228>)
 8001f22:	f003 fedd 	bl	8005ce0 <lcdPrintf>





	passMission1=creepData[0].life;
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <mission1+0x21c>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <mission1+0x22c>)
 8001f2c:	6013      	str	r3, [r2, #0]
	for(int i=0;i<24;i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f32:	e02b      	b.n	8001f8c <mission1+0x268>
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	08010148 	.word	0x08010148
 8001f40:	20000318 	.word	0x20000318
 8001f44:	2000003c 	.word	0x2000003c
 8001f48:	0801014c 	.word	0x0801014c
 8001f4c:	08010138 	.word	0x08010138
 8001f50:	200002c0 	.word	0x200002c0
	{
		creep(&creepData[i],&mainPlane);
 8001f54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4a40      	ldr	r2, [pc, #256]	@ (8002060 <mission1+0x33c>)
 8001f60:	4413      	add	r3, r2
 8001f62:	4940      	ldr	r1, [pc, #256]	@ (8002064 <mission1+0x340>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 fe3a 	bl	8003bde <creep>
		passMission1+=creepData[i].life;
 8001f6a:	493d      	ldr	r1, [pc, #244]	@ (8002060 <mission1+0x33c>)
 8001f6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	3308      	adds	r3, #8
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <mission1+0x344>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a39      	ldr	r2, [pc, #228]	@ (8002068 <mission1+0x344>)
 8001f84:	6013      	str	r3, [r2, #0]
	for(int i=0;i<24;i++)
 8001f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f88:	3301      	adds	r3, #1
 8001f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f8e:	2b17      	cmp	r3, #23
 8001f90:	dde0      	ble.n	8001f54 <mission1+0x230>

	}

	if(countMission1<=0)
 8001f92:	4b36      	ldr	r3, [pc, #216]	@ (800206c <mission1+0x348>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	dc0b      	bgt.n	8001fb2 <mission1+0x28e>
	{
		lose();
 8001f9a:	f005 fd31 	bl	8007a00 <lose>
		HAL_Delay(1000);
 8001f9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa2:	f006 fb4b 	bl	800863c <HAL_Delay>
 		runningScreen=1;
 8001fa6:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <mission1+0x34c>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	801a      	strh	r2, [r3, #0]
 		removeLastFunction(&currentScreen);
 8001fac:	4831      	ldr	r0, [pc, #196]	@ (8002074 <mission1+0x350>)
 8001fae:	f7ff fb24 	bl	80015fa <removeLastFunction>
	}
	if(passMission1==0)
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <mission1+0x344>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <mission1+0x2a4>
	{
		runningScreen=1;
 8001fba:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <mission1+0x34c>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	801a      	strh	r2, [r3, #0]
		addFunction(&currentScreen, mission2);
 8001fc0:	492d      	ldr	r1, [pc, #180]	@ (8002078 <mission1+0x354>)
 8001fc2:	482c      	ldr	r0, [pc, #176]	@ (8002074 <mission1+0x350>)
 8001fc4:	f7ff faec 	bl	80015a0 <addFunction>
	}
	mainPlaneUsed(&mainPlane);
 8001fc8:	4826      	ldr	r0, [pc, #152]	@ (8002064 <mission1+0x340>)
 8001fca:	f7ff fb69 	bl	80016a0 <mainPlaneUsed>
	if (mainPlane.hp<=0)
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <mission1+0x340>)
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	dc3f      	bgt.n	8002056 <mission1+0x332>
	{
		lose();
 8001fd6:	f005 fd13 	bl	8007a00 <lose>
		 lcdDrawImage(mainPlane.x+15, mainPlane.y, &iconSmoke);
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <mission1+0x340>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fec:	ee17 3a90 	vmov	r3, s15
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <mission1+0x340>)
 8001ff4:	edd2 7a01 	vldr	s15, [r2, #4]
 8001ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffc:	ee17 2a90 	vmov	r2, s15
 8002000:	b291      	uxth	r1, r2
 8002002:	4a1e      	ldr	r2, [pc, #120]	@ (800207c <mission1+0x358>)
 8002004:	4618      	mov	r0, r3
 8002006:	f003 fd6d 	bl	8005ae4 <lcdDrawImage>
		 lcdDrawImage(mainPlane.x+12, mainPlane.y+20, &iconSmoke);
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <mission1+0x340>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201c:	ee17 3a90 	vmov	r3, s15
 8002020:	b29b      	uxth	r3, r3
 8002022:	4a10      	ldr	r2, [pc, #64]	@ (8002064 <mission1+0x340>)
 8002024:	edd2 7a01 	vldr	s15, [r2, #4]
 8002028:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800202c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002034:	ee17 2a90 	vmov	r2, s15
 8002038:	b291      	uxth	r1, r2
 800203a:	4a10      	ldr	r2, [pc, #64]	@ (800207c <mission1+0x358>)
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fd51 	bl	8005ae4 <lcdDrawImage>
		HAL_Delay(1000);
 8002042:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002046:	f006 faf9 	bl	800863c <HAL_Delay>
 		runningScreen=1;
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <mission1+0x34c>)
 800204c:	2201      	movs	r2, #1
 800204e:	801a      	strh	r2, [r3, #0]
 		removeLastFunction(&currentScreen);
 8002050:	4808      	ldr	r0, [pc, #32]	@ (8002074 <mission1+0x350>)
 8002052:	f7ff fad2 	bl	80015fa <removeLastFunction>
	}
}
 8002056:	bf00      	nop
 8002058:	3748      	adds	r7, #72	@ 0x48
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000318 	.word	0x20000318
 8002064:	200002d4 	.word	0x200002d4
 8002068:	200002c0 	.word	0x200002c0
 800206c:	20000004 	.word	0x20000004
 8002070:	20000000 	.word	0x20000000
 8002074:	20000250 	.word	0x20000250
 8002078:	08001a39 	.word	0x08001a39
 800207c:	08014684 	.word	0x08014684

08002080 <displayMenuGameScreen>:




void displayMenuGameScreen()
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af02      	add	r7, sp, #8
	if(runningScreen==1)
 8002086:	4b36      	ldr	r3, [pc, #216]	@ (8002160 <displayMenuGameScreen+0xe0>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d104      	bne.n	8002098 <displayMenuGameScreen+0x18>
	{
		displayMenuGame();
 800208e:	f000 f8f3 	bl	8002278 <displayMenuGame>

		runningScreen=0;
 8002092:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <displayMenuGameScreen+0xe0>)
 8002094:	2200      	movs	r2, #0
 8002096:	801a      	strh	r2, [r3, #0]
	}
	if (checkXY(0,70,240,30))
 8002098:	231e      	movs	r3, #30
 800209a:	22f0      	movs	r2, #240	@ 0xf0
 800209c:	2146      	movs	r1, #70	@ 0x46
 800209e:	2000      	movs	r0, #0
 80020a0:	f006 f9ee 	bl	8008480 <checkXY>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d011      	beq.n	80020ce <displayMenuGameScreen+0x4e>
	{
		checkMainSelected=1;
 80020aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <displayMenuGameScreen+0xe4>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
		lcdFillRect(0,0, 35, 34,COLOR_GRAY_50);
 80020b0:	f243 1386 	movw	r3, #12678	@ 0x3186
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2322      	movs	r3, #34	@ 0x22
 80020b8:	2223      	movs	r2, #35	@ 0x23
 80020ba:	2100      	movs	r1, #0
 80020bc:	2000      	movs	r0, #0
 80020be:	f003 fcb5 	bl	8005a2c <lcdFillRect>
		lcdDrawImage( 0, 0, & iconPlaneDPS);
 80020c2:	4a29      	ldr	r2, [pc, #164]	@ (8002168 <displayMenuGameScreen+0xe8>)
 80020c4:	2100      	movs	r1, #0
 80020c6:	2000      	movs	r0, #0
 80020c8:	f003 fd0c 	bl	8005ae4 <lcdDrawImage>
 80020cc:	e034      	b.n	8002138 <displayMenuGameScreen+0xb8>
	}

	else if (checkXY(0,125,240,30))
 80020ce:	231e      	movs	r3, #30
 80020d0:	22f0      	movs	r2, #240	@ 0xf0
 80020d2:	217d      	movs	r1, #125	@ 0x7d
 80020d4:	2000      	movs	r0, #0
 80020d6:	f006 f9d3 	bl	8008480 <checkXY>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d011      	beq.n	8002104 <displayMenuGameScreen+0x84>
	{
		checkMainSelected=2;
 80020e0:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <displayMenuGameScreen+0xe4>)
 80020e2:	2202      	movs	r2, #2
 80020e4:	601a      	str	r2, [r3, #0]
		lcdFillRect(0,0, 35, 34,COLOR_GRAY_50);
 80020e6:	f243 1386 	movw	r3, #12678	@ 0x3186
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2322      	movs	r3, #34	@ 0x22
 80020ee:	2223      	movs	r2, #35	@ 0x23
 80020f0:	2100      	movs	r1, #0
 80020f2:	2000      	movs	r0, #0
 80020f4:	f003 fc9a 	bl	8005a2c <lcdFillRect>
		lcdDrawImage( 0 , 0, & iconPlaneTank);
 80020f8:	4a1c      	ldr	r2, [pc, #112]	@ (800216c <displayMenuGameScreen+0xec>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	2000      	movs	r0, #0
 80020fe:	f003 fcf1 	bl	8005ae4 <lcdDrawImage>
 8002102:	e019      	b.n	8002138 <displayMenuGameScreen+0xb8>
	}
	else if (checkXY(0,180,240,30))
 8002104:	231e      	movs	r3, #30
 8002106:	22f0      	movs	r2, #240	@ 0xf0
 8002108:	21b4      	movs	r1, #180	@ 0xb4
 800210a:	2000      	movs	r0, #0
 800210c:	f006 f9b8 	bl	8008480 <checkXY>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <displayMenuGameScreen+0xb8>
	{
		checkMainSelected=3;
 8002116:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <displayMenuGameScreen+0xe4>)
 8002118:	2203      	movs	r2, #3
 800211a:	601a      	str	r2, [r3, #0]
		lcdFillRect(0,0, 35, 34,COLOR_GRAY_50);
 800211c:	f243 1386 	movw	r3, #12678	@ 0x3186
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2322      	movs	r3, #34	@ 0x22
 8002124:	2223      	movs	r2, #35	@ 0x23
 8002126:	2100      	movs	r1, #0
 8002128:	2000      	movs	r0, #0
 800212a:	f003 fc7f 	bl	8005a2c <lcdFillRect>
		lcdDrawImage( 0 , 0, & iconPlaneSpeed);
 800212e:	4a10      	ldr	r2, [pc, #64]	@ (8002170 <displayMenuGameScreen+0xf0>)
 8002130:	2100      	movs	r1, #0
 8002132:	2000      	movs	r0, #0
 8002134:	f003 fcd6 	bl	8005ae4 <lcdDrawImage>
	}

	if(checkXY(75,235,110,30))
 8002138:	231e      	movs	r3, #30
 800213a:	226e      	movs	r2, #110	@ 0x6e
 800213c:	21eb      	movs	r1, #235	@ 0xeb
 800213e:	204b      	movs	r0, #75	@ 0x4b
 8002140:	f006 f99e 	bl	8008480 <checkXY>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <displayMenuGameScreen+0xd8>
	{
		runningScreen=1;
 800214a:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <displayMenuGameScreen+0xe0>)
 800214c:	2201      	movs	r2, #1
 800214e:	801a      	strh	r2, [r3, #0]
		addFunction(&currentScreen, mission1);
 8002150:	4908      	ldr	r1, [pc, #32]	@ (8002174 <displayMenuGameScreen+0xf4>)
 8002152:	4809      	ldr	r0, [pc, #36]	@ (8002178 <displayMenuGameScreen+0xf8>)
 8002154:	f7ff fa24 	bl	80015a0 <addFunction>

	}

}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000
 8002164:	20000010 	.word	0x20000010
 8002168:	08015b50 	.word	0x08015b50
 800216c:	08016bd0 	.word	0x08016bd0
 8002170:	08016390 	.word	0x08016390
 8002174:	08001d25 	.word	0x08001d25
 8002178:	20000250 	.word	0x20000250

0800217c <displayWaitingGameScreen>:
void displayWaitingGameScreen()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	if(runningScreen==1)
 8002180:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <displayWaitingGameScreen+0x30>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d104      	bne.n	8002192 <displayWaitingGameScreen+0x16>
	{
		displayWaitingGame();
 8002188:	f000 f83e 	bl	8002208 <displayWaitingGame>
		runningScreen=0;
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <displayWaitingGameScreen+0x30>)
 800218e:	2200      	movs	r2, #0
 8002190:	801a      	strh	r2, [r3, #0]
	}
	 HAL_Delay(1000);
 8002192:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002196:	f006 fa51 	bl	800863c <HAL_Delay>
	 runningScreen=1;
 800219a:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <displayWaitingGameScreen+0x30>)
 800219c:	2201      	movs	r2, #1
 800219e:	801a      	strh	r2, [r3, #0]
	 addFunction(&currentScreen, displayMenuGameScreen);
 80021a0:	4903      	ldr	r1, [pc, #12]	@ (80021b0 <displayWaitingGameScreen+0x34>)
 80021a2:	4804      	ldr	r0, [pc, #16]	@ (80021b4 <displayWaitingGameScreen+0x38>)
 80021a4:	f7ff f9fc 	bl	80015a0 <addFunction>
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000000 	.word	0x20000000
 80021b0:	08002081 	.word	0x08002081
 80021b4:	20000250 	.word	0x20000250

080021b8 <collisionCheck>:




int collisionCheck(int x1, int y1, int ngang1, int doc1, int x2, int y2, int ngang2, int doc2)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
    if (x1 <= x2 + ngang2 && x1 + ngang1 > x2 && y1 <= y2 + doc2 && y1 + doc1 >= y2)
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	4413      	add	r3, r2
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dc13      	bgt.n	80021fa <collisionCheck+0x42>
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	429a      	cmp	r2, r3
 80021dc:	da0d      	bge.n	80021fa <collisionCheck+0x42>
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	4413      	add	r3, r2
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dc07      	bgt.n	80021fa <collisionCheck+0x42>
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	dc01      	bgt.n	80021fa <collisionCheck+0x42>
    {
        return 1;  // Trả về true nếu có va chạm
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <collisionCheck+0x44>
    }
    return 0;  // Trả về false nếu không có va chạm
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <displayWaitingGame>:
#include "SkyWarGraphics.h"

void displayWaitingGame()
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0

		lcdFillRGB(COLOR_GRAY_50);
 800220c:	f243 1086 	movw	r0, #12678	@ 0x3186
 8002210:	f003 f97c 	bl	800550c <lcdFillRGB>
		lcdDrawImage( 65 , 80, & iconPlaneBoss);
 8002214:	4a13      	ldr	r2, [pc, #76]	@ (8002264 <displayWaitingGame+0x5c>)
 8002216:	2150      	movs	r1, #80	@ 0x50
 8002218:	2041      	movs	r0, #65	@ 0x41
 800221a:	f003 fc63 	bl	8005ae4 <lcdDrawImage>
		lcdSetCursor( 30 , 30 );
 800221e:	211e      	movs	r1, #30
 8002220:	201e      	movs	r0, #30
 8002222:	f003 fe79 	bl	8005f18 <lcdSetCursor>
		lcdSetTextColor(COLOR_WHITE, COLOR_GRAY_50);
 8002226:	f243 1186 	movw	r1, #12678	@ 0x3186
 800222a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800222e:	f003 fdf3 	bl	8005e18 <lcdSetTextColor>
		lcdSetTextFont( & Font24 );
 8002232:	480d      	ldr	r0, [pc, #52]	@ (8002268 <displayWaitingGame+0x60>)
 8002234:	f003 fde0 	bl	8005df8 <lcdSetTextFont>
		lcdPrintf( "BAN MAY BAY" );
 8002238:	480c      	ldr	r0, [pc, #48]	@ (800226c <displayWaitingGame+0x64>)
 800223a:	f003 fd51 	bl	8005ce0 <lcdPrintf>
		lcdSetTextColor(COLOR_WHITE, COLOR_GRAY_50);
 800223e:	f243 1186 	movw	r1, #12678	@ 0x3186
 8002242:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002246:	f003 fde7 	bl	8005e18 <lcdSetTextColor>
		lcdSetTextFont( & Font16 );
 800224a:	4809      	ldr	r0, [pc, #36]	@ (8002270 <displayWaitingGame+0x68>)
 800224c:	f003 fdd4 	bl	8005df8 <lcdSetTextFont>
		lcdSetCursor( 60 , 145 );
 8002250:	2191      	movs	r1, #145	@ 0x91
 8002252:	203c      	movs	r0, #60	@ 0x3c
 8002254:	f003 fe60 	bl	8005f18 <lcdSetCursor>
		lcdPrintf( "LOADING...." );
 8002258:	4806      	ldr	r0, [pc, #24]	@ (8002274 <displayWaitingGame+0x6c>)
 800225a:	f003 fd41 	bl	8005ce0 <lcdPrintf>

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	0801a5c4 	.word	0x0801a5c4
 8002268:	20000034 	.word	0x20000034
 800226c:	08010154 	.word	0x08010154
 8002270:	20000024 	.word	0x20000024
 8002274:	08010160 	.word	0x08010160

08002278 <displayMenuGame>:

void displayMenuGame()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0

		lcdFillRGB(COLOR_GRAY_50);
 800227c:	f243 1086 	movw	r0, #12678	@ 0x3186
 8002280:	f003 f944 	bl	800550c <lcdFillRGB>
		lcdSetTextColor(COLOR_GRAY_50,COLOR_WHITE);
 8002284:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002288:	f243 1086 	movw	r0, #12678	@ 0x3186
 800228c:	f003 fdc4 	bl	8005e18 <lcdSetTextColor>
		lcdSetTextFont( & Font24 );
 8002290:	483f      	ldr	r0, [pc, #252]	@ (8002390 <displayMenuGame+0x118>)
 8002292:	f003 fdb1 	bl	8005df8 <lcdSetTextFont>
		lcdSetCursor( 75 , 235 );
 8002296:	21eb      	movs	r1, #235	@ 0xeb
 8002298:	204b      	movs	r0, #75	@ 0x4b
 800229a:	f003 fe3d 	bl	8005f18 <lcdSetCursor>
		lcdPrintf( "START" );
 800229e:	483d      	ldr	r0, [pc, #244]	@ (8002394 <displayMenuGame+0x11c>)
 80022a0:	f003 fd1e 	bl	8005ce0 <lcdPrintf>
		lcdSetCursor( 85 , 25 );
 80022a4:	2119      	movs	r1, #25
 80022a6:	2055      	movs	r0, #85	@ 0x55
 80022a8:	f003 fe36 	bl	8005f18 <lcdSetCursor>
		lcdSetTextColor(COLOR_WHITE, COLOR_GRAY_50);
 80022ac:	f243 1186 	movw	r1, #12678	@ 0x3186
 80022b0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022b4:	f003 fdb0 	bl	8005e18 <lcdSetTextColor>
		lcdPrintf( "MENU" );
 80022b8:	4837      	ldr	r0, [pc, #220]	@ (8002398 <displayMenuGame+0x120>)
 80022ba:	f003 fd11 	bl	8005ce0 <lcdPrintf>

	//Plane 1
		lcdDrawImage( 15 , 70, & iconPlaneDPS);
 80022be:	4a37      	ldr	r2, [pc, #220]	@ (800239c <displayMenuGame+0x124>)
 80022c0:	2146      	movs	r1, #70	@ 0x46
 80022c2:	200f      	movs	r0, #15
 80022c4:	f003 fc0e 	bl	8005ae4 <lcdDrawImage>
		lcdSetCursor( 60 , 73 );
 80022c8:	2149      	movs	r1, #73	@ 0x49
 80022ca:	203c      	movs	r0, #60	@ 0x3c
 80022cc:	f003 fe24 	bl	8005f18 <lcdSetCursor>
		lcdSetTextFont( & Font12 );
 80022d0:	4833      	ldr	r0, [pc, #204]	@ (80023a0 <displayMenuGame+0x128>)
 80022d2:	f003 fd91 	bl	8005df8 <lcdSetTextFont>
		lcdPrintf( "PLANE 1" );
 80022d6:	4833      	ldr	r0, [pc, #204]	@ (80023a4 <displayMenuGame+0x12c>)
 80022d8:	f003 fd02 	bl	8005ce0 <lcdPrintf>
		lcdSetCursor( 60 , 85 );
 80022dc:	2155      	movs	r1, #85	@ 0x55
 80022de:	203c      	movs	r0, #60	@ 0x3c
 80022e0:	f003 fe1a 	bl	8005f18 <lcdSetCursor>
		lcdSetTextFont( & Font8 );
 80022e4:	4830      	ldr	r0, [pc, #192]	@ (80023a8 <displayMenuGame+0x130>)
 80022e6:	f003 fd87 	bl	8005df8 <lcdSetTextFont>
		lcdPrintf( "Dame: Cao, HP: Thap, Speed: Vua " );
 80022ea:	4830      	ldr	r0, [pc, #192]	@ (80023ac <displayMenuGame+0x134>)
 80022ec:	f003 fcf8 	bl	8005ce0 <lcdPrintf>
		lcdSetCursor( 60 , 93 );
 80022f0:	215d      	movs	r1, #93	@ 0x5d
 80022f2:	203c      	movs	r0, #60	@ 0x3c
 80022f4:	f003 fe10 	bl	8005f18 <lcdSetCursor>
		lcdPrintf( "Skill: Ban dan sieu to khong lo " );
 80022f8:	482d      	ldr	r0, [pc, #180]	@ (80023b0 <displayMenuGame+0x138>)
 80022fa:	f003 fcf1 	bl	8005ce0 <lcdPrintf>

	//Plane 2
		lcdDrawImage( 15 , 125, & iconPlaneTank);
 80022fe:	4a2d      	ldr	r2, [pc, #180]	@ (80023b4 <displayMenuGame+0x13c>)
 8002300:	217d      	movs	r1, #125	@ 0x7d
 8002302:	200f      	movs	r0, #15
 8002304:	f003 fbee 	bl	8005ae4 <lcdDrawImage>
		lcdSetCursor( 60 , 128 );
 8002308:	2180      	movs	r1, #128	@ 0x80
 800230a:	203c      	movs	r0, #60	@ 0x3c
 800230c:	f003 fe04 	bl	8005f18 <lcdSetCursor>
		lcdSetTextFont( & Font12 );
 8002310:	4823      	ldr	r0, [pc, #140]	@ (80023a0 <displayMenuGame+0x128>)
 8002312:	f003 fd71 	bl	8005df8 <lcdSetTextFont>
		lcdPrintf( "PLANE 2" );
 8002316:	4828      	ldr	r0, [pc, #160]	@ (80023b8 <displayMenuGame+0x140>)
 8002318:	f003 fce2 	bl	8005ce0 <lcdPrintf>
		lcdSetCursor( 60 , 140 );
 800231c:	218c      	movs	r1, #140	@ 0x8c
 800231e:	203c      	movs	r0, #60	@ 0x3c
 8002320:	f003 fdfa 	bl	8005f18 <lcdSetCursor>
		lcdSetTextFont( & Font8 );
 8002324:	4820      	ldr	r0, [pc, #128]	@ (80023a8 <displayMenuGame+0x130>)
 8002326:	f003 fd67 	bl	8005df8 <lcdSetTextFont>
		lcdPrintf( "Dame: Vua, HP: Cao, Speed: Thap " );
 800232a:	4824      	ldr	r0, [pc, #144]	@ (80023bc <displayMenuGame+0x144>)
 800232c:	f003 fcd8 	bl	8005ce0 <lcdPrintf>
		lcdSetCursor( 60 , 148 );
 8002330:	2194      	movs	r1, #148	@ 0x94
 8002332:	203c      	movs	r0, #60	@ 0x3c
 8002334:	f003 fdf0 	bl	8005f18 <lcdSetCursor>
		lcdPrintf( "Skill: Tao khien sieu cung" );
 8002338:	4821      	ldr	r0, [pc, #132]	@ (80023c0 <displayMenuGame+0x148>)
 800233a:	f003 fcd1 	bl	8005ce0 <lcdPrintf>

	//Plane 3
		lcdDrawImage( 15 , 180, & iconPlaneSpeed);
 800233e:	4a21      	ldr	r2, [pc, #132]	@ (80023c4 <displayMenuGame+0x14c>)
 8002340:	21b4      	movs	r1, #180	@ 0xb4
 8002342:	200f      	movs	r0, #15
 8002344:	f003 fbce 	bl	8005ae4 <lcdDrawImage>
		lcdSetCursor( 60 , 183 );
 8002348:	21b7      	movs	r1, #183	@ 0xb7
 800234a:	203c      	movs	r0, #60	@ 0x3c
 800234c:	f003 fde4 	bl	8005f18 <lcdSetCursor>
		lcdSetTextFont( & Font12 );
 8002350:	4813      	ldr	r0, [pc, #76]	@ (80023a0 <displayMenuGame+0x128>)
 8002352:	f003 fd51 	bl	8005df8 <lcdSetTextFont>
		lcdPrintf( "PLANE 3" );
 8002356:	481c      	ldr	r0, [pc, #112]	@ (80023c8 <displayMenuGame+0x150>)
 8002358:	f003 fcc2 	bl	8005ce0 <lcdPrintf>
		lcdSetCursor( 60 , 195 );
 800235c:	21c3      	movs	r1, #195	@ 0xc3
 800235e:	203c      	movs	r0, #60	@ 0x3c
 8002360:	f003 fdda 	bl	8005f18 <lcdSetCursor>
		lcdSetTextFont( & Font8 );
 8002364:	4810      	ldr	r0, [pc, #64]	@ (80023a8 <displayMenuGame+0x130>)
 8002366:	f003 fd47 	bl	8005df8 <lcdSetTextFont>
		lcdPrintf( "Dame: Vua, HP: Thap, Speed: Cao " );
 800236a:	4818      	ldr	r0, [pc, #96]	@ (80023cc <displayMenuGame+0x154>)
 800236c:	f003 fcb8 	bl	8005ce0 <lcdPrintf>
		lcdSetCursor( 60 , 203 );
 8002370:	21cb      	movs	r1, #203	@ 0xcb
 8002372:	203c      	movs	r0, #60	@ 0x3c
 8002374:	f003 fdd0 	bl	8005f18 <lcdSetCursor>
		lcdPrintf( "Skill: Tang toc do bay" );
 8002378:	4815      	ldr	r0, [pc, #84]	@ (80023d0 <displayMenuGame+0x158>)
 800237a:	f003 fcb1 	bl	8005ce0 <lcdPrintf>

		lcdPrintf( "",Button() );
 800237e:	f000 f9e3 	bl	8002748 <Button>
 8002382:	4603      	mov	r3, r0
 8002384:	4619      	mov	r1, r3
 8002386:	4813      	ldr	r0, [pc, #76]	@ (80023d4 <displayMenuGame+0x15c>)
 8002388:	f003 fcaa 	bl	8005ce0 <lcdPrintf>


}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000034 	.word	0x20000034
 8002394:	0801016c 	.word	0x0801016c
 8002398:	08010174 	.word	0x08010174
 800239c:	08015b50 	.word	0x08015b50
 80023a0:	2000001c 	.word	0x2000001c
 80023a4:	0801017c 	.word	0x0801017c
 80023a8:	2000003c 	.word	0x2000003c
 80023ac:	08010184 	.word	0x08010184
 80023b0:	080101a8 	.word	0x080101a8
 80023b4:	08016bd0 	.word	0x08016bd0
 80023b8:	080101cc 	.word	0x080101cc
 80023bc:	080101d4 	.word	0x080101d4
 80023c0:	080101f8 	.word	0x080101f8
 80023c4:	08016390 	.word	0x08016390
 80023c8:	08010214 	.word	0x08010214
 80023cc:	0801021c 	.word	0x0801021c
 80023d0:	08010240 	.word	0x08010240
 80023d4:	08010258 	.word	0x08010258

080023d8 <optionScreenScreen>:


int controlOptionScreen=1;

void optionScreenScreen()
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af02      	add	r7, sp, #8
	if(runningScreen == 1)
 80023de:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <optionScreenScreen+0x1bc>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d109      	bne.n	80023fa <optionScreenScreen+0x22>
		{
			 lcdPrintf( "" , optionScreen());
 80023e6:	f000 f9d9 	bl	800279c <optionScreen>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4619      	mov	r1, r3
 80023ee:	486a      	ldr	r0, [pc, #424]	@ (8002598 <optionScreenScreen+0x1c0>)
 80023f0:	f003 fc76 	bl	8005ce0 <lcdPrintf>
			 runningScreen = 0;
 80023f4:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <optionScreenScreen+0x1bc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
		}


	if (checkXY(30, 50, 180 ,35))
 80023fa:	2323      	movs	r3, #35	@ 0x23
 80023fc:	22b4      	movs	r2, #180	@ 0xb4
 80023fe:	2132      	movs	r1, #50	@ 0x32
 8002400:	201e      	movs	r0, #30
 8002402:	f006 f83d 	bl	8008480 <checkXY>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d039      	beq.n	8002480 <optionScreenScreen+0xa8>
		{

			while (TouchIsTouched())
 800240c:	bf00      	nop
 800240e:	f005 ffad 	bl	800836c <TouchIsTouched>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1fa      	bne.n	800240e <optionScreenScreen+0x36>
				{
			 	}
			runningScreen=1;
 8002418:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <optionScreenScreen+0x1bc>)
 800241a:	2201      	movs	r2, #1
 800241c:	801a      	strh	r2, [r3, #0]
			controlOptionScreen=1;
 800241e:	4b5f      	ldr	r3, [pc, #380]	@ (800259c <optionScreenScreen+0x1c4>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]
			removeLastFunction(&currentScreen);
 8002424:	485e      	ldr	r0, [pc, #376]	@ (80025a0 <optionScreenScreen+0x1c8>)
 8002426:	f7ff f8e8 	bl	80015fa <removeLastFunction>
			removeLastFunction(&currentScreen);
 800242a:	485d      	ldr	r0, [pc, #372]	@ (80025a0 <optionScreenScreen+0x1c8>)
 800242c:	f7ff f8e5 	bl	80015fa <removeLastFunction>
			lcdFillRGB(COLOR_WHITE);
 8002430:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002434:	f003 f86a 	bl	800550c <lcdFillRGB>
			lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_2);
 8002438:	f248 51fc 	movw	r1, #34300	@ 0x85fc
 800243c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002440:	f003 fcea 	bl	8005e18 <lcdSetTextColor>
			lcdFillRect(30, 50, 180 ,35 , COLOR_BackGround_2);
 8002444:	f248 53fc 	movw	r3, #34300	@ 0x85fc
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2323      	movs	r3, #35	@ 0x23
 800244c:	22b4      	movs	r2, #180	@ 0xb4
 800244e:	2132      	movs	r1, #50	@ 0x32
 8002450:	201e      	movs	r0, #30
 8002452:	f003 faeb 	bl	8005a2c <lcdFillRect>
			lcdSetCursor( 35 , 62 );
 8002456:	213e      	movs	r1, #62	@ 0x3e
 8002458:	2023      	movs	r0, #35	@ 0x23
 800245a:	f003 fd5d 	bl	8005f18 <lcdSetCursor>
			lcdSetTextFont( & Font16 );
 800245e:	4851      	ldr	r0, [pc, #324]	@ (80025a4 <optionScreenScreen+0x1cc>)
 8002460:	f003 fcca 	bl	8005df8 <lcdSetTextFont>
			lcdPrintf( "Loading...." );
 8002464:	4850      	ldr	r0, [pc, #320]	@ (80025a8 <optionScreenScreen+0x1d0>)
 8002466:	f003 fc3b 	bl	8005ce0 <lcdPrintf>
			lcdPrintf( "",Button() );
 800246a:	f000 f96d 	bl	8002748 <Button>
 800246e:	4603      	mov	r3, r0
 8002470:	4619      	mov	r1, r3
 8002472:	4849      	ldr	r0, [pc, #292]	@ (8002598 <optionScreenScreen+0x1c0>)
 8002474:	f003 fc34 	bl	8005ce0 <lcdPrintf>
			addFunction(&currentScreen, weatherStationScreen);
 8002478:	494c      	ldr	r1, [pc, #304]	@ (80025ac <optionScreenScreen+0x1d4>)
 800247a:	4849      	ldr	r0, [pc, #292]	@ (80025a0 <optionScreenScreen+0x1c8>)
 800247c:	f7ff f890 	bl	80015a0 <addFunction>
		}

	if (checkXY(30, 105, 180 ,35))
 8002480:	2323      	movs	r3, #35	@ 0x23
 8002482:	22b4      	movs	r2, #180	@ 0xb4
 8002484:	2169      	movs	r1, #105	@ 0x69
 8002486:	201e      	movs	r0, #30
 8002488:	f005 fffa 	bl	8008480 <checkXY>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d039      	beq.n	8002506 <optionScreenScreen+0x12e>
		{

			while (TouchIsTouched())
 8002492:	bf00      	nop
 8002494:	f005 ff6a 	bl	800836c <TouchIsTouched>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1fa      	bne.n	8002494 <optionScreenScreen+0xbc>
				{
				}
			runningScreen=1;
 800249e:	4b3d      	ldr	r3, [pc, #244]	@ (8002594 <optionScreenScreen+0x1bc>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	801a      	strh	r2, [r3, #0]
			controlOptionScreen=2;
 80024a4:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <optionScreenScreen+0x1c4>)
 80024a6:	2202      	movs	r2, #2
 80024a8:	601a      	str	r2, [r3, #0]
			removeLastFunction(&currentScreen);
 80024aa:	483d      	ldr	r0, [pc, #244]	@ (80025a0 <optionScreenScreen+0x1c8>)
 80024ac:	f7ff f8a5 	bl	80015fa <removeLastFunction>
			removeLastFunction(&currentScreen);
 80024b0:	483b      	ldr	r0, [pc, #236]	@ (80025a0 <optionScreenScreen+0x1c8>)
 80024b2:	f7ff f8a2 	bl	80015fa <removeLastFunction>
			lcdFillRGB(COLOR_WHITE);
 80024b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80024ba:	f003 f827 	bl	800550c <lcdFillRGB>
			lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_2);
 80024be:	f248 51fc 	movw	r1, #34300	@ 0x85fc
 80024c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80024c6:	f003 fca7 	bl	8005e18 <lcdSetTextColor>
			lcdFillRect(30, 50, 180 ,35 , COLOR_BackGround_2);
 80024ca:	f248 53fc 	movw	r3, #34300	@ 0x85fc
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2323      	movs	r3, #35	@ 0x23
 80024d2:	22b4      	movs	r2, #180	@ 0xb4
 80024d4:	2132      	movs	r1, #50	@ 0x32
 80024d6:	201e      	movs	r0, #30
 80024d8:	f003 faa8 	bl	8005a2c <lcdFillRect>
			lcdSetCursor( 35 , 62 );
 80024dc:	213e      	movs	r1, #62	@ 0x3e
 80024de:	2023      	movs	r0, #35	@ 0x23
 80024e0:	f003 fd1a 	bl	8005f18 <lcdSetCursor>
			lcdSetTextFont( & Font16 );
 80024e4:	482f      	ldr	r0, [pc, #188]	@ (80025a4 <optionScreenScreen+0x1cc>)
 80024e6:	f003 fc87 	bl	8005df8 <lcdSetTextFont>
			lcdPrintf( "Loading...." );
 80024ea:	482f      	ldr	r0, [pc, #188]	@ (80025a8 <optionScreenScreen+0x1d0>)
 80024ec:	f003 fbf8 	bl	8005ce0 <lcdPrintf>
			lcdPrintf( "",Button() );
 80024f0:	f000 f92a 	bl	8002748 <Button>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4619      	mov	r1, r3
 80024f8:	4827      	ldr	r0, [pc, #156]	@ (8002598 <optionScreenScreen+0x1c0>)
 80024fa:	f003 fbf1 	bl	8005ce0 <lcdPrintf>
			addFunction(&currentScreen, weatherStationScreen);
 80024fe:	492b      	ldr	r1, [pc, #172]	@ (80025ac <optionScreenScreen+0x1d4>)
 8002500:	4827      	ldr	r0, [pc, #156]	@ (80025a0 <optionScreenScreen+0x1c8>)
 8002502:	f7ff f84d 	bl	80015a0 <addFunction>
		 }


	if (checkXY(30, 160, 180 ,35))
 8002506:	2323      	movs	r3, #35	@ 0x23
 8002508:	22b4      	movs	r2, #180	@ 0xb4
 800250a:	21a0      	movs	r1, #160	@ 0xa0
 800250c:	201e      	movs	r0, #30
 800250e:	f005 ffb7 	bl	8008480 <checkXY>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d039      	beq.n	800258c <optionScreenScreen+0x1b4>
		{

			while (TouchIsTouched())
 8002518:	bf00      	nop
 800251a:	f005 ff27 	bl	800836c <TouchIsTouched>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1fa      	bne.n	800251a <optionScreenScreen+0x142>
				{
				}
			runningScreen=1;
 8002524:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <optionScreenScreen+0x1bc>)
 8002526:	2201      	movs	r2, #1
 8002528:	801a      	strh	r2, [r3, #0]
			controlOptionScreen=3;
 800252a:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <optionScreenScreen+0x1c4>)
 800252c:	2203      	movs	r2, #3
 800252e:	601a      	str	r2, [r3, #0]
			removeLastFunction(&currentScreen);
 8002530:	481b      	ldr	r0, [pc, #108]	@ (80025a0 <optionScreenScreen+0x1c8>)
 8002532:	f7ff f862 	bl	80015fa <removeLastFunction>
			removeLastFunction(&currentScreen);
 8002536:	481a      	ldr	r0, [pc, #104]	@ (80025a0 <optionScreenScreen+0x1c8>)
 8002538:	f7ff f85f 	bl	80015fa <removeLastFunction>
			lcdFillRGB(COLOR_WHITE);
 800253c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002540:	f002 ffe4 	bl	800550c <lcdFillRGB>
			lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_2);
 8002544:	f248 51fc 	movw	r1, #34300	@ 0x85fc
 8002548:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800254c:	f003 fc64 	bl	8005e18 <lcdSetTextColor>
			lcdFillRect(30, 50, 180 ,35 , COLOR_BackGround_2);
 8002550:	f248 53fc 	movw	r3, #34300	@ 0x85fc
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2323      	movs	r3, #35	@ 0x23
 8002558:	22b4      	movs	r2, #180	@ 0xb4
 800255a:	2132      	movs	r1, #50	@ 0x32
 800255c:	201e      	movs	r0, #30
 800255e:	f003 fa65 	bl	8005a2c <lcdFillRect>
			lcdSetCursor( 35 , 62 );
 8002562:	213e      	movs	r1, #62	@ 0x3e
 8002564:	2023      	movs	r0, #35	@ 0x23
 8002566:	f003 fcd7 	bl	8005f18 <lcdSetCursor>
			lcdSetTextFont( & Font16 );
 800256a:	480e      	ldr	r0, [pc, #56]	@ (80025a4 <optionScreenScreen+0x1cc>)
 800256c:	f003 fc44 	bl	8005df8 <lcdSetTextFont>
			lcdPrintf( "Loading...." );
 8002570:	480d      	ldr	r0, [pc, #52]	@ (80025a8 <optionScreenScreen+0x1d0>)
 8002572:	f003 fbb5 	bl	8005ce0 <lcdPrintf>
			lcdPrintf( "",Button() );
 8002576:	f000 f8e7 	bl	8002748 <Button>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	4806      	ldr	r0, [pc, #24]	@ (8002598 <optionScreenScreen+0x1c0>)
 8002580:	f003 fbae 	bl	8005ce0 <lcdPrintf>
			addFunction(&currentScreen, weatherStationScreen);
 8002584:	4909      	ldr	r1, [pc, #36]	@ (80025ac <optionScreenScreen+0x1d4>)
 8002586:	4806      	ldr	r0, [pc, #24]	@ (80025a0 <optionScreenScreen+0x1c8>)
 8002588:	f7ff f80a 	bl	80015a0 <addFunction>
		}
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000000 	.word	0x20000000
 8002598:	0801025c 	.word	0x0801025c
 800259c:	20000014 	.word	0x20000014
 80025a0:	20000250 	.word	0x20000250
 80025a4:	20000024 	.word	0x20000024
 80025a8:	08010260 	.word	0x08010260
 80025ac:	080025b1 	.word	0x080025b1

080025b0 <weatherStationScreen>:

void weatherStationScreen ()
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	// MX_USART1_UART_Init();
	if(runningScreen == 1)
 80025b4:	4b4b      	ldr	r3, [pc, #300]	@ (80026e4 <weatherStationScreen+0x134>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d130      	bne.n	800261e <weatherStationScreen+0x6e>
	{
		upDateData();
 80025bc:	f004 f826 	bl	800660c <upDateData>

		switch(controlOptionScreen)
 80025c0:	4b49      	ldr	r3, [pc, #292]	@ (80026e8 <weatherStationScreen+0x138>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d016      	beq.n	80025f6 <weatherStationScreen+0x46>
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	dc1c      	bgt.n	8002606 <weatherStationScreen+0x56>
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <weatherStationScreen+0x26>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d008      	beq.n	80025e6 <weatherStationScreen+0x36>
 80025d4:	e017      	b.n	8002606 <weatherStationScreen+0x56>
		{
			case 1:
				lcdPrintf( "" , weatherStation());
 80025d6:	f000 f9ef 	bl	80029b8 <weatherStation>
 80025da:	4603      	mov	r3, r0
 80025dc:	4619      	mov	r1, r3
 80025de:	4843      	ldr	r0, [pc, #268]	@ (80026ec <weatherStationScreen+0x13c>)
 80025e0:	f003 fb7e 	bl	8005ce0 <lcdPrintf>
				break;
 80025e4:	e016      	b.n	8002614 <weatherStationScreen+0x64>
			case 2:
				lcdPrintf( "" , weatherStation1());
 80025e6:	f000 fb63 	bl	8002cb0 <weatherStation1>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4619      	mov	r1, r3
 80025ee:	483f      	ldr	r0, [pc, #252]	@ (80026ec <weatherStationScreen+0x13c>)
 80025f0:	f003 fb76 	bl	8005ce0 <lcdPrintf>
				break;
 80025f4:	e00e      	b.n	8002614 <weatherStationScreen+0x64>
			case 3:
				lcdPrintf( "" , weatherStation2());
 80025f6:	f000 fd43 	bl	8003080 <weatherStation2>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4619      	mov	r1, r3
 80025fe:	483b      	ldr	r0, [pc, #236]	@ (80026ec <weatherStationScreen+0x13c>)
 8002600:	f003 fb6e 	bl	8005ce0 <lcdPrintf>
				break;
 8002604:	e006      	b.n	8002614 <weatherStationScreen+0x64>
			default:
				lcdPrintf( "" , weatherStation());
 8002606:	f000 f9d7 	bl	80029b8 <weatherStation>
 800260a:	4603      	mov	r3, r0
 800260c:	4619      	mov	r1, r3
 800260e:	4837      	ldr	r0, [pc, #220]	@ (80026ec <weatherStationScreen+0x13c>)
 8002610:	f003 fb66 	bl	8005ce0 <lcdPrintf>
		}

		 resetTim1();
 8002614:	f004 fcba 	bl	8006f8c <resetTim1>
		 runningScreen = 0;
 8002618:	4b32      	ldr	r3, [pc, #200]	@ (80026e4 <weatherStationScreen+0x134>)
 800261a:	2200      	movs	r2, #0
 800261c:	801a      	strh	r2, [r3, #0]
	}


	if (checkXY(220, 0, 20, 20))
 800261e:	2314      	movs	r3, #20
 8002620:	2214      	movs	r2, #20
 8002622:	2100      	movs	r1, #0
 8002624:	20dc      	movs	r0, #220	@ 0xdc
 8002626:	f005 ff2b 	bl	8008480 <checkXY>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00c      	beq.n	800264a <weatherStationScreen+0x9a>
	{

		while (TouchIsTouched())
 8002630:	bf00      	nop
 8002632:	f005 fe9b 	bl	800836c <TouchIsTouched>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1fa      	bne.n	8002632 <weatherStationScreen+0x82>
			{
		 	}
		runningScreen=1;
 800263c:	4b29      	ldr	r3, [pc, #164]	@ (80026e4 <weatherStationScreen+0x134>)
 800263e:	2201      	movs	r2, #1
 8002640:	801a      	strh	r2, [r3, #0]
		addFunction(&currentScreen, optionScreenScreen);
 8002642:	492b      	ldr	r1, [pc, #172]	@ (80026f0 <weatherStationScreen+0x140>)
 8002644:	482b      	ldr	r0, [pc, #172]	@ (80026f4 <weatherStationScreen+0x144>)
 8002646:	f7fe ffab 	bl	80015a0 <addFunction>
	}


	switch(controlOptionScreen)
 800264a:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <weatherStationScreen+0x138>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d02e      	beq.n	80026b0 <weatherStationScreen+0x100>
 8002652:	2b03      	cmp	r3, #3
 8002654:	dc3f      	bgt.n	80026d6 <weatherStationScreen+0x126>
 8002656:	2b01      	cmp	r3, #1
 8002658:	d002      	beq.n	8002660 <weatherStationScreen+0xb0>
 800265a:	2b02      	cmp	r3, #2
 800265c:	d014      	beq.n	8002688 <weatherStationScreen+0xd8>
			lcdSetCursor( 20 , 86 );
			lcdPrintf( GetTimeString() );
			break;
		}
		default:
			break;
 800265e:	e03a      	b.n	80026d6 <weatherStationScreen+0x126>
			lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_1);
 8002660:	f247 515b 	movw	r1, #30043	@ 0x755b
 8002664:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002668:	f003 fbd6 	bl	8005e18 <lcdSetTextColor>
			lcdSetTextFont( & Font12 );
 800266c:	4822      	ldr	r0, [pc, #136]	@ (80026f8 <weatherStationScreen+0x148>)
 800266e:	f003 fbc3 	bl	8005df8 <lcdSetTextFont>
			lcdSetCursor( 30 , 65 );
 8002672:	2141      	movs	r1, #65	@ 0x41
 8002674:	201e      	movs	r0, #30
 8002676:	f003 fc4f 	bl	8005f18 <lcdSetCursor>
			lcdPrintf( GetTimeString() );
 800267a:	f7fe fdcf 	bl	800121c <GetTimeString>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fb2d 	bl	8005ce0 <lcdPrintf>
			break;
 8002686:	e027      	b.n	80026d8 <weatherStationScreen+0x128>
			lcdSetTextColor(COLOR_WHITE,COLOR_BackGround_3);
 8002688:	f649 61d8 	movw	r1, #40664	@ 0x9ed8
 800268c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002690:	f003 fbc2 	bl	8005e18 <lcdSetTextColor>
			lcdSetTextFont( & Font16 );
 8002694:	4819      	ldr	r0, [pc, #100]	@ (80026fc <weatherStationScreen+0x14c>)
 8002696:	f003 fbaf 	bl	8005df8 <lcdSetTextFont>
			lcdSetCursor( 160 , 14 );
 800269a:	210e      	movs	r1, #14
 800269c:	20a0      	movs	r0, #160	@ 0xa0
 800269e:	f003 fc3b 	bl	8005f18 <lcdSetCursor>
			lcdPrintf( GetTimeString() );
 80026a2:	f7fe fdbb 	bl	800121c <GetTimeString>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fb19 	bl	8005ce0 <lcdPrintf>
			break;
 80026ae:	e013      	b.n	80026d8 <weatherStationScreen+0x128>
			lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 80026b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026b4:	2000      	movs	r0, #0
 80026b6:	f003 fbaf 	bl	8005e18 <lcdSetTextColor>
			lcdSetTextFont( & Font24 );
 80026ba:	4811      	ldr	r0, [pc, #68]	@ (8002700 <weatherStationScreen+0x150>)
 80026bc:	f003 fb9c 	bl	8005df8 <lcdSetTextFont>
			lcdSetCursor( 20 , 86 );
 80026c0:	2156      	movs	r1, #86	@ 0x56
 80026c2:	2014      	movs	r0, #20
 80026c4:	f003 fc28 	bl	8005f18 <lcdSetCursor>
			lcdPrintf( GetTimeString() );
 80026c8:	f7fe fda8 	bl	800121c <GetTimeString>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fb06 	bl	8005ce0 <lcdPrintf>
			break;
 80026d4:	e000      	b.n	80026d8 <weatherStationScreen+0x128>
			break;
 80026d6:	bf00      	nop


	}
	HAL_Delay(100);
 80026d8:	2064      	movs	r0, #100	@ 0x64
 80026da:	f005 ffaf 	bl	800863c <HAL_Delay>



}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000014 	.word	0x20000014
 80026ec:	0801025c 	.word	0x0801025c
 80026f0:	080023d9 	.word	0x080023d9
 80026f4:	20000250 	.word	0x20000250
 80026f8:	2000001c 	.word	0x2000001c
 80026fc:	20000024 	.word	0x20000024
 8002700:	20000034 	.word	0x20000034

08002704 <waitingScreenScreen>:
void waitingScreenScreen()
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	if (runningScreen == 1)
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <waitingScreenScreen+0x34>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d109      	bne.n	8002724 <waitingScreenScreen+0x20>
	{
		lcdPrintf("", waitingScreen());
 8002710:	f000 f8a0 	bl	8002854 <waitingScreen>
 8002714:	4603      	mov	r3, r0
 8002716:	4619      	mov	r1, r3
 8002718:	4808      	ldr	r0, [pc, #32]	@ (800273c <waitingScreenScreen+0x38>)
 800271a:	f003 fae1 	bl	8005ce0 <lcdPrintf>
		runningScreen = 0;
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <waitingScreenScreen+0x34>)
 8002720:	2200      	movs	r2, #0
 8002722:	801a      	strh	r2, [r3, #0]

	}


	runningScreen = 1;
 8002724:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <waitingScreenScreen+0x34>)
 8002726:	2201      	movs	r2, #1
 8002728:	801a      	strh	r2, [r3, #0]
	addFunction(&currentScreen, weatherStationScreen);
 800272a:	4905      	ldr	r1, [pc, #20]	@ (8002740 <waitingScreenScreen+0x3c>)
 800272c:	4805      	ldr	r0, [pc, #20]	@ (8002744 <waitingScreenScreen+0x40>)
 800272e:	f7fe ff37 	bl	80015a0 <addFunction>
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000
 800273c:	0801025c 	.word	0x0801025c
 8002740:	080025b1 	.word	0x080025b1
 8002744:	20000250 	.word	0x20000250

08002748 <Button>:
#include "touch.h"
#include "json_parser.h"
#include "getDataJson.h"
void getDailyTime();
unsigned long Button()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af02      	add	r7, sp, #8
	lcdFillRect(0, 290, 240 ,35 , COLOR_WHITE);
 800274e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2323      	movs	r3, #35	@ 0x23
 8002756:	22f0      	movs	r2, #240	@ 0xf0
 8002758:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800275c:	2000      	movs	r0, #0
 800275e:	f003 f965 	bl	8005a2c <lcdFillRect>
	lcdDrawImage( 5 , 292, & iconBack);
 8002762:	4a0b      	ldr	r2, [pc, #44]	@ (8002790 <Button+0x48>)
 8002764:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8002768:	2005      	movs	r0, #5
 800276a:	f003 f9bb 	bl	8005ae4 <lcdDrawImage>
	lcdDrawImage( 110 , 292, & iconHome);
 800276e:	4a09      	ldr	r2, [pc, #36]	@ (8002794 <Button+0x4c>)
 8002770:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8002774:	206e      	movs	r0, #110	@ 0x6e
 8002776:	f003 f9b5 	bl	8005ae4 <lcdDrawImage>
	lcdDrawImage(	205  , 292, & iconRefresh);
 800277a:	4a07      	ldr	r2, [pc, #28]	@ (8002798 <Button+0x50>)
 800277c:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8002780:	20cd      	movs	r0, #205	@ 0xcd
 8002782:	f003 f9af 	bl	8005ae4 <lcdDrawImage>

	return 0;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	08021bec 	.word	0x08021bec
 8002794:	0802c9c4 	.word	0x0802c9c4
 8002798:	0803243c 	.word	0x0803243c

0800279c <optionScreen>:

unsigned long optionScreen()
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 80027a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80027a6:	f002 feb1 	bl	800550c <lcdFillRGB>
	lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_2);
 80027aa:	f248 51fc 	movw	r1, #34300	@ 0x85fc
 80027ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80027b2:	f003 fb31 	bl	8005e18 <lcdSetTextColor>
	lcdFillRect(30, 50, 180 ,35 , COLOR_BackGround_2);
 80027b6:	f248 53fc 	movw	r3, #34300	@ 0x85fc
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2323      	movs	r3, #35	@ 0x23
 80027be:	22b4      	movs	r2, #180	@ 0xb4
 80027c0:	2132      	movs	r1, #50	@ 0x32
 80027c2:	201e      	movs	r0, #30
 80027c4:	f003 f932 	bl	8005a2c <lcdFillRect>
	lcdSetCursor( 35 , 62 );
 80027c8:	213e      	movs	r1, #62	@ 0x3e
 80027ca:	2023      	movs	r0, #35	@ 0x23
 80027cc:	f003 fba4 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font16 );
 80027d0:	481b      	ldr	r0, [pc, #108]	@ (8002840 <optionScreen+0xa4>)
 80027d2:	f003 fb11 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "WEATHERSTATION" );
 80027d6:	481b      	ldr	r0, [pc, #108]	@ (8002844 <optionScreen+0xa8>)
 80027d8:	f003 fa82 	bl	8005ce0 <lcdPrintf>
	lcdFillRect(30, 105, 180 ,35 , COLOR_BackGround_2);
 80027dc:	f248 53fc 	movw	r3, #34300	@ 0x85fc
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2323      	movs	r3, #35	@ 0x23
 80027e4:	22b4      	movs	r2, #180	@ 0xb4
 80027e6:	2169      	movs	r1, #105	@ 0x69
 80027e8:	201e      	movs	r0, #30
 80027ea:	f003 f91f 	bl	8005a2c <lcdFillRect>
	lcdSetCursor( 35 , 117 );
 80027ee:	2175      	movs	r1, #117	@ 0x75
 80027f0:	2023      	movs	r0, #35	@ 0x23
 80027f2:	f003 fb91 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font16 );
 80027f6:	4812      	ldr	r0, [pc, #72]	@ (8002840 <optionScreen+0xa4>)
 80027f8:	f003 fafe 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "WEATHERSTATION1" );
 80027fc:	4812      	ldr	r0, [pc, #72]	@ (8002848 <optionScreen+0xac>)
 80027fe:	f003 fa6f 	bl	8005ce0 <lcdPrintf>
	lcdFillRect(30, 160, 180 ,35 , COLOR_BackGround_2);
 8002802:	f248 53fc 	movw	r3, #34300	@ 0x85fc
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2323      	movs	r3, #35	@ 0x23
 800280a:	22b4      	movs	r2, #180	@ 0xb4
 800280c:	21a0      	movs	r1, #160	@ 0xa0
 800280e:	201e      	movs	r0, #30
 8002810:	f003 f90c 	bl	8005a2c <lcdFillRect>
	lcdSetCursor( 35 , 172 );
 8002814:	21ac      	movs	r1, #172	@ 0xac
 8002816:	2023      	movs	r0, #35	@ 0x23
 8002818:	f003 fb7e 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font16 );
 800281c:	4808      	ldr	r0, [pc, #32]	@ (8002840 <optionScreen+0xa4>)
 800281e:	f003 faeb 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "WEATHERSTATION2" );
 8002822:	480a      	ldr	r0, [pc, #40]	@ (800284c <optionScreen+0xb0>)
 8002824:	f003 fa5c 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "",Button() );
 8002828:	f7ff ff8e 	bl	8002748 <Button>
 800282c:	4603      	mov	r3, r0
 800282e:	4619      	mov	r1, r3
 8002830:	4807      	ldr	r0, [pc, #28]	@ (8002850 <optionScreen+0xb4>)
 8002832:	f003 fa55 	bl	8005ce0 <lcdPrintf>
	return 0;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000024 	.word	0x20000024
 8002844:	0801026c 	.word	0x0801026c
 8002848:	0801027c 	.word	0x0801027c
 800284c:	0801028c 	.word	0x0801028c
 8002850:	0801029c 	.word	0x0801029c

08002854 <waitingScreen>:
unsigned long waitingScreen()
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	lcdFillRGB(COLOR_BackGround_1);
 8002858:	f247 505b 	movw	r0, #30043	@ 0x755b
 800285c:	f002 fe56 	bl	800550c <lcdFillRGB>
	lcdDrawImage( 65 , 35, & iconCloud);
 8002860:	4a48      	ldr	r2, [pc, #288]	@ (8002984 <waitingScreen+0x130>)
 8002862:	2123      	movs	r1, #35	@ 0x23
 8002864:	2041      	movs	r0, #65	@ 0x41
 8002866:	f003 f93d 	bl	8005ae4 <lcdDrawImage>
	lcdSetCursor( 15 , 30 );
 800286a:	211e      	movs	r1, #30
 800286c:	200f      	movs	r0, #15
 800286e:	f003 fb53 	bl	8005f18 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_1);
 8002872:	f247 515b 	movw	r1, #30043	@ 0x755b
 8002876:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800287a:	f003 facd 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font20 );
 800287e:	4842      	ldr	r0, [pc, #264]	@ (8002988 <waitingScreen+0x134>)
 8002880:	f003 faba 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "WEATHER STATION" );
 8002884:	4841      	ldr	r0, [pc, #260]	@ (800298c <waitingScreen+0x138>)
 8002886:	f003 fa2b 	bl	8005ce0 <lcdPrintf>
	lcdDrawVLine(5, 180, 260, COLOR_WHITE);
 800288a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800288e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002892:	21b4      	movs	r1, #180	@ 0xb4
 8002894:	2005      	movs	r0, #5
 8002896:	f002 fecd 	bl	8005634 <lcdDrawVLine>
	lcdDrawVLine(235, 180, 260, COLOR_WHITE);
 800289a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800289e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028a2:	21b4      	movs	r1, #180	@ 0xb4
 80028a4:	20eb      	movs	r0, #235	@ 0xeb
 80028a6:	f002 fec5 	bl	8005634 <lcdDrawVLine>
	lcdDrawVLine(160, 180, 260, COLOR_WHITE);
 80028aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028ae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028b2:	21b4      	movs	r1, #180	@ 0xb4
 80028b4:	20a0      	movs	r0, #160	@ 0xa0
 80028b6:	f002 febd 	bl	8005634 <lcdDrawVLine>
	lcdDrawHLine(5, 235, 180, COLOR_WHITE);
 80028ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028be:	22b4      	movs	r2, #180	@ 0xb4
 80028c0:	21eb      	movs	r1, #235	@ 0xeb
 80028c2:	2005      	movs	r0, #5
 80028c4:	f002 fe70 	bl	80055a8 <lcdDrawHLine>
	lcdSetTextFont( & Font16 );
 80028c8:	4831      	ldr	r0, [pc, #196]	@ (8002990 <waitingScreen+0x13c>)
 80028ca:	f003 fa95 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 30 , 185 );
 80028ce:	21b9      	movs	r1, #185	@ 0xb9
 80028d0:	201e      	movs	r0, #30
 80028d2:	f003 fb21 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "HO VA TEN" );
 80028d6:	482f      	ldr	r0, [pc, #188]	@ (8002994 <waitingScreen+0x140>)
 80028d8:	f003 fa02 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 175 , 185 );
 80028dc:	21b9      	movs	r1, #185	@ 0xb9
 80028de:	20af      	movs	r0, #175	@ 0xaf
 80028e0:	f003 fb1a 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "MSSV" );
 80028e4:	482c      	ldr	r0, [pc, #176]	@ (8002998 <waitingScreen+0x144>)
 80028e6:	f003 f9fb 	bl	8005ce0 <lcdPrintf>
	lcdSetTextFont( & Font12 );
 80028ea:	482c      	ldr	r0, [pc, #176]	@ (800299c <waitingScreen+0x148>)
 80028ec:	f003 fa84 	bl	8005df8 <lcdSetTextFont>
	lcdDrawHLine(5, 235, 200, COLOR_WHITE);
 80028f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028f4:	22c8      	movs	r2, #200	@ 0xc8
 80028f6:	21eb      	movs	r1, #235	@ 0xeb
 80028f8:	2005      	movs	r0, #5
 80028fa:	f002 fe55 	bl	80055a8 <lcdDrawHLine>
	lcdSetCursor( 15 , 205 );
 80028fe:	21cd      	movs	r1, #205	@ 0xcd
 8002900:	200f      	movs	r0, #15
 8002902:	f003 fb09 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "NGUYEN DINH LE MANH" );
 8002906:	4826      	ldr	r0, [pc, #152]	@ (80029a0 <waitingScreen+0x14c>)
 8002908:	f003 f9ea 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 170 , 205 );
 800290c:	21cd      	movs	r1, #205	@ 0xcd
 800290e:	20aa      	movs	r0, #170	@ 0xaa
 8002910:	f003 fb02 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "22520848" );
 8002914:	4823      	ldr	r0, [pc, #140]	@ (80029a4 <waitingScreen+0x150>)
 8002916:	f003 f9e3 	bl	8005ce0 <lcdPrintf>
	lcdDrawHLine(5, 235, 220, COLOR_WHITE);
 800291a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800291e:	22dc      	movs	r2, #220	@ 0xdc
 8002920:	21eb      	movs	r1, #235	@ 0xeb
 8002922:	2005      	movs	r0, #5
 8002924:	f002 fe40 	bl	80055a8 <lcdDrawHLine>
	lcdSetCursor( 15 , 225 );
 8002928:	21e1      	movs	r1, #225	@ 0xe1
 800292a:	200f      	movs	r0, #15
 800292c:	f003 faf4 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "LE TRONG DIEN" );
 8002930:	481d      	ldr	r0, [pc, #116]	@ (80029a8 <waitingScreen+0x154>)
 8002932:	f003 f9d5 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 170 , 225 );
 8002936:	21e1      	movs	r1, #225	@ 0xe1
 8002938:	20aa      	movs	r0, #170	@ 0xaa
 800293a:	f003 faed 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "22520246" );
 800293e:	481b      	ldr	r0, [pc, #108]	@ (80029ac <waitingScreen+0x158>)
 8002940:	f003 f9ce 	bl	8005ce0 <lcdPrintf>
	lcdDrawHLine(5, 235, 240, COLOR_WHITE);
 8002944:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002948:	22f0      	movs	r2, #240	@ 0xf0
 800294a:	21eb      	movs	r1, #235	@ 0xeb
 800294c:	2005      	movs	r0, #5
 800294e:	f002 fe2b 	bl	80055a8 <lcdDrawHLine>
	lcdSetCursor( 15 , 245 );
 8002952:	21f5      	movs	r1, #245	@ 0xf5
 8002954:	200f      	movs	r0, #15
 8002956:	f003 fadf 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "PHAM DINH BAO HOANG" );
 800295a:	4815      	ldr	r0, [pc, #84]	@ (80029b0 <waitingScreen+0x15c>)
 800295c:	f003 f9c0 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 170 , 245 );
 8002960:	21f5      	movs	r1, #245	@ 0xf5
 8002962:	20aa      	movs	r0, #170	@ 0xaa
 8002964:	f003 fad8 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "22520473" );
 8002968:	4812      	ldr	r0, [pc, #72]	@ (80029b4 <waitingScreen+0x160>)
 800296a:	f003 f9b9 	bl	8005ce0 <lcdPrintf>
	lcdDrawHLine(5, 235, 260, COLOR_WHITE);
 800296e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002972:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002976:	21eb      	movs	r1, #235	@ 0xeb
 8002978:	2005      	movs	r0, #5
 800297a:	f002 fe15 	bl	80055a8 <lcdDrawHLine>
	return 0;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	0801f3f0 	.word	0x0801f3f0
 8002988:	2000002c 	.word	0x2000002c
 800298c:	080102a0 	.word	0x080102a0
 8002990:	20000024 	.word	0x20000024
 8002994:	080102b0 	.word	0x080102b0
 8002998:	080102bc 	.word	0x080102bc
 800299c:	2000001c 	.word	0x2000001c
 80029a0:	080102c4 	.word	0x080102c4
 80029a4:	080102d8 	.word	0x080102d8
 80029a8:	080102e4 	.word	0x080102e4
 80029ac:	080102f4 	.word	0x080102f4
 80029b0:	08010300 	.word	0x08010300
 80029b4:	08010314 	.word	0x08010314

080029b8 <weatherStation>:
unsigned long weatherStation()
{
 80029b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af04      	add	r7, sp, #16
	lcdFillRGB(COLOR_BackGround_1);
 80029c0:	f247 505b 	movw	r0, #30043	@ 0x755b
 80029c4:	f002 fda2 	bl	800550c <lcdFillRGB>
	lcdDrawImage( 0 , 0, & imageMorning);
 80029c8:	4aae      	ldr	r2, [pc, #696]	@ (8002c84 <weatherStation+0x2cc>)
 80029ca:	2100      	movs	r1, #0
 80029cc:	2000      	movs	r0, #0
 80029ce:	f003 f889 	bl	8005ae4 <lcdDrawImage>
	lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_1);
 80029d2:	f247 515b 	movw	r1, #30043	@ 0x755b
 80029d6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029da:	f003 fa1d 	bl	8005e18 <lcdSetTextColor>
	lcdSetCursor( 30 , 30 );
 80029de:	211e      	movs	r1, #30
 80029e0:	201e      	movs	r0, #30
 80029e2:	f003 fa99 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font24 );
 80029e6:	48a8      	ldr	r0, [pc, #672]	@ (8002c88 <weatherStation+0x2d0>)
 80029e8:	f003 fa06 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( GetDayString() );
 80029ec:	f7fe fc2c 	bl	8001248 <GetDayString>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 f974 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 30 , 50 );
 80029f8:	2132      	movs	r1, #50	@ 0x32
 80029fa:	201e      	movs	r0, #30
 80029fc:	f003 fa8c 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font16 );
 8002a00:	48a2      	ldr	r0, [pc, #648]	@ (8002c8c <weatherStation+0x2d4>)
 8002a02:	f003 f9f9 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( getDataMonth(0) );
 8002a06:	2000      	movs	r0, #0
 8002a08:	f002 fba2 	bl	8005150 <getDataMonth>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 f966 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 64 , 50 );
 8002a14:	2132      	movs	r1, #50	@ 0x32
 8002a16:	2040      	movs	r0, #64	@ 0x40
 8002a18:	f003 fa7e 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", getDataDay(0) );
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f002 fb81 	bl	8005124 <getDataDay>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	489a      	ldr	r0, [pc, #616]	@ (8002c90 <weatherStation+0x2d8>)
 8002a28:	f003 f95a 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 30 , 65 );
 8002a2c:	2141      	movs	r1, #65	@ 0x41
 8002a2e:	201e      	movs	r0, #30
 8002a30:	f003 fa72 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font12 );
 8002a34:	4897      	ldr	r0, [pc, #604]	@ (8002c94 <weatherStation+0x2dc>)
 8002a36:	f003 f9df 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( GetTimeString() );
 8002a3a:	f7fe fbef 	bl	800121c <GetTimeString>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 f94d 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 67 , 65 );
 8002a46:	2141      	movs	r1, #65	@ 0x41
 8002a48:	2043      	movs	r0, #67	@ 0x43
 8002a4a:	f003 fa65 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font12 );
 8002a4e:	4891      	ldr	r0, [pc, #580]	@ (8002c94 <weatherStation+0x2dc>)
 8002a50:	f003 f9d2 	bl	8005df8 <lcdSetTextFont>

	lcdDrawImage( 65 , 80, & iconTemp);
 8002a54:	4a90      	ldr	r2, [pc, #576]	@ (8002c98 <weatherStation+0x2e0>)
 8002a56:	2150      	movs	r1, #80	@ 0x50
 8002a58:	2041      	movs	r0, #65	@ 0x41
 8002a5a:	f003 f843 	bl	8005ae4 <lcdDrawImage>
	lcdSetCursor( 35 , 85 );
 8002a5e:	2155      	movs	r1, #85	@ 0x55
 8002a60:	2023      	movs	r0, #35	@ 0x23
 8002a62:	f003 fa59 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font20 );
 8002a66:	488d      	ldr	r0, [pc, #564]	@ (8002c9c <weatherStation+0x2e4>)
 8002a68:	f003 f9c6 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "%2u", getDataTemp(0));
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f002 fa2d 	bl	8004ecc <getDataTemp>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4619      	mov	r1, r3
 8002a76:	4886      	ldr	r0, [pc, #536]	@ (8002c90 <weatherStation+0x2d8>)
 8002a78:	f003 f932 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage( 66 , 120, & iconWind);
 8002a7c:	4a88      	ldr	r2, [pc, #544]	@ (8002ca0 <weatherStation+0x2e8>)
 8002a7e:	2178      	movs	r1, #120	@ 0x78
 8002a80:	2042      	movs	r0, #66	@ 0x42
 8002a82:	f003 f82f 	bl	8005ae4 <lcdDrawImage>
	lcdSetCursor( 101 , 125 );
 8002a86:	217d      	movs	r1, #125	@ 0x7d
 8002a88:	2065      	movs	r0, #101	@ 0x65
 8002a8a:	f003 fa45 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font16 );
 8002a8e:	487f      	ldr	r0, [pc, #508]	@ (8002c8c <weatherStation+0x2d4>)
 8002a90:	f003 f9b2 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "%2u", getDataWind(0));
 8002a94:	2000      	movs	r0, #0
 8002a96:	f002 fa67 	bl	8004f68 <getDataWind>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	487c      	ldr	r0, [pc, #496]	@ (8002c90 <weatherStation+0x2d8>)
 8002aa0:	f003 f91e 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 131 , 126 );
 8002aa4:	217e      	movs	r1, #126	@ 0x7e
 8002aa6:	2083      	movs	r0, #131	@ 0x83
 8002aa8:	f003 fa36 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font12 );
 8002aac:	4879      	ldr	r0, [pc, #484]	@ (8002c94 <weatherStation+0x2dc>)
 8002aae:	f003 f9a3 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "Km/h" );
 8002ab2:	487c      	ldr	r0, [pc, #496]	@ (8002ca4 <weatherStation+0x2ec>)
 8002ab4:	f003 f914 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , iconWeather(95 , 20,  getDataCodeWeather(0)));
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f002 faa3 	bl	8005004 <getDataCodeWeather>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2114      	movs	r1, #20
 8002ac4:	205f      	movs	r0, #95	@ 0x5f
 8002ac6:	f000 fde1 	bl	800368c <iconWeather>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4619      	mov	r1, r3
 8002ace:	4876      	ldr	r0, [pc, #472]	@ (8002ca8 <weatherStation+0x2f0>)
 8002ad0:	f003 f906 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay(8, 210,  GetNext_1_DayString(), getDataMonth(1), getDataDay(1), getDataTemp(1), getDataCodeWeather(1)));
 8002ad4:	f7fe fc7a 	bl	80013cc <GetNext_1_DayString>
 8002ad8:	4606      	mov	r6, r0
 8002ada:	2001      	movs	r0, #1
 8002adc:	f002 fb38 	bl	8005150 <getDataMonth>
 8002ae0:	4680      	mov	r8, r0
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f002 fb1e 	bl	8005124 <getDataDay>
 8002ae8:	4604      	mov	r4, r0
 8002aea:	2001      	movs	r0, #1
 8002aec:	f002 f9ee 	bl	8004ecc <getDataTemp>
 8002af0:	4605      	mov	r5, r0
 8002af2:	2001      	movs	r0, #1
 8002af4:	f002 fa86 	bl	8005004 <getDataCodeWeather>
 8002af8:	4603      	mov	r3, r0
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	9501      	str	r5, [sp, #4]
 8002afe:	9400      	str	r4, [sp, #0]
 8002b00:	4643      	mov	r3, r8
 8002b02:	4632      	mov	r2, r6
 8002b04:	21d2      	movs	r1, #210	@ 0xd2
 8002b06:	2008      	movs	r0, #8
 8002b08:	f000 fd52 	bl	80035b0 <displayNextDay>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4865      	ldr	r0, [pc, #404]	@ (8002ca8 <weatherStation+0x2f0>)
 8002b12:	f003 f8e5 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay(48, 210, GetNext_2_DayString(), getDataMonth(2), getDataDay(2), getDataTemp(2), getDataCodeWeather(2)));
 8002b16:	f7fe fc65 	bl	80013e4 <GetNext_2_DayString>
 8002b1a:	4606      	mov	r6, r0
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f002 fb17 	bl	8005150 <getDataMonth>
 8002b22:	4680      	mov	r8, r0
 8002b24:	2002      	movs	r0, #2
 8002b26:	f002 fafd 	bl	8005124 <getDataDay>
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f002 f9cd 	bl	8004ecc <getDataTemp>
 8002b32:	4605      	mov	r5, r0
 8002b34:	2002      	movs	r0, #2
 8002b36:	f002 fa65 	bl	8005004 <getDataCodeWeather>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	9501      	str	r5, [sp, #4]
 8002b40:	9400      	str	r4, [sp, #0]
 8002b42:	4643      	mov	r3, r8
 8002b44:	4632      	mov	r2, r6
 8002b46:	21d2      	movs	r1, #210	@ 0xd2
 8002b48:	2030      	movs	r0, #48	@ 0x30
 8002b4a:	f000 fd31 	bl	80035b0 <displayNextDay>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4619      	mov	r1, r3
 8002b52:	4855      	ldr	r0, [pc, #340]	@ (8002ca8 <weatherStation+0x2f0>)
 8002b54:	f003 f8c4 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay(88, 210, GetNext_3_DayString(), getDataMonth(3), getDataDay(3), getDataTemp(3), getDataCodeWeather(3)));
 8002b58:	f7fe fc50 	bl	80013fc <GetNext_3_DayString>
 8002b5c:	4606      	mov	r6, r0
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f002 faf6 	bl	8005150 <getDataMonth>
 8002b64:	4680      	mov	r8, r0
 8002b66:	2003      	movs	r0, #3
 8002b68:	f002 fadc 	bl	8005124 <getDataDay>
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	2003      	movs	r0, #3
 8002b70:	f002 f9ac 	bl	8004ecc <getDataTemp>
 8002b74:	4605      	mov	r5, r0
 8002b76:	2003      	movs	r0, #3
 8002b78:	f002 fa44 	bl	8005004 <getDataCodeWeather>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	9302      	str	r3, [sp, #8]
 8002b80:	9501      	str	r5, [sp, #4]
 8002b82:	9400      	str	r4, [sp, #0]
 8002b84:	4643      	mov	r3, r8
 8002b86:	4632      	mov	r2, r6
 8002b88:	21d2      	movs	r1, #210	@ 0xd2
 8002b8a:	2058      	movs	r0, #88	@ 0x58
 8002b8c:	f000 fd10 	bl	80035b0 <displayNextDay>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4619      	mov	r1, r3
 8002b94:	4844      	ldr	r0, [pc, #272]	@ (8002ca8 <weatherStation+0x2f0>)
 8002b96:	f003 f8a3 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay(128, 210, GetNext_4_DayString(), getDataMonth(4), getDataDay(4), getDataTemp(4), getDataCodeWeather(4)));
 8002b9a:	f7fe fc3b 	bl	8001414 <GetNext_4_DayString>
 8002b9e:	4606      	mov	r6, r0
 8002ba0:	2004      	movs	r0, #4
 8002ba2:	f002 fad5 	bl	8005150 <getDataMonth>
 8002ba6:	4680      	mov	r8, r0
 8002ba8:	2004      	movs	r0, #4
 8002baa:	f002 fabb 	bl	8005124 <getDataDay>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	2004      	movs	r0, #4
 8002bb2:	f002 f98b 	bl	8004ecc <getDataTemp>
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	2004      	movs	r0, #4
 8002bba:	f002 fa23 	bl	8005004 <getDataCodeWeather>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	9302      	str	r3, [sp, #8]
 8002bc2:	9501      	str	r5, [sp, #4]
 8002bc4:	9400      	str	r4, [sp, #0]
 8002bc6:	4643      	mov	r3, r8
 8002bc8:	4632      	mov	r2, r6
 8002bca:	21d2      	movs	r1, #210	@ 0xd2
 8002bcc:	2080      	movs	r0, #128	@ 0x80
 8002bce:	f000 fcef 	bl	80035b0 <displayNextDay>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4834      	ldr	r0, [pc, #208]	@ (8002ca8 <weatherStation+0x2f0>)
 8002bd8:	f003 f882 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay(168, 210, GetNext_5_DayString(), getDataMonth(5), getDataDay(5), getDataTemp(5), getDataCodeWeather(5)));
 8002bdc:	f7fe fc26 	bl	800142c <GetNext_5_DayString>
 8002be0:	4606      	mov	r6, r0
 8002be2:	2005      	movs	r0, #5
 8002be4:	f002 fab4 	bl	8005150 <getDataMonth>
 8002be8:	4680      	mov	r8, r0
 8002bea:	2005      	movs	r0, #5
 8002bec:	f002 fa9a 	bl	8005124 <getDataDay>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	2005      	movs	r0, #5
 8002bf4:	f002 f96a 	bl	8004ecc <getDataTemp>
 8002bf8:	4605      	mov	r5, r0
 8002bfa:	2005      	movs	r0, #5
 8002bfc:	f002 fa02 	bl	8005004 <getDataCodeWeather>
 8002c00:	4603      	mov	r3, r0
 8002c02:	9302      	str	r3, [sp, #8]
 8002c04:	9501      	str	r5, [sp, #4]
 8002c06:	9400      	str	r4, [sp, #0]
 8002c08:	4643      	mov	r3, r8
 8002c0a:	4632      	mov	r2, r6
 8002c0c:	21d2      	movs	r1, #210	@ 0xd2
 8002c0e:	20a8      	movs	r0, #168	@ 0xa8
 8002c10:	f000 fcce 	bl	80035b0 <displayNextDay>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4619      	mov	r1, r3
 8002c18:	4823      	ldr	r0, [pc, #140]	@ (8002ca8 <weatherStation+0x2f0>)
 8002c1a:	f003 f861 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay(208, 210, GetNext_6_DayString(), getDataMonth(6), getDataDay(6), getDataTemp(6), getDataCodeWeather(6)));
 8002c1e:	f7fe fc11 	bl	8001444 <GetNext_6_DayString>
 8002c22:	4606      	mov	r6, r0
 8002c24:	2006      	movs	r0, #6
 8002c26:	f002 fa93 	bl	8005150 <getDataMonth>
 8002c2a:	4680      	mov	r8, r0
 8002c2c:	2006      	movs	r0, #6
 8002c2e:	f002 fa79 	bl	8005124 <getDataDay>
 8002c32:	4604      	mov	r4, r0
 8002c34:	2006      	movs	r0, #6
 8002c36:	f002 f949 	bl	8004ecc <getDataTemp>
 8002c3a:	4605      	mov	r5, r0
 8002c3c:	2006      	movs	r0, #6
 8002c3e:	f002 f9e1 	bl	8005004 <getDataCodeWeather>
 8002c42:	4603      	mov	r3, r0
 8002c44:	9302      	str	r3, [sp, #8]
 8002c46:	9501      	str	r5, [sp, #4]
 8002c48:	9400      	str	r4, [sp, #0]
 8002c4a:	4643      	mov	r3, r8
 8002c4c:	4632      	mov	r2, r6
 8002c4e:	21d2      	movs	r1, #210	@ 0xd2
 8002c50:	20d0      	movs	r0, #208	@ 0xd0
 8002c52:	f000 fcad 	bl	80035b0 <displayNextDay>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4813      	ldr	r0, [pc, #76]	@ (8002ca8 <weatherStation+0x2f0>)
 8002c5c:	f003 f840 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage(	220  , 0, & iconMenu);
 8002c60:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <weatherStation+0x2f4>)
 8002c62:	2100      	movs	r1, #0
 8002c64:	20dc      	movs	r0, #220	@ 0xdc
 8002c66:	f002 ff3d 	bl	8005ae4 <lcdDrawImage>
	lcdPrintf( "",Button() );
 8002c6a:	f7ff fd6d 	bl	8002748 <Button>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4619      	mov	r1, r3
 8002c72:	480d      	ldr	r0, [pc, #52]	@ (8002ca8 <weatherStation+0x2f0>)
 8002c74:	f003 f834 	bl	8005ce0 <lcdPrintf>
	return 0;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c82:	bf00      	nop
 8002c84:	08062100 	.word	0x08062100
 8002c88:	20000034 	.word	0x20000034
 8002c8c:	20000024 	.word	0x20000024
 8002c90:	08010320 	.word	0x08010320
 8002c94:	2000001c 	.word	0x2000001c
 8002c98:	0801f8fc 	.word	0x0801f8fc
 8002c9c:	2000002c 	.word	0x2000002c
 8002ca0:	0802053c 	.word	0x0802053c
 8002ca4:	08010324 	.word	0x08010324
 8002ca8:	0801029c 	.word	0x0801029c
 8002cac:	0802ccf0 	.word	0x0802ccf0

08002cb0 <weatherStation1>:
unsigned long weatherStation1()
{
 8002cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af04      	add	r7, sp, #16
//	lcdDrawImage( 0 , 0, & imageBackGround2);
	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 8002cb8:	f249 50bf 	movw	r0, #38335	@ 0x95bf
 8002cbc:	f002 fc26 	bl	800550c <lcdFillRGB>
	//lcdFillRGB(COLOR_BackGround_1);
	lcdFillRect(10, 8, 220, 23, COLOR_BackGround_3);
 8002cc0:	f649 63d8 	movw	r3, #40664	@ 0x9ed8
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2317      	movs	r3, #23
 8002cc8:	22dc      	movs	r2, #220	@ 0xdc
 8002cca:	2108      	movs	r1, #8
 8002ccc:	200a      	movs	r0, #10
 8002cce:	f002 fead 	bl	8005a2c <lcdFillRect>
	lcdFillRect(10, 34, 220, 102, COLOR_WHITE);
 8002cd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2366      	movs	r3, #102	@ 0x66
 8002cda:	22dc      	movs	r2, #220	@ 0xdc
 8002cdc:	2122      	movs	r1, #34	@ 0x22
 8002cde:	200a      	movs	r0, #10
 8002ce0:	f002 fea4 	bl	8005a2c <lcdFillRect>
	lcdFillRect(10, 142, 59, 15, COLOR_BackGround_3);
 8002ce4:	f649 63d8 	movw	r3, #40664	@ 0x9ed8
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	230f      	movs	r3, #15
 8002cec:	223b      	movs	r2, #59	@ 0x3b
 8002cee:	218e      	movs	r1, #142	@ 0x8e
 8002cf0:	200a      	movs	r0, #10
 8002cf2:	f002 fe9b 	bl	8005a2c <lcdFillRect>
	lcdFillRect(10, 158, 59, 52, COLOR_WHITE);
 8002cf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2334      	movs	r3, #52	@ 0x34
 8002cfe:	223b      	movs	r2, #59	@ 0x3b
 8002d00:	219e      	movs	r1, #158	@ 0x9e
 8002d02:	200a      	movs	r0, #10
 8002d04:	f002 fe92 	bl	8005a2c <lcdFillRect>
	lcdFillRect(90, 142, 59, 15, COLOR_BackGround_3);
 8002d08:	f649 63d8 	movw	r3, #40664	@ 0x9ed8
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	230f      	movs	r3, #15
 8002d10:	223b      	movs	r2, #59	@ 0x3b
 8002d12:	218e      	movs	r1, #142	@ 0x8e
 8002d14:	205a      	movs	r0, #90	@ 0x5a
 8002d16:	f002 fe89 	bl	8005a2c <lcdFillRect>
	lcdFillRect(90, 158, 59, 52, COLOR_WHITE);;
 8002d1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2334      	movs	r3, #52	@ 0x34
 8002d22:	223b      	movs	r2, #59	@ 0x3b
 8002d24:	219e      	movs	r1, #158	@ 0x9e
 8002d26:	205a      	movs	r0, #90	@ 0x5a
 8002d28:	f002 fe80 	bl	8005a2c <lcdFillRect>
	lcdFillRect(170, 142, 59, 15, COLOR_BackGround_3);
 8002d2c:	f649 63d8 	movw	r3, #40664	@ 0x9ed8
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	230f      	movs	r3, #15
 8002d34:	223b      	movs	r2, #59	@ 0x3b
 8002d36:	218e      	movs	r1, #142	@ 0x8e
 8002d38:	20aa      	movs	r0, #170	@ 0xaa
 8002d3a:	f002 fe77 	bl	8005a2c <lcdFillRect>
	lcdFillRect(170, 158, 59, 52, COLOR_WHITE);
 8002d3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2334      	movs	r3, #52	@ 0x34
 8002d46:	223b      	movs	r2, #59	@ 0x3b
 8002d48:	219e      	movs	r1, #158	@ 0x9e
 8002d4a:	20aa      	movs	r0, #170	@ 0xaa
 8002d4c:	f002 fe6e 	bl	8005a2c <lcdFillRect>
	lcdFillRect(10, 215, 59, 15, COLOR_BackGround_3);
 8002d50:	f649 63d8 	movw	r3, #40664	@ 0x9ed8
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	230f      	movs	r3, #15
 8002d58:	223b      	movs	r2, #59	@ 0x3b
 8002d5a:	21d7      	movs	r1, #215	@ 0xd7
 8002d5c:	200a      	movs	r0, #10
 8002d5e:	f002 fe65 	bl	8005a2c <lcdFillRect>
	lcdFillRect(10, 231, 59, 52, COLOR_WHITE);
 8002d62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2334      	movs	r3, #52	@ 0x34
 8002d6a:	223b      	movs	r2, #59	@ 0x3b
 8002d6c:	21e7      	movs	r1, #231	@ 0xe7
 8002d6e:	200a      	movs	r0, #10
 8002d70:	f002 fe5c 	bl	8005a2c <lcdFillRect>
	lcdFillRect(90, 215, 59, 15, COLOR_BackGround_3);
 8002d74:	f649 63d8 	movw	r3, #40664	@ 0x9ed8
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	223b      	movs	r2, #59	@ 0x3b
 8002d7e:	21d7      	movs	r1, #215	@ 0xd7
 8002d80:	205a      	movs	r0, #90	@ 0x5a
 8002d82:	f002 fe53 	bl	8005a2c <lcdFillRect>
	lcdFillRect(90, 231, 59, 52, COLOR_WHITE);
 8002d86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2334      	movs	r3, #52	@ 0x34
 8002d8e:	223b      	movs	r2, #59	@ 0x3b
 8002d90:	21e7      	movs	r1, #231	@ 0xe7
 8002d92:	205a      	movs	r0, #90	@ 0x5a
 8002d94:	f002 fe4a 	bl	8005a2c <lcdFillRect>
	lcdFillRect(170, 215, 59, 15, COLOR_BackGround_3);
 8002d98:	f649 63d8 	movw	r3, #40664	@ 0x9ed8
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	230f      	movs	r3, #15
 8002da0:	223b      	movs	r2, #59	@ 0x3b
 8002da2:	21d7      	movs	r1, #215	@ 0xd7
 8002da4:	20aa      	movs	r0, #170	@ 0xaa
 8002da6:	f002 fe41 	bl	8005a2c <lcdFillRect>
	lcdFillRect(170, 231, 59, 52, COLOR_WHITE);
 8002daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2334      	movs	r3, #52	@ 0x34
 8002db2:	223b      	movs	r2, #59	@ 0x3b
 8002db4:	21e7      	movs	r1, #231	@ 0xe7
 8002db6:	20aa      	movs	r0, #170	@ 0xaa
 8002db8:	f002 fe38 	bl	8005a2c <lcdFillRect>
	lcdPrintf( "" , iconWeather(125 , 38, getDataCodeWeather(0)));
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f002 f921 	bl	8005004 <getDataCodeWeather>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2126      	movs	r1, #38	@ 0x26
 8002dc8:	207d      	movs	r0, #125	@ 0x7d
 8002dca:	f000 fc5f 	bl	800368c <iconWeather>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	48a1      	ldr	r0, [pc, #644]	@ (8003058 <weatherStation1+0x3a8>)
 8002dd4:	f002 ff84 	bl	8005ce0 <lcdPrintf>
	lcdSetTextColor(COLOR_WHITE,COLOR_BackGround_3);
 8002dd8:	f649 61d8 	movw	r1, #40664	@ 0x9ed8
 8002ddc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002de0:	f003 f81a 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font16 );
 8002de4:	489d      	ldr	r0, [pc, #628]	@ (800305c <weatherStation1+0x3ac>)
 8002de6:	f003 f807 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 25 , 14);
 8002dea:	210e      	movs	r1, #14
 8002dec:	2019      	movs	r0, #25
 8002dee:	f003 f893 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( GetDayString() );
 8002df2:	f7fe fa29 	bl	8001248 <GetDayString>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 ff71 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 80 , 14 );
 8002dfe:	210e      	movs	r1, #14
 8002e00:	2050      	movs	r0, #80	@ 0x50
 8002e02:	f003 f889 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( getDataMonth(0));
 8002e06:	2000      	movs	r0, #0
 8002e08:	f002 f9a2 	bl	8005150 <getDataMonth>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 ff66 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 110 , 14 );
 8002e14:	210e      	movs	r1, #14
 8002e16:	206e      	movs	r0, #110	@ 0x6e
 8002e18:	f003 f87e 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "-%2u",  getDataDay(0));
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f002 f981 	bl	8005124 <getDataDay>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	488e      	ldr	r0, [pc, #568]	@ (8003060 <weatherStation1+0x3b0>)
 8002e28:	f002 ff5a 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 160 , 14 );
 8002e2c:	210e      	movs	r1, #14
 8002e2e:	20a0      	movs	r0, #160	@ 0xa0
 8002e30:	f003 f872 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( GetTimeString() );
 8002e34:	f7fe f9f2 	bl	800121c <GetTimeString>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 ff50 	bl	8005ce0 <lcdPrintf>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8002e40:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002e44:	2000      	movs	r0, #0
 8002e46:	f002 ffe7 	bl	8005e18 <lcdSetTextColor>
	lcdSetCursor( 50 , 105 );
 8002e4a:	2169      	movs	r1, #105	@ 0x69
 8002e4c:	2032      	movs	r0, #50	@ 0x32
 8002e4e:	f003 f863 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", getDataWind(0) );
 8002e52:	2000      	movs	r0, #0
 8002e54:	f002 f888 	bl	8004f68 <getDataWind>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4881      	ldr	r0, [pc, #516]	@ (8003064 <weatherStation1+0x3b4>)
 8002e5e:	f002 ff3f 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 85 , 106 );
 8002e62:	216a      	movs	r1, #106	@ 0x6a
 8002e64:	2055      	movs	r0, #85	@ 0x55
 8002e66:	f003 f857 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font12 );
 8002e6a:	487f      	ldr	r0, [pc, #508]	@ (8003068 <weatherStation1+0x3b8>)
 8002e6c:	f002 ffc4 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "Km/h" );
 8002e70:	487e      	ldr	r0, [pc, #504]	@ (800306c <weatherStation1+0x3bc>)
 8002e72:	f002 ff35 	bl	8005ce0 <lcdPrintf>
	lcdSetTextFont( & Font24 );
 8002e76:	487e      	ldr	r0, [pc, #504]	@ (8003070 <weatherStation1+0x3c0>)
 8002e78:	f002 ffbe 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 25 , 60 );
 8002e7c:	213c      	movs	r1, #60	@ 0x3c
 8002e7e:	2019      	movs	r0, #25
 8002e80:	f003 f84a 	bl	8005f18 <lcdSetCursor>
	lcdPrintf(  "%2u", getDataTemp(0) );
 8002e84:	2000      	movs	r0, #0
 8002e86:	f002 f821 	bl	8004ecc <getDataTemp>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4875      	ldr	r0, [pc, #468]	@ (8003064 <weatherStation1+0x3b4>)
 8002e90:	f002 ff26 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage( 85 , 50, & iconTemp2);
 8002e94:	4a77      	ldr	r2, [pc, #476]	@ (8003074 <weatherStation1+0x3c4>)
 8002e96:	2132      	movs	r1, #50	@ 0x32
 8002e98:	2055      	movs	r0, #85	@ 0x55
 8002e9a:	f002 fe23 	bl	8005ae4 <lcdDrawImage>
	lcdDrawImage( 15 , 100, & iconWind2);
 8002e9e:	4a76      	ldr	r2, [pc, #472]	@ (8003078 <weatherStation1+0x3c8>)
 8002ea0:	2164      	movs	r1, #100	@ 0x64
 8002ea2:	200f      	movs	r0, #15
 8002ea4:	f002 fe1e 	bl	8005ae4 <lcdDrawImage>
	lcdPrintf( "" , displayNextDay1(28, 144,  GetNext_1_DayString(),  getDataMonth(1), getDataDay(1),  getDataTemp(1), getDataCodeWeather(1)));
 8002ea8:	f7fe fa90 	bl	80013cc <GetNext_1_DayString>
 8002eac:	4606      	mov	r6, r0
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f002 f94e 	bl	8005150 <getDataMonth>
 8002eb4:	4680      	mov	r8, r0
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f002 f934 	bl	8005124 <getDataDay>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f002 f804 	bl	8004ecc <getDataTemp>
 8002ec4:	4605      	mov	r5, r0
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f002 f89c 	bl	8005004 <getDataCodeWeather>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	9302      	str	r3, [sp, #8]
 8002ed0:	9501      	str	r5, [sp, #4]
 8002ed2:	9400      	str	r4, [sp, #0]
 8002ed4:	4643      	mov	r3, r8
 8002ed6:	4632      	mov	r2, r6
 8002ed8:	2190      	movs	r1, #144	@ 0x90
 8002eda:	201c      	movs	r0, #28
 8002edc:	f000 faf8 	bl	80034d0 <displayNextDay1>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	485c      	ldr	r0, [pc, #368]	@ (8003058 <weatherStation1+0x3a8>)
 8002ee6:	f002 fefb 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay1(108, 144, GetNext_2_DayString(),  getDataMonth(2), getDataDay(2),  getDataTemp(2), getDataCodeWeather(2)));
 8002eea:	f7fe fa7b 	bl	80013e4 <GetNext_2_DayString>
 8002eee:	4606      	mov	r6, r0
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f002 f92d 	bl	8005150 <getDataMonth>
 8002ef6:	4680      	mov	r8, r0
 8002ef8:	2002      	movs	r0, #2
 8002efa:	f002 f913 	bl	8005124 <getDataDay>
 8002efe:	4604      	mov	r4, r0
 8002f00:	2002      	movs	r0, #2
 8002f02:	f001 ffe3 	bl	8004ecc <getDataTemp>
 8002f06:	4605      	mov	r5, r0
 8002f08:	2002      	movs	r0, #2
 8002f0a:	f002 f87b 	bl	8005004 <getDataCodeWeather>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	9302      	str	r3, [sp, #8]
 8002f12:	9501      	str	r5, [sp, #4]
 8002f14:	9400      	str	r4, [sp, #0]
 8002f16:	4643      	mov	r3, r8
 8002f18:	4632      	mov	r2, r6
 8002f1a:	2190      	movs	r1, #144	@ 0x90
 8002f1c:	206c      	movs	r0, #108	@ 0x6c
 8002f1e:	f000 fad7 	bl	80034d0 <displayNextDay1>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4619      	mov	r1, r3
 8002f26:	484c      	ldr	r0, [pc, #304]	@ (8003058 <weatherStation1+0x3a8>)
 8002f28:	f002 feda 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay1(188, 144, GetNext_3_DayString(),  getDataMonth(3), getDataDay(3),  getDataTemp(3), getDataCodeWeather(3)));
 8002f2c:	f7fe fa66 	bl	80013fc <GetNext_3_DayString>
 8002f30:	4606      	mov	r6, r0
 8002f32:	2003      	movs	r0, #3
 8002f34:	f002 f90c 	bl	8005150 <getDataMonth>
 8002f38:	4680      	mov	r8, r0
 8002f3a:	2003      	movs	r0, #3
 8002f3c:	f002 f8f2 	bl	8005124 <getDataDay>
 8002f40:	4604      	mov	r4, r0
 8002f42:	2003      	movs	r0, #3
 8002f44:	f001 ffc2 	bl	8004ecc <getDataTemp>
 8002f48:	4605      	mov	r5, r0
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f002 f85a 	bl	8005004 <getDataCodeWeather>
 8002f50:	4603      	mov	r3, r0
 8002f52:	9302      	str	r3, [sp, #8]
 8002f54:	9501      	str	r5, [sp, #4]
 8002f56:	9400      	str	r4, [sp, #0]
 8002f58:	4643      	mov	r3, r8
 8002f5a:	4632      	mov	r2, r6
 8002f5c:	2190      	movs	r1, #144	@ 0x90
 8002f5e:	20bc      	movs	r0, #188	@ 0xbc
 8002f60:	f000 fab6 	bl	80034d0 <displayNextDay1>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4619      	mov	r1, r3
 8002f68:	483b      	ldr	r0, [pc, #236]	@ (8003058 <weatherStation1+0x3a8>)
 8002f6a:	f002 feb9 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay1(28, 217, GetNext_4_DayString(),  getDataMonth(4), getDataDay(4), getDataTemp(4), getDataCodeWeather(4)));
 8002f6e:	f7fe fa51 	bl	8001414 <GetNext_4_DayString>
 8002f72:	4606      	mov	r6, r0
 8002f74:	2004      	movs	r0, #4
 8002f76:	f002 f8eb 	bl	8005150 <getDataMonth>
 8002f7a:	4680      	mov	r8, r0
 8002f7c:	2004      	movs	r0, #4
 8002f7e:	f002 f8d1 	bl	8005124 <getDataDay>
 8002f82:	4604      	mov	r4, r0
 8002f84:	2004      	movs	r0, #4
 8002f86:	f001 ffa1 	bl	8004ecc <getDataTemp>
 8002f8a:	4605      	mov	r5, r0
 8002f8c:	2004      	movs	r0, #4
 8002f8e:	f002 f839 	bl	8005004 <getDataCodeWeather>
 8002f92:	4603      	mov	r3, r0
 8002f94:	9302      	str	r3, [sp, #8]
 8002f96:	9501      	str	r5, [sp, #4]
 8002f98:	9400      	str	r4, [sp, #0]
 8002f9a:	4643      	mov	r3, r8
 8002f9c:	4632      	mov	r2, r6
 8002f9e:	21d9      	movs	r1, #217	@ 0xd9
 8002fa0:	201c      	movs	r0, #28
 8002fa2:	f000 fa95 	bl	80034d0 <displayNextDay1>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	482b      	ldr	r0, [pc, #172]	@ (8003058 <weatherStation1+0x3a8>)
 8002fac:	f002 fe98 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay1(108, 217, GetNext_5_DayString(),  getDataMonth(5), getDataDay(5), getDataTemp(5), getDataCodeWeather(5)));
 8002fb0:	f7fe fa3c 	bl	800142c <GetNext_5_DayString>
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	2005      	movs	r0, #5
 8002fb8:	f002 f8ca 	bl	8005150 <getDataMonth>
 8002fbc:	4680      	mov	r8, r0
 8002fbe:	2005      	movs	r0, #5
 8002fc0:	f002 f8b0 	bl	8005124 <getDataDay>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	2005      	movs	r0, #5
 8002fc8:	f001 ff80 	bl	8004ecc <getDataTemp>
 8002fcc:	4605      	mov	r5, r0
 8002fce:	2005      	movs	r0, #5
 8002fd0:	f002 f818 	bl	8005004 <getDataCodeWeather>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	9302      	str	r3, [sp, #8]
 8002fd8:	9501      	str	r5, [sp, #4]
 8002fda:	9400      	str	r4, [sp, #0]
 8002fdc:	4643      	mov	r3, r8
 8002fde:	4632      	mov	r2, r6
 8002fe0:	21d9      	movs	r1, #217	@ 0xd9
 8002fe2:	206c      	movs	r0, #108	@ 0x6c
 8002fe4:	f000 fa74 	bl	80034d0 <displayNextDay1>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4619      	mov	r1, r3
 8002fec:	481a      	ldr	r0, [pc, #104]	@ (8003058 <weatherStation1+0x3a8>)
 8002fee:	f002 fe77 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay1(188, 217, GetNext_6_DayString(),  getDataMonth(6), getDataDay(6),  getDataTemp(6), getDataCodeWeather(6)));
 8002ff2:	f7fe fa27 	bl	8001444 <GetNext_6_DayString>
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	2006      	movs	r0, #6
 8002ffa:	f002 f8a9 	bl	8005150 <getDataMonth>
 8002ffe:	4680      	mov	r8, r0
 8003000:	2006      	movs	r0, #6
 8003002:	f002 f88f 	bl	8005124 <getDataDay>
 8003006:	4604      	mov	r4, r0
 8003008:	2006      	movs	r0, #6
 800300a:	f001 ff5f 	bl	8004ecc <getDataTemp>
 800300e:	4605      	mov	r5, r0
 8003010:	2006      	movs	r0, #6
 8003012:	f001 fff7 	bl	8005004 <getDataCodeWeather>
 8003016:	4603      	mov	r3, r0
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	9501      	str	r5, [sp, #4]
 800301c:	9400      	str	r4, [sp, #0]
 800301e:	4643      	mov	r3, r8
 8003020:	4632      	mov	r2, r6
 8003022:	21d9      	movs	r1, #217	@ 0xd9
 8003024:	20bc      	movs	r0, #188	@ 0xbc
 8003026:	f000 fa53 	bl	80034d0 <displayNextDay1>
 800302a:	4603      	mov	r3, r0
 800302c:	4619      	mov	r1, r3
 800302e:	480a      	ldr	r0, [pc, #40]	@ (8003058 <weatherStation1+0x3a8>)
 8003030:	f002 fe56 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage(	220  , 0, & iconMenu);
 8003034:	4a11      	ldr	r2, [pc, #68]	@ (800307c <weatherStation1+0x3cc>)
 8003036:	2100      	movs	r1, #0
 8003038:	20dc      	movs	r0, #220	@ 0xdc
 800303a:	f002 fd53 	bl	8005ae4 <lcdDrawImage>
	lcdPrintf( "",Button() );
 800303e:	f7ff fb83 	bl	8002748 <Button>
 8003042:	4603      	mov	r3, r0
 8003044:	4619      	mov	r1, r3
 8003046:	4804      	ldr	r0, [pc, #16]	@ (8003058 <weatherStation1+0x3a8>)
 8003048:	f002 fe4a 	bl	8005ce0 <lcdPrintf>
	return 0;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003056:	bf00      	nop
 8003058:	0801029c 	.word	0x0801029c
 800305c:	20000024 	.word	0x20000024
 8003060:	0801032c 	.word	0x0801032c
 8003064:	08010320 	.word	0x08010320
 8003068:	2000001c 	.word	0x2000001c
 800306c:	08010324 	.word	0x08010324
 8003070:	20000034 	.word	0x20000034
 8003074:	0801fe08 	.word	0x0801fe08
 8003078:	08020a70 	.word	0x08020a70
 800307c:	0802ccf0 	.word	0x0802ccf0

08003080 <weatherStation2>:
unsigned long weatherStation2()
{
 8003080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af04      	add	r7, sp, #16
//	lcdDrawImage( 0 , 0, & imageBackGround3);
	lcdFillRGB(COLOR_BackGround_3);
 8003088:	f649 60d8 	movw	r0, #40664	@ 0x9ed8
 800308c:	f002 fa3e 	bl	800550c <lcdFillRGB>
	lcdFillRect(10, 25, 102, 85, COLOR_WHITE);
 8003090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2355      	movs	r3, #85	@ 0x55
 8003098:	2266      	movs	r2, #102	@ 0x66
 800309a:	2119      	movs	r1, #25
 800309c:	200a      	movs	r0, #10
 800309e:	f002 fcc5 	bl	8005a2c <lcdFillRect>
	lcdFillRect(10, 117, 102, 170, COLOR_WHITE);
 80030a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	23aa      	movs	r3, #170	@ 0xaa
 80030aa:	2266      	movs	r2, #102	@ 0x66
 80030ac:	2175      	movs	r1, #117	@ 0x75
 80030ae:	200a      	movs	r0, #10
 80030b0:	f002 fcbc 	bl	8005a2c <lcdFillRect>
	lcdFillRect(130, 25, 100, 34, COLOR_WHITE);
 80030b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	2322      	movs	r3, #34	@ 0x22
 80030bc:	2264      	movs	r2, #100	@ 0x64
 80030be:	2119      	movs	r1, #25
 80030c0:	2082      	movs	r0, #130	@ 0x82
 80030c2:	f002 fcb3 	bl	8005a2c <lcdFillRect>
	lcdFillRect(130, 70, 100, 34, COLOR_WHITE);
 80030c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2322      	movs	r3, #34	@ 0x22
 80030ce:	2264      	movs	r2, #100	@ 0x64
 80030d0:	2146      	movs	r1, #70	@ 0x46
 80030d2:	2082      	movs	r0, #130	@ 0x82
 80030d4:	f002 fcaa 	bl	8005a2c <lcdFillRect>
	lcdFillRect(130, 115, 100, 34, COLOR_WHITE);
 80030d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2322      	movs	r3, #34	@ 0x22
 80030e0:	2264      	movs	r2, #100	@ 0x64
 80030e2:	2173      	movs	r1, #115	@ 0x73
 80030e4:	2082      	movs	r0, #130	@ 0x82
 80030e6:	f002 fca1 	bl	8005a2c <lcdFillRect>
	lcdFillRect(130, 162, 100, 34, COLOR_WHITE);
 80030ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2322      	movs	r3, #34	@ 0x22
 80030f2:	2264      	movs	r2, #100	@ 0x64
 80030f4:	21a2      	movs	r1, #162	@ 0xa2
 80030f6:	2082      	movs	r0, #130	@ 0x82
 80030f8:	f002 fc98 	bl	8005a2c <lcdFillRect>
	lcdFillRect(130, 208, 100, 34, COLOR_WHITE);
 80030fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2322      	movs	r3, #34	@ 0x22
 8003104:	2264      	movs	r2, #100	@ 0x64
 8003106:	21d0      	movs	r1, #208	@ 0xd0
 8003108:	2082      	movs	r0, #130	@ 0x82
 800310a:	f002 fc8f 	bl	8005a2c <lcdFillRect>
	lcdFillRect(130, 253, 100, 34, COLOR_WHITE);
 800310e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2322      	movs	r3, #34	@ 0x22
 8003116:	2264      	movs	r2, #100	@ 0x64
 8003118:	21fd      	movs	r1, #253	@ 0xfd
 800311a:	2082      	movs	r0, #130	@ 0x82
 800311c:	f002 fc86 	bl	8005a2c <lcdFillRect>
	lcdPrintf( "" , iconWeather(10, 115, getDataCodeWeather(0)));
 8003120:	2000      	movs	r0, #0
 8003122:	f001 ff6f 	bl	8005004 <getDataCodeWeather>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	2173      	movs	r1, #115	@ 0x73
 800312c:	200a      	movs	r0, #10
 800312e:	f000 faad 	bl	800368c <iconWeather>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	48a4      	ldr	r0, [pc, #656]	@ (80033c8 <weatherStation2+0x348>)
 8003138:	f002 fdd2 	bl	8005ce0 <lcdPrintf>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 800313c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003140:	2000      	movs	r0, #0
 8003142:	f002 fe69 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font24 );
 8003146:	48a1      	ldr	r0, [pc, #644]	@ (80033cc <weatherStation2+0x34c>)
 8003148:	f002 fe56 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 33 , 30);
 800314c:	211e      	movs	r1, #30
 800314e:	2021      	movs	r0, #33	@ 0x21
 8003150:	f002 fee2 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( GetDayString() );
 8003154:	f7fe f878 	bl	8001248 <GetDayString>
 8003158:	4603      	mov	r3, r0
 800315a:	4618      	mov	r0, r3
 800315c:	f002 fdc0 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 20 , 86 );
 8003160:	2156      	movs	r1, #86	@ 0x56
 8003162:	2014      	movs	r0, #20
 8003164:	f002 fed8 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( GetTimeString() );
 8003168:	f7fe f858 	bl	800121c <GetTimeString>
 800316c:	4603      	mov	r3, r0
 800316e:	4618      	mov	r0, r3
 8003170:	f002 fdb6 	bl	8005ce0 <lcdPrintf>
	lcdSetTextFont( & Font20 );
 8003174:	4896      	ldr	r0, [pc, #600]	@ (80033d0 <weatherStation2+0x350>)
 8003176:	f002 fe3f 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 15 , 60 );
 800317a:	213c      	movs	r1, #60	@ 0x3c
 800317c:	200f      	movs	r0, #15
 800317e:	f002 fecb 	bl	8005f18 <lcdSetCursor>
	lcdPrintf(  getDataMonth(0) );
 8003182:	2000      	movs	r0, #0
 8003184:	f001 ffe4 	bl	8005150 <getDataMonth>
 8003188:	4603      	mov	r3, r0
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fda8 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 66 , 60 );
 8003190:	213c      	movs	r1, #60	@ 0x3c
 8003192:	2042      	movs	r0, #66	@ 0x42
 8003194:	f002 fec0 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "-%2u",  getDataDay(0));
 8003198:	2000      	movs	r0, #0
 800319a:	f001 ffc3 	bl	8005124 <getDataDay>
 800319e:	4603      	mov	r3, r0
 80031a0:	4619      	mov	r1, r3
 80031a2:	488c      	ldr	r0, [pc, #560]	@ (80033d4 <weatherStation2+0x354>)
 80031a4:	f002 fd9c 	bl	8005ce0 <lcdPrintf>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 80031a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80031ac:	2000      	movs	r0, #0
 80031ae:	f002 fe33 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font16 );
 80031b2:	4889      	ldr	r0, [pc, #548]	@ (80033d8 <weatherStation2+0x358>)
 80031b4:	f002 fe20 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 28 , 227 );
 80031b8:	21e3      	movs	r1, #227	@ 0xe3
 80031ba:	201c      	movs	r0, #28
 80031bc:	f002 feac 	bl	8005f18 <lcdSetCursor>
	lcdPrintf(  "%2u", getDataWind(0) );
 80031c0:	2000      	movs	r0, #0
 80031c2:	f001 fed1 	bl	8004f68 <getDataWind>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4619      	mov	r1, r3
 80031ca:	4884      	ldr	r0, [pc, #528]	@ (80033dc <weatherStation2+0x35c>)
 80031cc:	f002 fd88 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( 67 , 227 );
 80031d0:	21e3      	movs	r1, #227	@ 0xe3
 80031d2:	2043      	movs	r0, #67	@ 0x43
 80031d4:	f002 fea0 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font12 );
 80031d8:	4881      	ldr	r0, [pc, #516]	@ (80033e0 <weatherStation2+0x360>)
 80031da:	f002 fe0d 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "Km/h" );
 80031de:	4881      	ldr	r0, [pc, #516]	@ (80033e4 <weatherStation2+0x364>)
 80031e0:	f002 fd7e 	bl	8005ce0 <lcdPrintf>
	lcdSetTextFont( & Font24 );
 80031e4:	4879      	ldr	r0, [pc, #484]	@ (80033cc <weatherStation2+0x34c>)
 80031e6:	f002 fe07 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 30 , 257 );
 80031ea:	f240 1101 	movw	r1, #257	@ 0x101
 80031ee:	201e      	movs	r0, #30
 80031f0:	f002 fe92 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", getDataTemp(0) );
 80031f4:	2000      	movs	r0, #0
 80031f6:	f001 fe69 	bl	8004ecc <getDataTemp>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4619      	mov	r1, r3
 80031fe:	4877      	ldr	r0, [pc, #476]	@ (80033dc <weatherStation2+0x35c>)
 8003200:	f002 fd6e 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage( 75 , 249, & iconTemp2);
 8003204:	4a78      	ldr	r2, [pc, #480]	@ (80033e8 <weatherStation2+0x368>)
 8003206:	21f9      	movs	r1, #249	@ 0xf9
 8003208:	204b      	movs	r0, #75	@ 0x4b
 800320a:	f002 fc6b 	bl	8005ae4 <lcdDrawImage>
	lcdDrawImage( 40 , 205, & iconWind2);
 800320e:	4a77      	ldr	r2, [pc, #476]	@ (80033ec <weatherStation2+0x36c>)
 8003210:	21cd      	movs	r1, #205	@ 0xcd
 8003212:	2028      	movs	r0, #40	@ 0x28
 8003214:	f002 fc66 	bl	8005ae4 <lcdDrawImage>
	lcdPrintf( "" , displayNextDay2(135, 30,  GetNext_1_DayString(), getDataMonth(1), getDataDay(1), getDataTemp(1), getDataCodeWeather(1)));
 8003218:	f7fe f8d8 	bl	80013cc <GetNext_1_DayString>
 800321c:	4606      	mov	r6, r0
 800321e:	2001      	movs	r0, #1
 8003220:	f001 ff96 	bl	8005150 <getDataMonth>
 8003224:	4680      	mov	r8, r0
 8003226:	2001      	movs	r0, #1
 8003228:	f001 ff7c 	bl	8005124 <getDataDay>
 800322c:	4604      	mov	r4, r0
 800322e:	2001      	movs	r0, #1
 8003230:	f001 fe4c 	bl	8004ecc <getDataTemp>
 8003234:	4605      	mov	r5, r0
 8003236:	2001      	movs	r0, #1
 8003238:	f001 fee4 	bl	8005004 <getDataCodeWeather>
 800323c:	4603      	mov	r3, r0
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	9501      	str	r5, [sp, #4]
 8003242:	9400      	str	r4, [sp, #0]
 8003244:	4643      	mov	r3, r8
 8003246:	4632      	mov	r2, r6
 8003248:	211e      	movs	r1, #30
 800324a:	2087      	movs	r0, #135	@ 0x87
 800324c:	f000 f8d2 	bl	80033f4 <displayNextDay2>
 8003250:	4603      	mov	r3, r0
 8003252:	4619      	mov	r1, r3
 8003254:	485c      	ldr	r0, [pc, #368]	@ (80033c8 <weatherStation2+0x348>)
 8003256:	f002 fd43 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay2(135, 75, GetNext_2_DayString(), getDataMonth(2), getDataDay(3),  getDataTemp(2), getDataCodeWeather(2)));
 800325a:	f7fe f8c3 	bl	80013e4 <GetNext_2_DayString>
 800325e:	4606      	mov	r6, r0
 8003260:	2002      	movs	r0, #2
 8003262:	f001 ff75 	bl	8005150 <getDataMonth>
 8003266:	4680      	mov	r8, r0
 8003268:	2003      	movs	r0, #3
 800326a:	f001 ff5b 	bl	8005124 <getDataDay>
 800326e:	4604      	mov	r4, r0
 8003270:	2002      	movs	r0, #2
 8003272:	f001 fe2b 	bl	8004ecc <getDataTemp>
 8003276:	4605      	mov	r5, r0
 8003278:	2002      	movs	r0, #2
 800327a:	f001 fec3 	bl	8005004 <getDataCodeWeather>
 800327e:	4603      	mov	r3, r0
 8003280:	9302      	str	r3, [sp, #8]
 8003282:	9501      	str	r5, [sp, #4]
 8003284:	9400      	str	r4, [sp, #0]
 8003286:	4643      	mov	r3, r8
 8003288:	4632      	mov	r2, r6
 800328a:	214b      	movs	r1, #75	@ 0x4b
 800328c:	2087      	movs	r0, #135	@ 0x87
 800328e:	f000 f8b1 	bl	80033f4 <displayNextDay2>
 8003292:	4603      	mov	r3, r0
 8003294:	4619      	mov	r1, r3
 8003296:	484c      	ldr	r0, [pc, #304]	@ (80033c8 <weatherStation2+0x348>)
 8003298:	f002 fd22 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay2(135, 120, GetNext_3_DayString(), getDataMonth(3), getDataDay(3), getDataTemp(3), getDataCodeWeather(3)));
 800329c:	f7fe f8ae 	bl	80013fc <GetNext_3_DayString>
 80032a0:	4606      	mov	r6, r0
 80032a2:	2003      	movs	r0, #3
 80032a4:	f001 ff54 	bl	8005150 <getDataMonth>
 80032a8:	4680      	mov	r8, r0
 80032aa:	2003      	movs	r0, #3
 80032ac:	f001 ff3a 	bl	8005124 <getDataDay>
 80032b0:	4604      	mov	r4, r0
 80032b2:	2003      	movs	r0, #3
 80032b4:	f001 fe0a 	bl	8004ecc <getDataTemp>
 80032b8:	4605      	mov	r5, r0
 80032ba:	2003      	movs	r0, #3
 80032bc:	f001 fea2 	bl	8005004 <getDataCodeWeather>
 80032c0:	4603      	mov	r3, r0
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	9501      	str	r5, [sp, #4]
 80032c6:	9400      	str	r4, [sp, #0]
 80032c8:	4643      	mov	r3, r8
 80032ca:	4632      	mov	r2, r6
 80032cc:	2178      	movs	r1, #120	@ 0x78
 80032ce:	2087      	movs	r0, #135	@ 0x87
 80032d0:	f000 f890 	bl	80033f4 <displayNextDay2>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4619      	mov	r1, r3
 80032d8:	483b      	ldr	r0, [pc, #236]	@ (80033c8 <weatherStation2+0x348>)
 80032da:	f002 fd01 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay2(135, 167, GetNext_4_DayString(), getDataMonth(4), getDataDay(4), getDataTemp(4), getDataCodeWeather(4)));
 80032de:	f7fe f899 	bl	8001414 <GetNext_4_DayString>
 80032e2:	4606      	mov	r6, r0
 80032e4:	2004      	movs	r0, #4
 80032e6:	f001 ff33 	bl	8005150 <getDataMonth>
 80032ea:	4680      	mov	r8, r0
 80032ec:	2004      	movs	r0, #4
 80032ee:	f001 ff19 	bl	8005124 <getDataDay>
 80032f2:	4604      	mov	r4, r0
 80032f4:	2004      	movs	r0, #4
 80032f6:	f001 fde9 	bl	8004ecc <getDataTemp>
 80032fa:	4605      	mov	r5, r0
 80032fc:	2004      	movs	r0, #4
 80032fe:	f001 fe81 	bl	8005004 <getDataCodeWeather>
 8003302:	4603      	mov	r3, r0
 8003304:	9302      	str	r3, [sp, #8]
 8003306:	9501      	str	r5, [sp, #4]
 8003308:	9400      	str	r4, [sp, #0]
 800330a:	4643      	mov	r3, r8
 800330c:	4632      	mov	r2, r6
 800330e:	21a7      	movs	r1, #167	@ 0xa7
 8003310:	2087      	movs	r0, #135	@ 0x87
 8003312:	f000 f86f 	bl	80033f4 <displayNextDay2>
 8003316:	4603      	mov	r3, r0
 8003318:	4619      	mov	r1, r3
 800331a:	482b      	ldr	r0, [pc, #172]	@ (80033c8 <weatherStation2+0x348>)
 800331c:	f002 fce0 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay2(135, 212, GetNext_5_DayString(), getDataMonth(5), getDataDay(5), getDataTemp(5), getDataCodeWeather(5)));
 8003320:	f7fe f884 	bl	800142c <GetNext_5_DayString>
 8003324:	4606      	mov	r6, r0
 8003326:	2005      	movs	r0, #5
 8003328:	f001 ff12 	bl	8005150 <getDataMonth>
 800332c:	4680      	mov	r8, r0
 800332e:	2005      	movs	r0, #5
 8003330:	f001 fef8 	bl	8005124 <getDataDay>
 8003334:	4604      	mov	r4, r0
 8003336:	2005      	movs	r0, #5
 8003338:	f001 fdc8 	bl	8004ecc <getDataTemp>
 800333c:	4605      	mov	r5, r0
 800333e:	2005      	movs	r0, #5
 8003340:	f001 fe60 	bl	8005004 <getDataCodeWeather>
 8003344:	4603      	mov	r3, r0
 8003346:	9302      	str	r3, [sp, #8]
 8003348:	9501      	str	r5, [sp, #4]
 800334a:	9400      	str	r4, [sp, #0]
 800334c:	4643      	mov	r3, r8
 800334e:	4632      	mov	r2, r6
 8003350:	21d4      	movs	r1, #212	@ 0xd4
 8003352:	2087      	movs	r0, #135	@ 0x87
 8003354:	f000 f84e 	bl	80033f4 <displayNextDay2>
 8003358:	4603      	mov	r3, r0
 800335a:	4619      	mov	r1, r3
 800335c:	481a      	ldr	r0, [pc, #104]	@ (80033c8 <weatherStation2+0x348>)
 800335e:	f002 fcbf 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , displayNextDay2(135, 257, GetNext_6_DayString(), getDataMonth(6), getDataDay(6), getDataTemp(6), getDataCodeWeather(6)));
 8003362:	f7fe f86f 	bl	8001444 <GetNext_6_DayString>
 8003366:	4606      	mov	r6, r0
 8003368:	2006      	movs	r0, #6
 800336a:	f001 fef1 	bl	8005150 <getDataMonth>
 800336e:	4680      	mov	r8, r0
 8003370:	2006      	movs	r0, #6
 8003372:	f001 fed7 	bl	8005124 <getDataDay>
 8003376:	4604      	mov	r4, r0
 8003378:	2006      	movs	r0, #6
 800337a:	f001 fda7 	bl	8004ecc <getDataTemp>
 800337e:	4605      	mov	r5, r0
 8003380:	2006      	movs	r0, #6
 8003382:	f001 fe3f 	bl	8005004 <getDataCodeWeather>
 8003386:	4603      	mov	r3, r0
 8003388:	9302      	str	r3, [sp, #8]
 800338a:	9501      	str	r5, [sp, #4]
 800338c:	9400      	str	r4, [sp, #0]
 800338e:	4643      	mov	r3, r8
 8003390:	4632      	mov	r2, r6
 8003392:	f240 1101 	movw	r1, #257	@ 0x101
 8003396:	2087      	movs	r0, #135	@ 0x87
 8003398:	f000 f82c 	bl	80033f4 <displayNextDay2>
 800339c:	4603      	mov	r3, r0
 800339e:	4619      	mov	r1, r3
 80033a0:	4809      	ldr	r0, [pc, #36]	@ (80033c8 <weatherStation2+0x348>)
 80033a2:	f002 fc9d 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage(	220  , 0, & iconMenu);
 80033a6:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <weatherStation2+0x370>)
 80033a8:	2100      	movs	r1, #0
 80033aa:	20dc      	movs	r0, #220	@ 0xdc
 80033ac:	f002 fb9a 	bl	8005ae4 <lcdDrawImage>
	lcdPrintf( "",Button() );
 80033b0:	f7ff f9ca 	bl	8002748 <Button>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4619      	mov	r1, r3
 80033b8:	4803      	ldr	r0, [pc, #12]	@ (80033c8 <weatherStation2+0x348>)
 80033ba:	f002 fc91 	bl	8005ce0 <lcdPrintf>
	return 0;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033c8:	0801029c 	.word	0x0801029c
 80033cc:	20000034 	.word	0x20000034
 80033d0:	2000002c 	.word	0x2000002c
 80033d4:	0801032c 	.word	0x0801032c
 80033d8:	20000024 	.word	0x20000024
 80033dc:	08010320 	.word	0x08010320
 80033e0:	2000001c 	.word	0x2000001c
 80033e4:	08010324 	.word	0x08010324
 80033e8:	0801fe08 	.word	0x0801fe08
 80033ec:	08020a70 	.word	0x08020a70
 80033f0:	0802ccf0 	.word	0x0802ccf0

080033f4 <displayNextDay2>:
unsigned long displayNextDay2(uint16_t x, uint16_t y, const char* day, const char* month,  int date, int temp, int iconID)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60ba      	str	r2, [r7, #8]
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	4603      	mov	r3, r0
 8003400:	81fb      	strh	r3, [r7, #14]
 8003402:	460b      	mov	r3, r1
 8003404:	81bb      	strh	r3, [r7, #12]

	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8003406:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800340a:	2000      	movs	r0, #0
 800340c:	f002 fd04 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font12 );
 8003410:	482a      	ldr	r0, [pc, #168]	@ (80034bc <displayNextDay2+0xc8>)
 8003412:	f002 fcf1 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( x , y );
 8003416:	89ba      	ldrh	r2, [r7, #12]
 8003418:	89fb      	ldrh	r3, [r7, #14]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f002 fd7b 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( day );
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f002 fc5c 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( x + 65  , y + 6 );
 8003428:	89fb      	ldrh	r3, [r7, #14]
 800342a:	3341      	adds	r3, #65	@ 0x41
 800342c:	b29a      	uxth	r2, r3
 800342e:	89bb      	ldrh	r3, [r7, #12]
 8003430:	3306      	adds	r3, #6
 8003432:	b29b      	uxth	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f002 fd6e 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", temp );
 800343c:	69f9      	ldr	r1, [r7, #28]
 800343e:	4820      	ldr	r0, [pc, #128]	@ (80034c0 <displayNextDay2+0xcc>)
 8003440:	f002 fc4e 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage( x + 80 , y + 6, &iconTempMinor2);
 8003444:	89fb      	ldrh	r3, [r7, #14]
 8003446:	3350      	adds	r3, #80	@ 0x50
 8003448:	b298      	uxth	r0, r3
 800344a:	89bb      	ldrh	r3, [r7, #12]
 800344c:	3306      	adds	r3, #6
 800344e:	b29b      	uxth	r3, r3
 8003450:	4a1c      	ldr	r2, [pc, #112]	@ (80034c4 <displayNextDay2+0xd0>)
 8003452:	4619      	mov	r1, r3
 8003454:	f002 fb46 	bl	8005ae4 <lcdDrawImage>
	lcdSetTextFont( & Font8 );
 8003458:	481b      	ldr	r0, [pc, #108]	@ (80034c8 <displayNextDay2+0xd4>)
 800345a:	f002 fccd 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( x - 3 , y + 18);
 800345e:	89fb      	ldrh	r3, [r7, #14]
 8003460:	3b03      	subs	r3, #3
 8003462:	b29a      	uxth	r2, r3
 8003464:	89bb      	ldrh	r3, [r7, #12]
 8003466:	3312      	adds	r3, #18
 8003468:	b29b      	uxth	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f002 fd53 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( month );
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f002 fc34 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( x + 17, y + 18 );
 8003478:	89fb      	ldrh	r3, [r7, #14]
 800347a:	3311      	adds	r3, #17
 800347c:	b29a      	uxth	r2, r3
 800347e:	89bb      	ldrh	r3, [r7, #12]
 8003480:	3312      	adds	r3, #18
 8003482:	b29b      	uxth	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f002 fd46 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", date );
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	480c      	ldr	r0, [pc, #48]	@ (80034c0 <displayNextDay2+0xcc>)
 8003490:	f002 fc26 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , iconWeatherMinor(x + 35  , y + 2, iconID ));
 8003494:	89fb      	ldrh	r3, [r7, #14]
 8003496:	3323      	adds	r3, #35	@ 0x23
 8003498:	b298      	uxth	r0, r3
 800349a:	89bb      	ldrh	r3, [r7, #12]
 800349c:	3302      	adds	r3, #2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	6a3a      	ldr	r2, [r7, #32]
 80034a2:	4619      	mov	r1, r3
 80034a4:	f000 f986 	bl	80037b4 <iconWeatherMinor>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4619      	mov	r1, r3
 80034ac:	4807      	ldr	r0, [pc, #28]	@ (80034cc <displayNextDay2+0xd8>)
 80034ae:	f002 fc17 	bl	8005ce0 <lcdPrintf>

	return 0;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2000001c 	.word	0x2000001c
 80034c0:	08010320 	.word	0x08010320
 80034c4:	08020008 	.word	0x08020008
 80034c8:	2000003c 	.word	0x2000003c
 80034cc:	0801029c 	.word	0x0801029c

080034d0 <displayNextDay1>:
unsigned long displayNextDay1(uint16_t x, uint16_t y, const char* day, const char* month, int date, int temp, int iconID)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60ba      	str	r2, [r7, #8]
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	4603      	mov	r3, r0
 80034dc:	81fb      	strh	r3, [r7, #14]
 80034de:	460b      	mov	r3, r1
 80034e0:	81bb      	strh	r3, [r7, #12]

	lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_3);
 80034e2:	f649 61d8 	movw	r1, #40664	@ 0x9ed8
 80034e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80034ea:	f002 fc95 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font12 );
 80034ee:	482b      	ldr	r0, [pc, #172]	@ (800359c <displayNextDay1+0xcc>)
 80034f0:	f002 fc82 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( x , y );
 80034f4:	89ba      	ldrh	r2, [r7, #12]
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fd0c 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( day );
 8003500:	68b8      	ldr	r0, [r7, #8]
 8003502:	f002 fbed 	bl	8005ce0 <lcdPrintf>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 8003506:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800350a:	2000      	movs	r0, #0
 800350c:	f002 fc84 	bl	8005e18 <lcdSetTextColor>
	lcdSetCursor( x  , y + 53 );
 8003510:	89bb      	ldrh	r3, [r7, #12]
 8003512:	3335      	adds	r3, #53	@ 0x35
 8003514:	b29a      	uxth	r2, r3
 8003516:	89fb      	ldrh	r3, [r7, #14]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f002 fcfc 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", temp );
 8003520:	69f9      	ldr	r1, [r7, #28]
 8003522:	481f      	ldr	r0, [pc, #124]	@ (80035a0 <displayNextDay1+0xd0>)
 8003524:	f002 fbdc 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage( x + 13 , y + 53, &iconTempMinor2);
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	330d      	adds	r3, #13
 800352c:	b298      	uxth	r0, r3
 800352e:	89bb      	ldrh	r3, [r7, #12]
 8003530:	3335      	adds	r3, #53	@ 0x35
 8003532:	b29b      	uxth	r3, r3
 8003534:	4a1b      	ldr	r2, [pc, #108]	@ (80035a4 <displayNextDay1+0xd4>)
 8003536:	4619      	mov	r1, r3
 8003538:	f002 fad4 	bl	8005ae4 <lcdDrawImage>
	lcdSetTextFont( & Font8 );
 800353c:	481a      	ldr	r0, [pc, #104]	@ (80035a8 <displayNextDay1+0xd8>)
 800353e:	f002 fc5b 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( x - 3 , y + 18);
 8003542:	89fb      	ldrh	r3, [r7, #14]
 8003544:	3b03      	subs	r3, #3
 8003546:	b29a      	uxth	r2, r3
 8003548:	89bb      	ldrh	r3, [r7, #12]
 800354a:	3312      	adds	r3, #18
 800354c:	b29b      	uxth	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f002 fce1 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( month );
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f002 fbc2 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( x + 17, y + 18 );
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	3311      	adds	r3, #17
 8003560:	b29a      	uxth	r2, r3
 8003562:	89bb      	ldrh	r3, [r7, #12]
 8003564:	3312      	adds	r3, #18
 8003566:	b29b      	uxth	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f002 fcd4 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", date );
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	480b      	ldr	r0, [pc, #44]	@ (80035a0 <displayNextDay1+0xd0>)
 8003574:	f002 fbb4 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , iconWeatherMinor(x  , y + 28, iconID ));
 8003578:	89bb      	ldrh	r3, [r7, #12]
 800357a:	331c      	adds	r3, #28
 800357c:	b299      	uxth	r1, r3
 800357e:	89fb      	ldrh	r3, [r7, #14]
 8003580:	6a3a      	ldr	r2, [r7, #32]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f916 	bl	80037b4 <iconWeatherMinor>
 8003588:	4603      	mov	r3, r0
 800358a:	4619      	mov	r1, r3
 800358c:	4807      	ldr	r0, [pc, #28]	@ (80035ac <displayNextDay1+0xdc>)
 800358e:	f002 fba7 	bl	8005ce0 <lcdPrintf>

	return 0;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	2000001c 	.word	0x2000001c
 80035a0:	08010320 	.word	0x08010320
 80035a4:	08020008 	.word	0x08020008
 80035a8:	2000003c 	.word	0x2000003c
 80035ac:	0801029c 	.word	0x0801029c

080035b0 <displayNextDay>:
unsigned long displayNextDay(uint16_t x, uint16_t y, const char* day, const char* month, int date, int temp, int iconID)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60ba      	str	r2, [r7, #8]
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	4603      	mov	r3, r0
 80035bc:	81fb      	strh	r3, [r7, #14]
 80035be:	460b      	mov	r3, r1
 80035c0:	81bb      	strh	r3, [r7, #12]

	lcdSetTextColor(COLOR_WHITE, COLOR_BackGround_2);
 80035c2:	f248 51fc 	movw	r1, #34300	@ 0x85fc
 80035c6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80035ca:	f002 fc25 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font12 );
 80035ce:	482a      	ldr	r0, [pc, #168]	@ (8003678 <displayNextDay+0xc8>)
 80035d0:	f002 fc12 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( x , y );
 80035d4:	89ba      	ldrh	r2, [r7, #12]
 80035d6:	89fb      	ldrh	r3, [r7, #14]
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f002 fc9c 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( day );
 80035e0:	68b8      	ldr	r0, [r7, #8]
 80035e2:	f002 fb7d 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( x , y + 50 );
 80035e6:	89bb      	ldrh	r3, [r7, #12]
 80035e8:	3332      	adds	r3, #50	@ 0x32
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	89fb      	ldrh	r3, [r7, #14]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 fc91 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", temp );
 80035f6:	69f9      	ldr	r1, [r7, #28]
 80035f8:	4820      	ldr	r0, [pc, #128]	@ (800367c <displayNextDay+0xcc>)
 80035fa:	f002 fb71 	bl	8005ce0 <lcdPrintf>
	lcdDrawImage( x + 13 , y + 50, & iconTempMinor);
 80035fe:	89fb      	ldrh	r3, [r7, #14]
 8003600:	330d      	adds	r3, #13
 8003602:	b298      	uxth	r0, r3
 8003604:	89bb      	ldrh	r3, [r7, #12]
 8003606:	3332      	adds	r3, #50	@ 0x32
 8003608:	b29b      	uxth	r3, r3
 800360a:	4a1d      	ldr	r2, [pc, #116]	@ (8003680 <displayNextDay+0xd0>)
 800360c:	4619      	mov	r1, r3
 800360e:	f002 fa69 	bl	8005ae4 <lcdDrawImage>
	lcdSetTextFont( & Font8 );
 8003612:	481c      	ldr	r0, [pc, #112]	@ (8003684 <displayNextDay+0xd4>)
 8003614:	f002 fbf0 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( x - 3 , y + 15);
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	3b03      	subs	r3, #3
 800361c:	b29a      	uxth	r2, r3
 800361e:	89bb      	ldrh	r3, [r7, #12]
 8003620:	330f      	adds	r3, #15
 8003622:	b29b      	uxth	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f002 fc76 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( month );
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f002 fb57 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor( x + 17, y + 15 );
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	3311      	adds	r3, #17
 8003636:	b29a      	uxth	r2, r3
 8003638:	89bb      	ldrh	r3, [r7, #12]
 800363a:	330f      	adds	r3, #15
 800363c:	b29b      	uxth	r3, r3
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f002 fc69 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "%2u", date );
 8003646:	69b9      	ldr	r1, [r7, #24]
 8003648:	480c      	ldr	r0, [pc, #48]	@ (800367c <displayNextDay+0xcc>)
 800364a:	f002 fb49 	bl	8005ce0 <lcdPrintf>
	lcdPrintf( "" , iconWeatherMinor(x - 3 , y + 25, iconID ));
 800364e:	89fb      	ldrh	r3, [r7, #14]
 8003650:	3b03      	subs	r3, #3
 8003652:	b298      	uxth	r0, r3
 8003654:	89bb      	ldrh	r3, [r7, #12]
 8003656:	3319      	adds	r3, #25
 8003658:	b29b      	uxth	r3, r3
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	4619      	mov	r1, r3
 800365e:	f000 f8a9 	bl	80037b4 <iconWeatherMinor>
 8003662:	4603      	mov	r3, r0
 8003664:	4619      	mov	r1, r3
 8003666:	4808      	ldr	r0, [pc, #32]	@ (8003688 <displayNextDay+0xd8>)
 8003668:	f002 fb3a 	bl	8005ce0 <lcdPrintf>

	return 0;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000001c 	.word	0x2000001c
 800367c:	08010320 	.word	0x08010320
 8003680:	0801ff08 	.word	0x0801ff08
 8003684:	2000003c 	.word	0x2000003c
 8003688:	0801029c 	.word	0x0801029c

0800368c <iconWeather>:
unsigned  long  iconWeather (uint16_t x, uint16_t y, int signal)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	603a      	str	r2, [r7, #0]
 8003696:	80fb      	strh	r3, [r7, #6]
 8003698:	460b      	mov	r3, r1
 800369a:	80bb      	strh	r3, [r7, #4]
		if(signal == 0 || signal == 1){
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <iconWeather+0x1c>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <iconWeather+0x2a>
				lcdDrawImage( x , y, & iconSun);
 80036a8:	88b9      	ldrh	r1, [r7, #4]
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	4a3b      	ldr	r2, [pc, #236]	@ (800379c <iconWeather+0x110>)
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 fa18 	bl	8005ae4 <lcdDrawImage>
 80036b4:	e06d      	b.n	8003792 <iconWeather+0x106>
		}else if (signal == 2 || signal == 3 || signal == 45 || signal == 48){
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d008      	beq.n	80036ce <iconWeather+0x42>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d005      	beq.n	80036ce <iconWeather+0x42>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b2d      	cmp	r3, #45	@ 0x2d
 80036c6:	d002      	beq.n	80036ce <iconWeather+0x42>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b30      	cmp	r3, #48	@ 0x30
 80036cc:	d106      	bne.n	80036dc <iconWeather+0x50>
				lcdDrawImage( x , y, & iconCloud);
 80036ce:	88b9      	ldrh	r1, [r7, #4]
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4a33      	ldr	r2, [pc, #204]	@ (80037a0 <iconWeather+0x114>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f002 fa05 	bl	8005ae4 <lcdDrawImage>
 80036da:	e05a      	b.n	8003792 <iconWeather+0x106>
		}else if (  signal == 51 || signal == 53 || signal == 55 || signal == 61
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b33      	cmp	r3, #51	@ 0x33
 80036e0:	d017      	beq.n	8003712 <iconWeather+0x86>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b35      	cmp	r3, #53	@ 0x35
 80036e6:	d014      	beq.n	8003712 <iconWeather+0x86>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b37      	cmp	r3, #55	@ 0x37
 80036ec:	d011      	beq.n	8003712 <iconWeather+0x86>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b3d      	cmp	r3, #61	@ 0x3d
 80036f2:	d00e      	beq.n	8003712 <iconWeather+0x86>
				 || signal == 63 || signal == 65 || signal == 80 || signal == 81 || signal == 82 ){
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80036f8:	d00b      	beq.n	8003712 <iconWeather+0x86>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b41      	cmp	r3, #65	@ 0x41
 80036fe:	d008      	beq.n	8003712 <iconWeather+0x86>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b50      	cmp	r3, #80	@ 0x50
 8003704:	d005      	beq.n	8003712 <iconWeather+0x86>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b51      	cmp	r3, #81	@ 0x51
 800370a:	d002      	beq.n	8003712 <iconWeather+0x86>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b52      	cmp	r3, #82	@ 0x52
 8003710:	d106      	bne.n	8003720 <iconWeather+0x94>
				lcdDrawImage( x , y, & iconRain);
 8003712:	88b9      	ldrh	r1, [r7, #4]
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	4a23      	ldr	r2, [pc, #140]	@ (80037a4 <iconWeather+0x118>)
 8003718:	4618      	mov	r0, r3
 800371a:	f002 f9e3 	bl	8005ae4 <lcdDrawImage>
 800371e:	e038      	b.n	8003792 <iconWeather+0x106>
		}else if ( signal == 71 || signal == 73 || signal == 75 ){
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b47      	cmp	r3, #71	@ 0x47
 8003724:	d005      	beq.n	8003732 <iconWeather+0xa6>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b49      	cmp	r3, #73	@ 0x49
 800372a:	d002      	beq.n	8003732 <iconWeather+0xa6>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b4b      	cmp	r3, #75	@ 0x4b
 8003730:	d106      	bne.n	8003740 <iconWeather+0xb4>
				lcdDrawImage( x , y, & iconFreezing);
 8003732:	88b9      	ldrh	r1, [r7, #4]
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <iconWeather+0x11c>)
 8003738:	4618      	mov	r0, r3
 800373a:	f002 f9d3 	bl	8005ae4 <lcdDrawImage>
 800373e:	e028      	b.n	8003792 <iconWeather+0x106>
		}else if ( signal == 56 || signal == 57 || signal == 66 || signal == 67 ){
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b38      	cmp	r3, #56	@ 0x38
 8003744:	d008      	beq.n	8003758 <iconWeather+0xcc>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b39      	cmp	r3, #57	@ 0x39
 800374a:	d005      	beq.n	8003758 <iconWeather+0xcc>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b42      	cmp	r3, #66	@ 0x42
 8003750:	d002      	beq.n	8003758 <iconWeather+0xcc>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b43      	cmp	r3, #67	@ 0x43
 8003756:	d106      	bne.n	8003766 <iconWeather+0xda>
				lcdDrawImage( x , y, & iconFreezingRain);
 8003758:	88b9      	ldrh	r1, [r7, #4]
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	4a13      	ldr	r2, [pc, #76]	@ (80037ac <iconWeather+0x120>)
 800375e:	4618      	mov	r0, r3
 8003760:	f002 f9c0 	bl	8005ae4 <lcdDrawImage>
 8003764:	e015      	b.n	8003792 <iconWeather+0x106>
		}else if ( signal == 95 || signal == 96 || signal == 99 ){
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b5f      	cmp	r3, #95	@ 0x5f
 800376a:	d005      	beq.n	8003778 <iconWeather+0xec>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b60      	cmp	r3, #96	@ 0x60
 8003770:	d002      	beq.n	8003778 <iconWeather+0xec>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b63      	cmp	r3, #99	@ 0x63
 8003776:	d106      	bne.n	8003786 <iconWeather+0xfa>
				lcdDrawImage( x , y, & iconThunder);
 8003778:	88b9      	ldrh	r1, [r7, #4]
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	4a0c      	ldr	r2, [pc, #48]	@ (80037b0 <iconWeather+0x124>)
 800377e:	4618      	mov	r0, r3
 8003780:	f002 f9b0 	bl	8005ae4 <lcdDrawImage>
 8003784:	e005      	b.n	8003792 <iconWeather+0x106>
		}else{
				lcdDrawImage( x , y, & iconSun);
 8003786:	88b9      	ldrh	r1, [r7, #4]
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <iconWeather+0x110>)
 800378c:	4618      	mov	r0, r3
 800378e:	f002 f9a9 	bl	8005ae4 <lcdDrawImage>
		}
		return 0;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	08037268 	.word	0x08037268
 80037a0:	0801f3f0 	.word	0x0801f3f0
 80037a4:	08031b1c 	.word	0x08031b1c
 80037a8:	08026e48 	.word	0x08026e48
 80037ac:	0802c0a4 	.word	0x0802c0a4
 80037b0:	0803c4c4 	.word	0x0803c4c4

080037b4 <iconWeatherMinor>:
unsigned  long  iconWeatherMinor (uint16_t x, uint16_t y, int signal)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	603a      	str	r2, [r7, #0]
 80037be:	80fb      	strh	r3, [r7, #6]
 80037c0:	460b      	mov	r3, r1
 80037c2:	80bb      	strh	r3, [r7, #4]
	if(signal == 0 || signal == 1){
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <iconWeatherMinor+0x1c>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <iconWeatherMinor+0x2a>
			lcdDrawImage( x , y, & iconSunMinor);
 80037d0:	88b9      	ldrh	r1, [r7, #4]
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	4a3b      	ldr	r2, [pc, #236]	@ (80038c4 <iconWeatherMinor+0x110>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	f002 f984 	bl	8005ae4 <lcdDrawImage>
 80037dc:	e06d      	b.n	80038ba <iconWeatherMinor+0x106>
	}else if (signal == 2 || signal == 3 || signal == 45 || signal == 48){
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d008      	beq.n	80037f6 <iconWeatherMinor+0x42>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d005      	beq.n	80037f6 <iconWeatherMinor+0x42>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b2d      	cmp	r3, #45	@ 0x2d
 80037ee:	d002      	beq.n	80037f6 <iconWeatherMinor+0x42>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b30      	cmp	r3, #48	@ 0x30
 80037f4:	d106      	bne.n	8003804 <iconWeatherMinor+0x50>
			lcdDrawImage( x , y, & iconCloudMinor);
 80037f6:	88b9      	ldrh	r1, [r7, #4]
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	4a33      	ldr	r2, [pc, #204]	@ (80038c8 <iconWeatherMinor+0x114>)
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 f971 	bl	8005ae4 <lcdDrawImage>
 8003802:	e05a      	b.n	80038ba <iconWeatherMinor+0x106>
	}else if (  signal == 51 || signal == 53 || signal == 55 || signal == 61
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b33      	cmp	r3, #51	@ 0x33
 8003808:	d017      	beq.n	800383a <iconWeatherMinor+0x86>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b35      	cmp	r3, #53	@ 0x35
 800380e:	d014      	beq.n	800383a <iconWeatherMinor+0x86>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b37      	cmp	r3, #55	@ 0x37
 8003814:	d011      	beq.n	800383a <iconWeatherMinor+0x86>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b3d      	cmp	r3, #61	@ 0x3d
 800381a:	d00e      	beq.n	800383a <iconWeatherMinor+0x86>
			 || signal == 63 || signal == 65 || signal == 80 || signal == 81 || signal == 82 ){
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003820:	d00b      	beq.n	800383a <iconWeatherMinor+0x86>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b41      	cmp	r3, #65	@ 0x41
 8003826:	d008      	beq.n	800383a <iconWeatherMinor+0x86>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b50      	cmp	r3, #80	@ 0x50
 800382c:	d005      	beq.n	800383a <iconWeatherMinor+0x86>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b51      	cmp	r3, #81	@ 0x51
 8003832:	d002      	beq.n	800383a <iconWeatherMinor+0x86>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b52      	cmp	r3, #82	@ 0x52
 8003838:	d106      	bne.n	8003848 <iconWeatherMinor+0x94>
			lcdDrawImage( x , y, & iconRainMinor);
 800383a:	88b9      	ldrh	r1, [r7, #4]
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	4a23      	ldr	r2, [pc, #140]	@ (80038cc <iconWeatherMinor+0x118>)
 8003840:	4618      	mov	r0, r3
 8003842:	f002 f94f 	bl	8005ae4 <lcdDrawImage>
 8003846:	e038      	b.n	80038ba <iconWeatherMinor+0x106>
	}else if ( signal == 71 || signal == 73 || signal == 75 ){
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b47      	cmp	r3, #71	@ 0x47
 800384c:	d005      	beq.n	800385a <iconWeatherMinor+0xa6>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b49      	cmp	r3, #73	@ 0x49
 8003852:	d002      	beq.n	800385a <iconWeatherMinor+0xa6>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b4b      	cmp	r3, #75	@ 0x4b
 8003858:	d106      	bne.n	8003868 <iconWeatherMinor+0xb4>
			lcdDrawImage( x , y, & iconFreezingMinor);
 800385a:	88b9      	ldrh	r1, [r7, #4]
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <iconWeatherMinor+0x11c>)
 8003860:	4618      	mov	r0, r3
 8003862:	f002 f93f 	bl	8005ae4 <lcdDrawImage>
 8003866:	e028      	b.n	80038ba <iconWeatherMinor+0x106>
	}else if ( signal == 56 || signal == 57 || signal == 66 || signal == 67 ){
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b38      	cmp	r3, #56	@ 0x38
 800386c:	d008      	beq.n	8003880 <iconWeatherMinor+0xcc>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b39      	cmp	r3, #57	@ 0x39
 8003872:	d005      	beq.n	8003880 <iconWeatherMinor+0xcc>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b42      	cmp	r3, #66	@ 0x42
 8003878:	d002      	beq.n	8003880 <iconWeatherMinor+0xcc>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b43      	cmp	r3, #67	@ 0x43
 800387e:	d106      	bne.n	800388e <iconWeatherMinor+0xda>
			lcdDrawImage( x , y, & iconFreezingRainMinor);
 8003880:	88b9      	ldrh	r1, [r7, #4]
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	4a13      	ldr	r2, [pc, #76]	@ (80038d4 <iconWeatherMinor+0x120>)
 8003886:	4618      	mov	r0, r3
 8003888:	f002 f92c 	bl	8005ae4 <lcdDrawImage>
 800388c:	e015      	b.n	80038ba <iconWeatherMinor+0x106>
	}else if ( signal == 95 || signal == 96 || signal == 99 ){
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b5f      	cmp	r3, #95	@ 0x5f
 8003892:	d005      	beq.n	80038a0 <iconWeatherMinor+0xec>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b60      	cmp	r3, #96	@ 0x60
 8003898:	d002      	beq.n	80038a0 <iconWeatherMinor+0xec>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b63      	cmp	r3, #99	@ 0x63
 800389e:	d106      	bne.n	80038ae <iconWeatherMinor+0xfa>
			lcdDrawImage( x , y, & iconThunderMinor);
 80038a0:	88b9      	ldrh	r1, [r7, #4]
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	4a0c      	ldr	r2, [pc, #48]	@ (80038d8 <iconWeatherMinor+0x124>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 f91c 	bl	8005ae4 <lcdDrawImage>
 80038ac:	e005      	b.n	80038ba <iconWeatherMinor+0x106>
	}else{
			lcdDrawImage( x , y, & iconSunMinor);
 80038ae:	88b9      	ldrh	r1, [r7, #4]
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	4a04      	ldr	r2, [pc, #16]	@ (80038c4 <iconWeatherMinor+0x110>)
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 f915 	bl	8005ae4 <lcdDrawImage>
	}
	return 0;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	08037698 	.word	0x08037698
 80038c8:	0802201c 	.word	0x0802201c
 80038cc:	08031f4c 	.word	0x08031f4c
 80038d0:	08027278 	.word	0x08027278
 80038d4:	0802c4d4 	.word	0x0802c4d4
 80038d8:	0803c8f4 	.word	0x0803c8f4

080038dc <setCalibrationMatrix>:
#include "calibrate.h"

int setCalibrationMatrix( POINT_T * displayPtr,
						  POINT_T * screenPtr,
                          MATRIX * matrixPtr)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]

    int  retValue = OK ;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]



    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3310      	adds	r3, #16
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	3208      	adds	r2, #8
 80038fc:	6851      	ldr	r1, [r2, #4]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	3210      	adds	r2, #16
 8003902:	6852      	ldr	r2, [r2, #4]
 8003904:	1a8a      	subs	r2, r1, r2
 8003906:	fb03 f202 	mul.w	r2, r3, r2
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3308      	adds	r3, #8
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3310      	adds	r3, #16
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1acb      	subs	r3, r1, r3
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	6848      	ldr	r0, [r1, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	3110      	adds	r1, #16
 8003920:	6849      	ldr	r1, [r1, #4]
 8003922:	1a41      	subs	r1, r0, r1
 8003924:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8003928:	1ad2      	subs	r2, r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	619a      	str	r2, [r3, #24]

    if( matrixPtr->Divider == 0 )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <setCalibrationMatrix+0x62>
    {
        retValue = NOT_OK ;
 8003936:	f04f 33ff 	mov.w	r3, #4294967295
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e105      	b.n	8003b4a <setCalibrationMatrix+0x26e>
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3310      	adds	r3, #16
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	3208      	adds	r2, #8
 800394e:	6851      	ldr	r1, [r2, #4]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	3210      	adds	r2, #16
 8003954:	6852      	ldr	r2, [r2, #4]
 8003956:	1a8a      	subs	r2, r1, r2
 8003958:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3308      	adds	r3, #8
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3310      	adds	r3, #16
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	1acb      	subs	r3, r1, r3
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	6848      	ldr	r0, [r1, #4]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	3110      	adds	r1, #16
 8003972:	6849      	ldr	r1, [r1, #4]
 8003974:	1a41      	subs	r1, r0, r1
 8003976:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 800397a:	1ad2      	subs	r2, r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	601a      	str	r2, [r3, #0]

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3310      	adds	r3, #16
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	3208      	adds	r2, #8
 8003990:	6811      	ldr	r1, [r2, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	3210      	adds	r2, #16
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	1a8a      	subs	r2, r1, r2
 800399a:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3310      	adds	r3, #16
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1acb      	subs	r3, r1, r3
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	3108      	adds	r1, #8
 80039ae:	6808      	ldr	r0, [r1, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	3110      	adds	r1, #16
 80039b4:	6809      	ldr	r1, [r1, #0]
 80039b6:	1a41      	subs	r1, r0, r1
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	605a      	str	r2, [r3, #4]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3310      	adds	r3, #16
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	3208      	adds	r2, #8
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	fb03 f202 	mul.w	r2, r3, r2
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3308      	adds	r3, #8
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	3110      	adds	r1, #16
 80039dc:	6809      	ldr	r1, [r1, #0]
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	6852      	ldr	r2, [r2, #4]
 80039e8:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68f9      	ldr	r1, [r7, #12]
 80039f2:	3110      	adds	r1, #16
 80039f4:	6809      	ldr	r1, [r1, #0]
 80039f6:	fb03 f101 	mul.w	r1, r3, r1
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3310      	adds	r3, #16
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	fb00 f303 	mul.w	r3, r0, r3
 8003a08:	1acb      	subs	r3, r1, r3
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	3108      	adds	r1, #8
 8003a0e:	6849      	ldr	r1, [r1, #4]
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8003a14:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68f9      	ldr	r1, [r7, #12]
 8003a1e:	6809      	ldr	r1, [r1, #0]
 8003a20:	fb03 f101 	mul.w	r1, r3, r1
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	3008      	adds	r0, #8
 8003a2c:	6800      	ldr	r0, [r0, #0]
 8003a2e:	fb00 f303 	mul.w	r3, r0, r3
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	3110      	adds	r1, #16
 8003a38:	6849      	ldr	r1, [r1, #4]
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8003a3e:	441a      	add	r2, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3310      	adds	r3, #16
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	3208      	adds	r2, #8
 8003a54:	6851      	ldr	r1, [r2, #4]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	3210      	adds	r2, #16
 8003a5a:	6852      	ldr	r2, [r2, #4]
 8003a5c:	1a8a      	subs	r2, r1, r2
 8003a5e:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3308      	adds	r3, #8
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	1acb      	subs	r3, r1, r3
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	6848      	ldr	r0, [r1, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	3110      	adds	r1, #16
 8003a78:	6849      	ldr	r1, [r1, #4]
 8003a7a:	1a41      	subs	r1, r0, r1
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60da      	str	r2, [r3, #12]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	3310      	adds	r3, #16
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	3208      	adds	r2, #8
 8003a96:	6851      	ldr	r1, [r2, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	3210      	adds	r2, #16
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	1a8a      	subs	r2, r1, r2
 8003aa0:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3310      	adds	r3, #16
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	1acb      	subs	r3, r1, r3
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	3108      	adds	r1, #8
 8003ab4:	6808      	ldr	r0, [r1, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	3110      	adds	r1, #16
 8003aba:	6809      	ldr	r1, [r1, #0]
 8003abc:	1a41      	subs	r1, r0, r1
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 8003ac2:	1ad2      	subs	r2, r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	611a      	str	r2, [r3, #16]

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3310      	adds	r3, #16
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	3208      	adds	r2, #8
 8003ad2:	6852      	ldr	r2, [r2, #4]
 8003ad4:	fb03 f202 	mul.w	r2, r3, r2
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3308      	adds	r3, #8
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	3110      	adds	r1, #16
 8003ae2:	6849      	ldr	r1, [r1, #4]
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	6852      	ldr	r2, [r2, #4]
 8003aee:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	3110      	adds	r1, #16
 8003afa:	6849      	ldr	r1, [r1, #4]
 8003afc:	fb03 f101 	mul.w	r1, r3, r1
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3310      	adds	r3, #16
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	6840      	ldr	r0, [r0, #4]
 8003b0a:	fb00 f303 	mul.w	r3, r0, r3
 8003b0e:	1acb      	subs	r3, r1, r3
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	3108      	adds	r1, #8
 8003b14:	6849      	ldr	r1, [r1, #4]
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8003b1a:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68f9      	ldr	r1, [r7, #12]
 8003b24:	6849      	ldr	r1, [r1, #4]
 8003b26:	fb03 f101 	mul.w	r1, r3, r1
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	3008      	adds	r0, #8
 8003b32:	6840      	ldr	r0, [r0, #4]
 8003b34:	fb00 f303 	mul.w	r3, r0, r3
 8003b38:	1acb      	subs	r3, r1, r3
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	3110      	adds	r1, #16
 8003b3e:	6849      	ldr	r1, [r1, #4]
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8003b44:	441a      	add	r2, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	615a      	str	r2, [r3, #20]
    }

    return( retValue ) ;
 8003b4a:	697b      	ldr	r3, [r7, #20]

} /* end of setCalibrationMatrix() */
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <getDisplayPoint>:
 *
 */
int getDisplayPoint( POINT_T * displayPtr,
					 POINT_T * screenPtr,
                     MATRIX * matrixPtr )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
    int retValue = OK ;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]


    if( matrixPtr->Divider != 0 )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d02c      	beq.n	8003bca <getDisplayPoint+0x72>
        /* Operation order is important since we are doing integer */
        /*  math. Make sure you add all terms together before      */
        /*  dividing, so that the remainder is not rounded off     */
        /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	fb03 f202 	mul.w	r2, r3, r2
                          (matrixPtr->Bn * screenPtr->y) +
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	6849      	ldr	r1, [r1, #4]
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 8003b88:	441a      	add	r2, r3
                           matrixPtr->Cn
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
                          (matrixPtr->Bn * screenPtr->y) +
 8003b8e:	441a      	add	r2, r3
                        ) / matrixPtr->Divider ;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	fb92 f2f3 	sdiv	r2, r2, r3
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]

        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	fb03 f202 	mul.w	r2, r3, r2
                          (matrixPtr->En * screenPtr->y) +
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	6849      	ldr	r1, [r1, #4]
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 8003bb4:	441a      	add	r2, r3
                           matrixPtr->Fn
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
                          (matrixPtr->En * screenPtr->y) +
 8003bba:	441a      	add	r2, r3
                        ) / matrixPtr->Divider ;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	fb92 f2f3 	sdiv	r2, r2, r3
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	e002      	b.n	8003bd0 <getDisplayPoint+0x78>
    }
    else
    {
        retValue = NOT_OK;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	617b      	str	r3, [r7, #20]
    }

    return (retValue);
 8003bd0:	697b      	ldr	r3, [r7, #20]

} /* end of getDisplayPoint() */
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <creep>:
#include <time.h>
int countYMiniBoss=0;
int countYboss=0;
int bulletx=1;
void creep(struct creepStruct *creepData, struct mainStruct *mainSpeedD)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
    switch (creepData->life)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <creep+0x1a>
    {
    case 0:
        creepDeath(creepData);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f80b 	bl	8003c0c <creepDeath>
        break;
 8003bf6:	e004      	b.n	8003c02 <creep+0x24>
    default:
        creepAlive(creepData, mainSpeedD);
 8003bf8:	6839      	ldr	r1, [r7, #0]
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f92e 	bl	8003e5c <creepAlive>
        break;
 8003c00:	bf00      	nop
    }
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <creepDeath>:

void creepDeath(struct creepStruct *creepData)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
    if (creepData->deathCooldown == 10)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b0a      	cmp	r3, #10
 8003c1a:	d113      	bne.n	8003c44 <creepDeath+0x38>
    {
        creepData->deathCooldown = 0;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
        lcdFillRect(creepData->x, creepData->y, 20, 20, COLOR_BLACK);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	b218      	sxth	r0, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	b219      	sxth	r1, r3
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2314      	movs	r3, #20
 8003c34:	2214      	movs	r2, #20
 8003c36:	f001 fef9 	bl	8005a2c <lcdFillRect>
        creepData->y = 321; // Đưa kẻ địch ra khỏi màn hình
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f240 1241 	movw	r2, #321	@ 0x141
 8003c40:	605a      	str	r2, [r3, #4]
            lcdDrawImage(creepData->x, creepData->y, &iconPlaneEnemy);
            lcdDrawImage(creepData->x, creepData->y, &iconSmoke);
            creepData->deathCooldown += 1;
        }
    }
}
 8003c42:	e01d      	b.n	8003c80 <creepDeath+0x74>
        if (creepData->y < 320)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003c4c:	da18      	bge.n	8003c80 <creepDeath+0x74>
            lcdDrawImage(creepData->x, creepData->y, &iconPlaneEnemy);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b298      	uxth	r0, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c88 <creepDeath+0x7c>)
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f001 ff41 	bl	8005ae4 <lcdDrawImage>
            lcdDrawImage(creepData->x, creepData->y, &iconSmoke);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	b298      	uxth	r0, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	4a07      	ldr	r2, [pc, #28]	@ (8003c8c <creepDeath+0x80>)
 8003c70:	4619      	mov	r1, r3
 8003c72:	f001 ff37 	bl	8005ae4 <lcdDrawImage>
            creepData->deathCooldown += 1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60da      	str	r2, [r3, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	08016efc 	.word	0x08016efc
 8003c8c:	08014684 	.word	0x08014684

08003c90 <creepCollision>:
void creepCollision(struct creepStruct *creepData, struct mainStruct *mainSpeedD)
{
 8003c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c92:	b08b      	sub	sp, #44	@ 0x2c
 8003c94:	af04      	add	r7, sp, #16
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
    // Kiểm tra va chạm giữa creep và đạn
    for (int i = 0; i < 2; i++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e06b      	b.n	8003d78 <creepCollision+0xe8>
    {
        if (collisionCheck(creepData->x, creepData->y, 20, 20,
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681e      	ldr	r6, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	607b      	str	r3, [r7, #4]
                           mainSpeedD->mainBullet[i].x -mainSpeedD->mainBullet[i].w ,
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	440b      	add	r3, r1
 8003cb8:	330c      	adds	r3, #12
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	68b8      	ldr	r0, [r7, #8]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4403      	add	r3, r0
 8003ccc:	3308      	adds	r3, #8
 8003cce:	681b      	ldr	r3, [r3, #0]
        if (collisionCheck(creepData->x, creepData->y, 20, 20,
 8003cd0:	1ac9      	subs	r1, r1, r3
                           mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 8003cd2:	68b8      	ldr	r0, [r7, #8]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4403      	add	r3, r0
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	68bc      	ldr	r4, [r7, #8]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4423      	add	r3, r4
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	681b      	ldr	r3, [r3, #0]
        if (collisionCheck(creepData->x, creepData->y, 20, 20,
 8003cf8:	1ac0      	subs	r0, r0, r3
                           mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 8003cfa:	68bc      	ldr	r4, [r7, #8]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4423      	add	r3, r4
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	681b      	ldr	r3, [r3, #0]
        if (collisionCheck(creepData->x, creepData->y, 20, 20,
 8003d0e:	005c      	lsls	r4, r3, #1
                           mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 8003d10:	68bd      	ldr	r5, [r7, #8]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	442b      	add	r3, r5
 8003d20:	3308      	adds	r3, #8
 8003d22:	681b      	ldr	r3, [r3, #0]
        if (collisionCheck(creepData->x, creepData->y, 20, 20,
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	9402      	str	r4, [sp, #8]
 8003d2a:	9001      	str	r0, [sp, #4]
 8003d2c:	9100      	str	r1, [sp, #0]
 8003d2e:	2314      	movs	r3, #20
 8003d30:	2214      	movs	r2, #20
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4630      	mov	r0, r6
 8003d36:	f7fe fa3f 	bl	80021b8 <collisionCheck>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d118      	bne.n	8003d72 <creepCollision+0xe2>
        {
            mainSpeedD->mainBullet[i].hit = 1;
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3314      	adds	r3, #20
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
            creepData->life -= mainSpeedD->mainBullet[i].dame;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6899      	ldr	r1, [r3, #8]
 8003d58:	68b8      	ldr	r0, [r7, #8]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4403      	add	r3, r0
 8003d68:	3304      	adds	r3, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	1aca      	subs	r2, r1, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	3301      	adds	r3, #1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	dd90      	ble.n	8003ca0 <creepCollision+0x10>
        }
    }

    // Kiểm tra va chạm giữa creep và main
    if (collisionCheck(rTouchX, rTouchY, 30, 35, creepData->x, creepData->y, 20, 20) == 1)
 8003d7e:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <creepCollision+0x140>)
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	4b14      	ldr	r3, [pc, #80]	@ (8003dd4 <creepCollision+0x144>)
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	6852      	ldr	r2, [r2, #4]
 8003d8e:	2414      	movs	r4, #20
 8003d90:	9403      	str	r4, [sp, #12]
 8003d92:	2414      	movs	r4, #20
 8003d94:	9402      	str	r4, [sp, #8]
 8003d96:	9201      	str	r2, [sp, #4]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2323      	movs	r3, #35	@ 0x23
 8003d9c:	221e      	movs	r2, #30
 8003d9e:	f7fe fa0b 	bl	80021b8 <collisionCheck>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d10f      	bne.n	8003dc8 <creepCollision+0x138>
    {
        creepData->life -= 2;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	1e9a      	subs	r2, r3, #2
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	609a      	str	r2, [r3, #8]
        mainSpeedD->hp -= 1;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	1e5a      	subs	r2, r3, #1
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	63da      	str	r2, [r3, #60]	@ 0x3c
        mainSpeedD->energy -= 100;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	20000008 	.word	0x20000008
 8003dd4:	2000000c 	.word	0x2000000c

08003dd8 <creepMove>:
void creepMove(struct creepStruct *creepData)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	6078      	str	r0, [r7, #4]
    if (creepData->y >= 0)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	db2b      	blt.n	8003e40 <creepMove+0x68>
    {
        lcdFillRect(creepData->x, creepData->y, 20, 20, COLOR_BLACK);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	b218      	sxth	r0, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	b219      	sxth	r1, r3
 8003df4:	2300      	movs	r3, #0
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2314      	movs	r3, #20
 8003dfa:	2214      	movs	r2, #20
 8003dfc:	f001 fe16 	bl	8005a2c <lcdFillRect>
        creepData->y += creepData->spd; // Di chuyển creep xuống
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	441a      	add	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	605a      	str	r2, [r3, #4]
        if (creepData->y + 20 + creepData->spd < 288)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f103 0214 	add.w	r2, r3, #20
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8003e20:	da0a      	bge.n	8003e38 <creepMove+0x60>
        {
            lcdDrawImage(creepData->x, creepData->y, &iconPlaneEnemy);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	b298      	uxth	r0, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e58 <creepMove+0x80>)
 8003e30:	4619      	mov	r1, r3
 8003e32:	f001 fe57 	bl	8005ae4 <lcdDrawImage>
    }
    else
    {
        creepData->y += creepData->spd;
    }
}
 8003e36:	e00a      	b.n	8003e4e <creepMove+0x76>
            creepData->y = 0; // Đưa creep trở lại từ trên màn hình
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	605a      	str	r2, [r3, #4]
}
 8003e3e:	e006      	b.n	8003e4e <creepMove+0x76>
        creepData->y += creepData->spd;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	441a      	add	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	605a      	str	r2, [r3, #4]
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	08016efc 	.word	0x08016efc

08003e5c <creepAlive>:
void creepAlive(struct creepStruct *creepData, struct mainStruct *mainSpeedD)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
    creepCollision(creepData, mainSpeedD);
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff11 	bl	8003c90 <creepCollision>
    creepMove(creepData);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ffb2 	bl	8003dd8 <creepMove>

    // Giới hạn máu
    if (creepData->life < 0)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da02      	bge.n	8003e82 <creepAlive+0x26>
    {
        creepData->life = 0;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
    }
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <miniBoss>:


void miniBoss(struct miniBossStruct *miniBossData, struct mainStruct *mainSpeedD)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
    switch (miniBossData->hp)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d104      	bne.n	8003ea6 <miniBoss+0x1c>
    {
    // Xử lý khi kẻ địch chết
    	case 0:
    	{
    		miniBossDeath(miniBossData);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f811 	bl	8003ec4 <miniBossDeath>
            break;
 8003ea2:	bf00      	nop
			}

		}

    }
}
 8003ea4:	e00a      	b.n	8003ebc <miniBoss+0x32>
			miniBossAlive(miniBossData,mainSpeedD);
 8003ea6:	6839      	ldr	r1, [r7, #0]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f9af 	bl	800420c <miniBossAlive>
			if(miniBossData->hp<=0)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	dc02      	bgt.n	8003ebc <miniBoss+0x32>
				miniBossData->hp=0;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <miniBossDeath>:
void miniBossDeath(struct miniBossStruct *miniBossData)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
	for(int i=0;i<3;i++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e01a      	b.n	8003f08 <miniBossDeath+0x44>
	{
		lcdFillCircle(miniBossData->bulletData[i].x, miniBossData->bulletData[i].y, 2, COLOR_BLACK );
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	440b      	add	r3, r1
 8003ee0:	3310      	adds	r3, #16
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b218      	sxth	r0, r3
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	b219      	sxth	r1, r3
 8003efa:	2300      	movs	r3, #0
 8003efc:	2202      	movs	r2, #2
 8003efe:	f001 fcbd 	bl	800587c <lcdFillCircle>
	for(int i=0;i<3;i++)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3301      	adds	r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	dde1      	ble.n	8003ed2 <miniBossDeath+0xe>
	}
    if (miniBossData->deathCooldown == 10)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b0a      	cmp	r3, #10
 8003f14:	d113      	bne.n	8003f3e <miniBossDeath+0x7a>
    {
    	miniBossData->deathCooldown = 0;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]
        lcdFillRect(miniBossData->x, miniBossData->y, 50, 40, COLOR_BLACK);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	b218      	sxth	r0, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b219      	sxth	r1, r3
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2328      	movs	r3, #40	@ 0x28
 8003f2e:	2232      	movs	r2, #50	@ 0x32
 8003f30:	f001 fd7c 	bl	8005a2c <lcdFillRect>
        miniBossData->y = 321; // Đưa kẻ địch ra khỏi màn hình
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f240 1241 	movw	r2, #321	@ 0x141
 8003f3a:	605a      	str	r2, [r3, #4]
            lcdDrawImage(miniBossData->x, miniBossData->y, &iconSmoke);
            lcdDrawImage(miniBossData->x+25, miniBossData->y+20, &iconSmoke);
            miniBossData-> deathCooldown += 1;
        }
    }
}
 8003f3c:	e02b      	b.n	8003f96 <miniBossDeath+0xd2>
        if (miniBossData->y < 320)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003f46:	da26      	bge.n	8003f96 <miniBossDeath+0xd2>
            lcdDrawImage(miniBossData->x, miniBossData->y, &iconPlaneMiniBoss);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b298      	uxth	r0, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4a12      	ldr	r2, [pc, #72]	@ (8003fa0 <miniBossDeath+0xdc>)
 8003f56:	4619      	mov	r1, r3
 8003f58:	f001 fdc4 	bl	8005ae4 <lcdDrawImage>
            lcdDrawImage(miniBossData->x, miniBossData->y, &iconSmoke);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	b298      	uxth	r0, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa4 <miniBossDeath+0xe0>)
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f001 fdba 	bl	8005ae4 <lcdDrawImage>
            lcdDrawImage(miniBossData->x+25, miniBossData->y+20, &iconSmoke);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3319      	adds	r3, #25
 8003f78:	b298      	uxth	r0, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3314      	adds	r3, #20
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4a07      	ldr	r2, [pc, #28]	@ (8003fa4 <miniBossDeath+0xe0>)
 8003f86:	4619      	mov	r1, r3
 8003f88:	f001 fdac 	bl	8005ae4 <lcdDrawImage>
            miniBossData-> deathCooldown += 1;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60da      	str	r2, [r3, #12]
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	08017ea8 	.word	0x08017ea8
 8003fa4:	08014684 	.word	0x08014684

08003fa8 <miniBossCollision>:

void miniBossCollision(struct miniBossStruct *miniBossData, struct mainStruct *mainSpeedD)
{
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003faa:	b08b      	sub	sp, #44	@ 0x2c
 8003fac:	af04      	add	r7, sp, #16
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
	 // Kiểm tra va chạm giữa kẻ địch và đạn
	for (int i = 0; i < 2; i++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e06b      	b.n	8004090 <miniBossCollision+0xe8>
	{
		if (collisionCheck(miniBossData->x, miniBossData->y, 50, 40,
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681e      	ldr	r6, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	607b      	str	r3, [r7, #4]
		mainSpeedD->mainBullet[i].x - mainSpeedD->mainBullet[i].w,
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4403      	add	r3, r0
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	681b      	ldr	r3, [r3, #0]
		if (collisionCheck(miniBossData->x, miniBossData->y, 50, 40,
 8003fe8:	1ac9      	subs	r1, r1, r3
		mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 8003fea:	68b8      	ldr	r0, [r7, #8]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4413      	add	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4403      	add	r3, r0
 8003ff8:	3310      	adds	r3, #16
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	68bc      	ldr	r4, [r7, #8]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4423      	add	r3, r4
 800400c:	3308      	adds	r3, #8
 800400e:	681b      	ldr	r3, [r3, #0]
		if (collisionCheck(miniBossData->x, miniBossData->y, 50, 40,
 8004010:	1ac0      	subs	r0, r0, r3
		mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 8004012:	68bc      	ldr	r4, [r7, #8]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4423      	add	r3, r4
 8004022:	3308      	adds	r3, #8
 8004024:	681b      	ldr	r3, [r3, #0]
		if (collisionCheck(miniBossData->x, miniBossData->y, 50, 40,
 8004026:	005c      	lsls	r4, r3, #1
		mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 8004028:	68bd      	ldr	r5, [r7, #8]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	4613      	mov	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	442b      	add	r3, r5
 8004038:	3308      	adds	r3, #8
 800403a:	681b      	ldr	r3, [r3, #0]
		if (collisionCheck(miniBossData->x, miniBossData->y, 50, 40,
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	9303      	str	r3, [sp, #12]
 8004040:	9402      	str	r4, [sp, #8]
 8004042:	9001      	str	r0, [sp, #4]
 8004044:	9100      	str	r1, [sp, #0]
 8004046:	2328      	movs	r3, #40	@ 0x28
 8004048:	2232      	movs	r2, #50	@ 0x32
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4630      	mov	r0, r6
 800404e:	f7fe f8b3 	bl	80021b8 <collisionCheck>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d118      	bne.n	800408a <miniBossCollision+0xe2>
		{
			mainSpeedD->mainBullet[i].hit = 1;
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	3314      	adds	r3, #20
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]
		    miniBossData->hp -= mainSpeedD->mainBullet[i].dame;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6899      	ldr	r1, [r3, #8]
 8004070:	68b8      	ldr	r0, [r7, #8]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4403      	add	r3, r0
 8004080:	3304      	adds	r3, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	1aca      	subs	r2, r1, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 2; i++)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	3301      	adds	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b01      	cmp	r3, #1
 8004094:	dd90      	ble.n	8003fb8 <miniBossCollision+0x10>
		}
	}
	// Kiểm tra va chạm giữa kẻ địch và main
	if (collisionCheck(rTouchX,rTouchY,30,35,miniBossData->x, miniBossData->y, 50, 40)==1)
 8004096:	4b37      	ldr	r3, [pc, #220]	@ (8004174 <miniBossCollision+0x1cc>)
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	4b37      	ldr	r3, [pc, #220]	@ (8004178 <miniBossCollision+0x1d0>)
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	6852      	ldr	r2, [r2, #4]
 80040a6:	2428      	movs	r4, #40	@ 0x28
 80040a8:	9403      	str	r4, [sp, #12]
 80040aa:	2432      	movs	r4, #50	@ 0x32
 80040ac:	9402      	str	r4, [sp, #8]
 80040ae:	9201      	str	r2, [sp, #4]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	2323      	movs	r3, #35	@ 0x23
 80040b4:	221e      	movs	r2, #30
 80040b6:	f7fe f87f 	bl	80021b8 <collisionCheck>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d154      	bne.n	800416a <miniBossCollision+0x1c2>
	{
		 miniBossData->hp -= 4;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	1f1a      	subs	r2, r3, #4
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	609a      	str	r2, [r3, #8]
		 mainSpeedD->hp -= 4;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	1f1a      	subs	r2, r3, #4
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	63da      	str	r2, [r3, #60]	@ 0x3c
		 mainSpeedD->energy -= 100;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d8:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	641a      	str	r2, [r3, #64]	@ 0x40
		 mainSpeedD->y+=30;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80040e6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80040ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	edc3 7a01 	vstr	s15, [r3, #4]

		 lcdDrawImage(mainSpeedD->x+15, mainSpeedD->y, &iconSmoke);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	edd3 7a00 	vldr	s15, [r3]
 80040fa:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80040fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004106:	ee17 3a90 	vmov	r3, s15
 800410a:	b298      	uxth	r0, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004116:	ee17 3a90 	vmov	r3, s15
 800411a:	b29b      	uxth	r3, r3
 800411c:	4a17      	ldr	r2, [pc, #92]	@ (800417c <miniBossCollision+0x1d4>)
 800411e:	4619      	mov	r1, r3
 8004120:	f001 fce0 	bl	8005ae4 <lcdDrawImage>
		 lcdDrawImage(mainSpeedD->x+12, mainSpeedD->y+20, &iconSmoke);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	edd3 7a00 	vldr	s15, [r3]
 800412a:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 800412e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004136:	ee17 3a90 	vmov	r3, s15
 800413a:	b298      	uxth	r0, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004142:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800414a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414e:	ee17 3a90 	vmov	r3, s15
 8004152:	b29b      	uxth	r3, r3
 8004154:	4a09      	ldr	r2, [pc, #36]	@ (800417c <miniBossCollision+0x1d4>)
 8004156:	4619      	mov	r1, r3
 8004158:	f001 fcc4 	bl	8005ae4 <lcdDrawImage>

		 if(mainSpeedD->hp <= 0)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	dc02      	bgt.n	800416a <miniBossCollision+0x1c2>
		 {
		 HAL_Delay(10);
 8004164:	200a      	movs	r0, #10
 8004166:	f004 fa69 	bl	800863c <HAL_Delay>
		 }

	}
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004172:	bf00      	nop
 8004174:	20000008 	.word	0x20000008
 8004178:	2000000c 	.word	0x2000000c
 800417c:	08014684 	.word	0x08014684

08004180 <miniBossMove>:

void miniBossMove(struct miniBossStruct *miniBossData)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
	if(countYMiniBoss<=360)
 8004188:	4b1e      	ldr	r3, [pc, #120]	@ (8004204 <miniBossMove+0x84>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8004190:	dc2a      	bgt.n	80041e8 <miniBossMove+0x68>
	{
		if(miniBossData->y>=0)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	db1b      	blt.n	80041d2 <miniBossMove+0x52>
		{
			lcdFillRect(miniBossData->x, miniBossData->y, 50, 50, COLOR_BLACK);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b218      	sxth	r0, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	b219      	sxth	r1, r3
 80041a6:	2300      	movs	r3, #0
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	2332      	movs	r3, #50	@ 0x32
 80041ac:	2232      	movs	r2, #50	@ 0x32
 80041ae:	f001 fc3d 	bl	8005a2c <lcdFillRect>
			miniBossData->y += 1; // Di chuyển kẻ địch xuống
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	605a      	str	r2, [r3, #4]
			lcdDrawImage(miniBossData->x, miniBossData->y, &iconPlaneMiniBoss);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b298      	uxth	r0, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004208 <miniBossMove+0x88>)
 80041ca:	4619      	mov	r1, r3
 80041cc:	f001 fc8a 	bl	8005ae4 <lcdDrawImage>
 80041d0:	e004      	b.n	80041dc <miniBossMove+0x5c>

		}
		else
		{
			miniBossData->y += 1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	605a      	str	r2, [r3, #4]
		}
		countYMiniBoss+=1;
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <miniBossMove+0x84>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	4a08      	ldr	r2, [pc, #32]	@ (8004204 <miniBossMove+0x84>)
 80041e4:	6013      	str	r3, [r2, #0]
	else
	{
		lcdDrawImage(miniBossData->x, miniBossData->y, &iconPlaneMiniBoss);

	}
}
 80041e6:	e009      	b.n	80041fc <miniBossMove+0x7c>
		lcdDrawImage(miniBossData->x, miniBossData->y, &iconPlaneMiniBoss);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	b298      	uxth	r0, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	4a04      	ldr	r2, [pc, #16]	@ (8004208 <miniBossMove+0x88>)
 80041f6:	4619      	mov	r1, r3
 80041f8:	f001 fc74 	bl	8005ae4 <lcdDrawImage>
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000970 	.word	0x20000970
 8004208:	08017ea8 	.word	0x08017ea8

0800420c <miniBossAlive>:
void miniBossAlive(struct miniBossStruct *miniBossData, struct mainStruct *mainSpeedD)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]

	miniBossCollision(miniBossData,mainSpeedD);
 8004216:	6839      	ldr	r1, [r7, #0]
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fec5 	bl	8003fa8 <miniBossCollision>
	miniBossMove(miniBossData);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ffae 	bl	8004180 <miniBossMove>
	miniBossBullet(miniBossData,mainSpeedD);
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f80b 	bl	8004242 <miniBossBullet>
	//Giới hạn máu
	if(miniBossData->hp <=0)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	dc02      	bgt.n	800423a <miniBossAlive+0x2e>
	{
		miniBossData->hp =0;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
	}
	// Cập nhật tọa độ


}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <miniBossBullet>:
void miniBossBullet(struct miniBossStruct *miniBossData,struct mainStruct *mainSpeedD)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]

	miniBossBulletControl(&miniBossData->bulletData[0],miniBossData,mainSpeedD,1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f103 0010 	add.w	r0, r3, #16
 8004252:	2301      	movs	r3, #1
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	f000 f814 	bl	8004284 <miniBossBulletControl>
	miniBossBulletControl(&miniBossData->bulletData[1],miniBossData,mainSpeedD,0);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8004262:	2300      	movs	r3, #0
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	f000 f80c 	bl	8004284 <miniBossBulletControl>
	miniBossBulletControl(&miniBossData->bulletData[2],miniBossData,mainSpeedD,2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8004272:	2302      	movs	r3, #2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	f000 f804 	bl	8004284 <miniBossBulletControl>


}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <miniBossBulletControl>:

void miniBossBulletControl(struct bullet *bulletSub,struct miniBossStruct *miniBossData,struct mainStruct *mainSpeedD,int special)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
	bulletSub->hit=checkMiniBossBulletHit(bulletSub);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8ba 	bl	800440c <checkMiniBossBulletHit>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	609a      	str	r2, [r3, #8]
	if(bulletSub->bulletCooldown<150)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b95      	cmp	r3, #149	@ 0x95
 80042a4:	f300 809b 	bgt.w	80043de <miniBossBulletControl+0x15a>
	{
		bulletSub->bulletCooldown+=1;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	60da      	str	r2, [r3, #12]


			if (bulletSub->hit==0) // nếu đạn chưa bắn trúng đích
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d159      	bne.n	800436e <miniBossBulletControl+0xea>
			{
				if(bulletSub->y>20&&bulletSub->y<280&&bulletSub->x<240&&bulletSub->x>0)// đạn chưa chạm biên
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b14      	cmp	r3, #20
 80042c0:	dd4f      	ble.n	8004362 <miniBossBulletControl+0xde>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80042ca:	da4a      	bge.n	8004362 <miniBossBulletControl+0xde>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2bef      	cmp	r3, #239	@ 0xef
 80042d2:	dc46      	bgt.n	8004362 <miniBossBulletControl+0xde>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dd42      	ble.n	8004362 <miniBossBulletControl+0xde>
				{
					//cập nhật đường bay của đạn
					lcdFillCircle(bulletSub->x, bulletSub->y, 2, COLOR_BLACK );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	b218      	sxth	r0, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	b219      	sxth	r1, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	2202      	movs	r2, #2
 80042ec:	f001 fac6 	bl	800587c <lcdFillCircle>
					bulletSub->y+=2;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	1c9a      	adds	r2, r3, #2
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	605a      	str	r2, [r3, #4]
					if(special==1)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d105      	bne.n	800430c <miniBossBulletControl+0x88>
					{
						bulletSub->x+=1;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e007      	b.n	800431c <miniBossBulletControl+0x98>
					}
					else if(special ==2)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d104      	bne.n	800431c <miniBossBulletControl+0x98>
					{
						bulletSub->x-=1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	1e5a      	subs	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]
					}
					lcdFillCircle(bulletSub ->x, bulletSub ->y, 2, COLOR_RED  );
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	b218      	sxth	r0, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	b219      	sxth	r1, r3
 8004328:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800432c:	2202      	movs	r2, #2
 800432e:	f001 faa5 	bl	800587c <lcdFillCircle>
					if(bulletSub->y>=280||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800433a:	da07      	bge.n	800434c <miniBossBulletControl+0xc8>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2beb      	cmp	r3, #235	@ 0xeb
 8004342:	dc03      	bgt.n	800434c <miniBossBulletControl+0xc8>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	dc0f      	bgt.n	800436c <miniBossBulletControl+0xe8>
						{
						lcdFillCircle(bulletSub ->x, bulletSub->y, 2, COLOR_BLACK );// giá trị rác
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b218      	sxth	r0, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	b219      	sxth	r1, r3
 8004358:	2300      	movs	r3, #0
 800435a:	2202      	movs	r2, #2
 800435c:	f001 fa8e 	bl	800587c <lcdFillCircle>
					if(bulletSub->y>=280||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 8004360:	e004      	b.n	800436c <miniBossBulletControl+0xe8>
						}
				}
				else// đạn chạm biên -> không vẽ nữa
				{
					bulletSub->y=999;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	e000      	b.n	800436e <miniBossBulletControl+0xea>
					if(bulletSub->y>=280||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 800436c:	bf00      	nop

			}



			if(bulletSub->hit==1 && bulletSub->x<240 && bulletSub->x>0 && bulletSub->y>0 && bulletSub->y<280)// cập nhật giá trị rác cho đạn sau khi trúng đích
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d145      	bne.n	8004402 <miniBossBulletControl+0x17e>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2bef      	cmp	r3, #239	@ 0xef
 800437c:	dc41      	bgt.n	8004402 <miniBossBulletControl+0x17e>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	dd3d      	ble.n	8004402 <miniBossBulletControl+0x17e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	dd39      	ble.n	8004402 <miniBossBulletControl+0x17e>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8004396:	da34      	bge.n	8004402 <miniBossBulletControl+0x17e>
			{

				lcdFillCircle(bulletSub->x, bulletSub->y, 2, COLOR_BLACK );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	b218      	sxth	r0, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b219      	sxth	r1, r3
 80043a4:	2300      	movs	r3, #0
 80043a6:	2202      	movs	r2, #2
 80043a8:	f001 fa68 	bl	800587c <lcdFillCircle>
				mainSpeedD->hp-=bulletSub->dame;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	1ad2      	subs	r2, r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	63da      	str	r2, [r3, #60]	@ 0x3c
				mainSpeedD->energy -= 100;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	641a      	str	r2, [r3, #64]	@ 0x40

				bulletSub->x=999;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80043cc:	601a      	str	r2, [r3, #0]
				bulletSub->y=999;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80043d4:	605a      	str	r2, [r3, #4]
				bulletSub->hit=0;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	609a      	str	r2, [r3, #8]
		bulletSub->x=miniBossData->x+25;

		bulletSub->bulletCooldown=0;
		bulletSub->hit=0;
	}
}
 80043dc:	e011      	b.n	8004402 <miniBossBulletControl+0x17e>
		bulletSub->y=miniBossData->y+45;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	605a      	str	r2, [r3, #4]
		bulletSub->x=miniBossData->x+25;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f103 0219 	add.w	r2, r3, #25
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]
		bulletSub->bulletCooldown=0;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	60da      	str	r2, [r3, #12]
		bulletSub->hit=0;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <checkMiniBossBulletHit>:
int checkMiniBossBulletHit(struct bullet *bulletSub)
{
 800440c:	b590      	push	{r4, r7, lr}
 800440e:	b087      	sub	sp, #28
 8004410:	af04      	add	r7, sp, #16
 8004412:	6078      	str	r0, [r7, #4]
	if (collisionCheck(bulletSub->x-2, bulletSub->y-2, 4, 4, rTouchX, rTouchY, 30, 35)==1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1e98      	subs	r0, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	1e99      	subs	r1, r3, #2
 8004420:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <checkMiniBossBulletHit+0x44>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0b      	ldr	r2, [pc, #44]	@ (8004454 <checkMiniBossBulletHit+0x48>)
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	2423      	movs	r4, #35	@ 0x23
 800442a:	9403      	str	r4, [sp, #12]
 800442c:	241e      	movs	r4, #30
 800442e:	9402      	str	r4, [sp, #8]
 8004430:	9201      	str	r2, [sp, #4]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2304      	movs	r3, #4
 8004436:	2204      	movs	r2, #4
 8004438:	f7fd febe 	bl	80021b8 <collisionCheck>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <checkMiniBossBulletHit+0x3a>
	{
		return 1;
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <checkMiniBossBulletHit+0x3c>
	}
	else
	{
		return 0;
 8004446:	2300      	movs	r3, #0
	}
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	20000008 	.word	0x20000008
 8004454:	2000000c 	.word	0x2000000c

08004458 <boss>:

void boss(struct bossStruct *bossData, struct mainStruct *mainSpeedD)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
    switch (bossData->hp)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <boss+0x1c>
    {
    // Xử lý khi kẻ địch chết
    	case 0:
    	{
    		bossDeath(bossData);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f812 	bl	8004494 <bossDeath>
            break;
 8004470:	bf00      	nop
			}

		}

    }
}
 8004472:	e00a      	b.n	800448a <boss+0x32>
			bossAlive(bossData,mainSpeedD);
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9b0 	bl	80047dc <bossAlive>
			if(bossData->hp<=0)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	dc02      	bgt.n	800448a <boss+0x32>
				bossData->hp=0;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <bossDeath>:
void bossDeath(struct bossStruct *bossData)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e01a      	b.n	80044d8 <bossDeath+0x44>
	{
		lcdFillCircle(bossData->bulletData[i].x, bossData->bulletData[i].y, 50, COLOR_BLACK );
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	440b      	add	r3, r1
 80044b0:	3310      	adds	r3, #16
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	b218      	sxth	r0, r3
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	440b      	add	r3, r1
 80044c4:	3314      	adds	r3, #20
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	b219      	sxth	r1, r3
 80044ca:	2300      	movs	r3, #0
 80044cc:	2232      	movs	r2, #50	@ 0x32
 80044ce:	f001 f9d5 	bl	800587c <lcdFillCircle>
	for(int i=0;i<5;i++)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b04      	cmp	r3, #4
 80044dc:	dde1      	ble.n	80044a2 <bossDeath+0xe>
	}
    if (bossData->deathCooldown == 10)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b0a      	cmp	r3, #10
 80044e4:	d113      	bne.n	800450e <bossDeath+0x7a>
    {
    	bossData->deathCooldown = 0;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	60da      	str	r2, [r3, #12]
        lcdFillRect(bossData->x, bossData->y, 100, 50, COLOR_BLACK);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	b218      	sxth	r0, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b219      	sxth	r1, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2332      	movs	r3, #50	@ 0x32
 80044fe:	2264      	movs	r2, #100	@ 0x64
 8004500:	f001 fa94 	bl	8005a2c <lcdFillRect>
        bossData->y = 321; // Đưa kẻ địch ra khỏi màn hình
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f240 1241 	movw	r2, #321	@ 0x141
 800450a:	605a      	str	r2, [r3, #4]
            lcdDrawImage(bossData->x, bossData->y, &iconSmoke);
            lcdDrawImage(bossData->x+25, bossData->y+20, &iconSmoke);
            bossData-> deathCooldown += 1;
        }
    }
}
 800450c:	e02b      	b.n	8004566 <bossDeath+0xd2>
        if (bossData->y < 320)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004516:	da26      	bge.n	8004566 <bossDeath+0xd2>
            lcdDrawImage(bossData->x, bossData->y, &iconPlaneBoss);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	b298      	uxth	r0, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	b29b      	uxth	r3, r3
 8004524:	4a12      	ldr	r2, [pc, #72]	@ (8004570 <bossDeath+0xdc>)
 8004526:	4619      	mov	r1, r3
 8004528:	f001 fadc 	bl	8005ae4 <lcdDrawImage>
            lcdDrawImage(bossData->x, bossData->y, &iconSmoke);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	b298      	uxth	r0, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b29b      	uxth	r3, r3
 8004538:	4a0e      	ldr	r2, [pc, #56]	@ (8004574 <bossDeath+0xe0>)
 800453a:	4619      	mov	r1, r3
 800453c:	f001 fad2 	bl	8005ae4 <lcdDrawImage>
            lcdDrawImage(bossData->x+25, bossData->y+20, &iconSmoke);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	3319      	adds	r3, #25
 8004548:	b298      	uxth	r0, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	b29b      	uxth	r3, r3
 8004550:	3314      	adds	r3, #20
 8004552:	b29b      	uxth	r3, r3
 8004554:	4a07      	ldr	r2, [pc, #28]	@ (8004574 <bossDeath+0xe0>)
 8004556:	4619      	mov	r1, r3
 8004558:	f001 fac4 	bl	8005ae4 <lcdDrawImage>
            bossData-> deathCooldown += 1;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60da      	str	r2, [r3, #12]
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	0801a5c4 	.word	0x0801a5c4
 8004574:	08014684 	.word	0x08014684

08004578 <bossCollision>:

void bossCollision(struct bossStruct *bossData, struct mainStruct *mainSpeedD)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	b08b      	sub	sp, #44	@ 0x2c
 800457c:	af04      	add	r7, sp, #16
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
	 // Kiểm tra va chạm giữa kẻ địch và đạn
	for (int i = 0; i < 2; i++)
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e06b      	b.n	8004660 <bossCollision+0xe8>
	{
		if (collisionCheck(bossData->x, bossData->y, 100, 50,
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681e      	ldr	r6, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	607b      	str	r3, [r7, #4]
		mainSpeedD->mainBullet[i].x - mainSpeedD->mainBullet[i].w,
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4613      	mov	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	440b      	add	r3, r1
 80045a0:	330c      	adds	r3, #12
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	68b8      	ldr	r0, [r7, #8]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4403      	add	r3, r0
 80045b4:	3308      	adds	r3, #8
 80045b6:	681b      	ldr	r3, [r3, #0]
		if (collisionCheck(bossData->x, bossData->y, 100, 50,
 80045b8:	1ac9      	subs	r1, r1, r3
		mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 80045ba:	68b8      	ldr	r0, [r7, #8]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4403      	add	r3, r0
 80045c8:	3310      	adds	r3, #16
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	68bc      	ldr	r4, [r7, #8]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4423      	add	r3, r4
 80045dc:	3308      	adds	r3, #8
 80045de:	681b      	ldr	r3, [r3, #0]
		if (collisionCheck(bossData->x, bossData->y, 100, 50,
 80045e0:	1ac0      	subs	r0, r0, r3
		mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 80045e2:	68bc      	ldr	r4, [r7, #8]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	4613      	mov	r3, r2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4423      	add	r3, r4
 80045f2:	3308      	adds	r3, #8
 80045f4:	681b      	ldr	r3, [r3, #0]
		if (collisionCheck(bossData->x, bossData->y, 100, 50,
 80045f6:	005c      	lsls	r4, r3, #1
		mainSpeedD->mainBullet[i].y - mainSpeedD->mainBullet[i].w, mainSpeedD->mainBullet[i].w*2, mainSpeedD->mainBullet[i].w*2) == 1)
 80045f8:	68bd      	ldr	r5, [r7, #8]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	4613      	mov	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	442b      	add	r3, r5
 8004608:	3308      	adds	r3, #8
 800460a:	681b      	ldr	r3, [r3, #0]
		if (collisionCheck(bossData->x, bossData->y, 100, 50,
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	9402      	str	r4, [sp, #8]
 8004612:	9001      	str	r0, [sp, #4]
 8004614:	9100      	str	r1, [sp, #0]
 8004616:	2332      	movs	r3, #50	@ 0x32
 8004618:	2264      	movs	r2, #100	@ 0x64
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4630      	mov	r0, r6
 800461e:	f7fd fdcb 	bl	80021b8 <collisionCheck>
 8004622:	4603      	mov	r3, r0
 8004624:	2b01      	cmp	r3, #1
 8004626:	d118      	bne.n	800465a <bossCollision+0xe2>
		{
			mainSpeedD->mainBullet[i].hit = 1;
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4613      	mov	r3, r2
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	440b      	add	r3, r1
 8004636:	3314      	adds	r3, #20
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]
		    bossData->hp -= mainSpeedD->mainBullet[i].dame;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6899      	ldr	r1, [r3, #8]
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4403      	add	r3, r0
 8004650:	3304      	adds	r3, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	1aca      	subs	r2, r1, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 2; i++)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	3301      	adds	r3, #1
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b01      	cmp	r3, #1
 8004664:	dd90      	ble.n	8004588 <bossCollision+0x10>
		}
	}
	// Kiểm tra va chạm giữa kẻ địch và main
	if (collisionCheck(rTouchX,rTouchY,30,35,bossData->x, bossData->y, 100, 50)==1)
 8004666:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <bossCollision+0x1cc>)
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	4b37      	ldr	r3, [pc, #220]	@ (8004748 <bossCollision+0x1d0>)
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	6852      	ldr	r2, [r2, #4]
 8004676:	2432      	movs	r4, #50	@ 0x32
 8004678:	9403      	str	r4, [sp, #12]
 800467a:	2464      	movs	r4, #100	@ 0x64
 800467c:	9402      	str	r4, [sp, #8]
 800467e:	9201      	str	r2, [sp, #4]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	2323      	movs	r3, #35	@ 0x23
 8004684:	221e      	movs	r2, #30
 8004686:	f7fd fd97 	bl	80021b8 <collisionCheck>
 800468a:	4603      	mov	r3, r0
 800468c:	2b01      	cmp	r3, #1
 800468e:	d154      	bne.n	800473a <bossCollision+0x1c2>
	{
		 bossData->hp -= 4;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	1f1a      	subs	r2, r3, #4
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	609a      	str	r2, [r3, #8]
		 mainSpeedD->hp -= 7;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	1fda      	subs	r2, r3, #7
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	63da      	str	r2, [r3, #60]	@ 0x3c
		 mainSpeedD->y+=30;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80046aa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80046ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	edc3 7a01 	vstr	s15, [r3, #4]
		 mainSpeedD->energy -= 100;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

		 lcdDrawImage(mainSpeedD->x+15, mainSpeedD->y, &iconSmoke);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	edd3 7a00 	vldr	s15, [r3]
 80046ca:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80046ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d6:	ee17 3a90 	vmov	r3, s15
 80046da:	b298      	uxth	r0, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	edd3 7a01 	vldr	s15, [r3, #4]
 80046e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e6:	ee17 3a90 	vmov	r3, s15
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	4a17      	ldr	r2, [pc, #92]	@ (800474c <bossCollision+0x1d4>)
 80046ee:	4619      	mov	r1, r3
 80046f0:	f001 f9f8 	bl	8005ae4 <lcdDrawImage>
		 lcdDrawImage(mainSpeedD->x+12, mainSpeedD->y+20, &iconSmoke);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	edd3 7a00 	vldr	s15, [r3]
 80046fa:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80046fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004706:	ee17 3a90 	vmov	r3, s15
 800470a:	b298      	uxth	r0, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004712:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800471a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471e:	ee17 3a90 	vmov	r3, s15
 8004722:	b29b      	uxth	r3, r3
 8004724:	4a09      	ldr	r2, [pc, #36]	@ (800474c <bossCollision+0x1d4>)
 8004726:	4619      	mov	r1, r3
 8004728:	f001 f9dc 	bl	8005ae4 <lcdDrawImage>

		 if(mainSpeedD->hp <= 0)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004730:	2b00      	cmp	r3, #0
 8004732:	dc02      	bgt.n	800473a <bossCollision+0x1c2>
		 {
		 HAL_Delay(10);
 8004734:	200a      	movs	r0, #10
 8004736:	f003 ff81 	bl	800863c <HAL_Delay>
		 }

	}
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004742:	bf00      	nop
 8004744:	20000008 	.word	0x20000008
 8004748:	2000000c 	.word	0x2000000c
 800474c:	08014684 	.word	0x08014684

08004750 <bossMove>:

void bossMove(struct bossStruct *bossData)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
	if(countYboss<=100)
 8004758:	4b1e      	ldr	r3, [pc, #120]	@ (80047d4 <bossMove+0x84>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b64      	cmp	r3, #100	@ 0x64
 800475e:	dc2a      	bgt.n	80047b6 <bossMove+0x66>
	{
		if(bossData->y>=0)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	db1b      	blt.n	80047a0 <bossMove+0x50>
		{
			lcdFillRect(bossData->x, bossData->y, 100, 50, COLOR_BLACK);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	b218      	sxth	r0, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	b219      	sxth	r1, r3
 8004774:	2300      	movs	r3, #0
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	2332      	movs	r3, #50	@ 0x32
 800477a:	2264      	movs	r2, #100	@ 0x64
 800477c:	f001 f956 	bl	8005a2c <lcdFillRect>
			bossData->y += 1; // Di chuyển kẻ địch xuống
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	605a      	str	r2, [r3, #4]
			lcdDrawImage(bossData->x, bossData->y, &iconPlaneBoss);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	b298      	uxth	r0, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	b29b      	uxth	r3, r3
 8004796:	4a10      	ldr	r2, [pc, #64]	@ (80047d8 <bossMove+0x88>)
 8004798:	4619      	mov	r1, r3
 800479a:	f001 f9a3 	bl	8005ae4 <lcdDrawImage>
 800479e:	e004      	b.n	80047aa <bossMove+0x5a>

		}
		else
		{
			bossData->y += 1;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]
		}
		countYboss+=1;
 80047aa:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <bossMove+0x84>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	4a08      	ldr	r2, [pc, #32]	@ (80047d4 <bossMove+0x84>)
 80047b2:	6013      	str	r3, [r2, #0]
	else
	{
		lcdDrawImage(bossData->x, bossData->y, &iconPlaneBoss);

	}
}
 80047b4:	e009      	b.n	80047ca <bossMove+0x7a>
		lcdDrawImage(bossData->x, bossData->y, &iconPlaneBoss);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	b298      	uxth	r0, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	4a05      	ldr	r2, [pc, #20]	@ (80047d8 <bossMove+0x88>)
 80047c4:	4619      	mov	r1, r3
 80047c6:	f001 f98d 	bl	8005ae4 <lcdDrawImage>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000974 	.word	0x20000974
 80047d8:	0801a5c4 	.word	0x0801a5c4

080047dc <bossAlive>:
void bossAlive(struct bossStruct *bossData, struct mainStruct *mainSpeedD)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]

	bossCollision(bossData,mainSpeedD);
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff fec5 	bl	8004578 <bossCollision>
	bossMove(bossData);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ffae 	bl	8004750 <bossMove>
	bossBullet(bossData,mainSpeedD);
 80047f4:	6839      	ldr	r1, [r7, #0]
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f80c 	bl	8004814 <bossBullet>
	//Giới hạn máu
	if(bossData->hp <=0)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	dc02      	bgt.n	800480a <bossAlive+0x2e>
	{
		bossData->hp =0;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]
	}
	// Cập nhật tọa độ


}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <bossBullet>:
void bossBullet(struct bossStruct *bossData,struct mainStruct *mainSpeedD)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]

	switch (bulletx)
 800481e:	4b3a      	ldr	r3, [pc, #232]	@ (8004908 <bossBullet+0xf4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d002      	beq.n	800482c <bossBullet+0x18>
 8004826:	2b03      	cmp	r3, #3
 8004828:	d00f      	beq.n	800484a <bossBullet+0x36>
 800482a:	e01d      	b.n	8004868 <bossBullet+0x54>
	{
		case 2:
		{
			if(bossData->bulletData[3].bulletCooldown==70)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004830:	2b46      	cmp	r3, #70	@ 0x46
 8004832:	d102      	bne.n	800483a <bossBullet+0x26>
			{
				bulletx=3;
 8004834:	4b34      	ldr	r3, [pc, #208]	@ (8004908 <bossBullet+0xf4>)
 8004836:	2203      	movs	r2, #3
 8004838:	601a      	str	r2, [r3, #0]
			}
			bossBulletControl2(&bossData->bulletData[3],bossData,mainSpeedD);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3358      	adds	r3, #88	@ 0x58
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f868 	bl	8004918 <bossBulletControl2>
			break;
 8004848:	e03e      	b.n	80048c8 <bossBullet+0xb4>
		}
		case 3:
		{
			if(bossData->bulletData[4].bulletCooldown==70)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800484e:	2b46      	cmp	r3, #70	@ 0x46
 8004850:	d102      	bne.n	8004858 <bossBullet+0x44>
			{
				bulletx=1;
 8004852:	4b2d      	ldr	r3, [pc, #180]	@ (8004908 <bossBullet+0xf4>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
			}
			bossBulletControl3(&bossData->bulletData[4],bossData,mainSpeedD);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3370      	adds	r3, #112	@ 0x70
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f92d 	bl	8004ac0 <bossBulletControl3>
			break;
 8004866:	e02f      	b.n	80048c8 <bossBullet+0xb4>
		}
		default:
		{
			if(bossData->bulletData[0].bulletCooldown==70)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	2b46      	cmp	r3, #70	@ 0x46
 800486e:	d102      	bne.n	8004876 <bossBullet+0x62>
			{
				bulletx=2;
 8004870:	4b25      	ldr	r3, [pc, #148]	@ (8004908 <bossBullet+0xf4>)
 8004872:	2202      	movs	r2, #2
 8004874:	601a      	str	r2, [r3, #0]
			}
			bossBulletControl(&bossData->bulletData[0],bossData,mainSpeedD,1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f103 0010 	add.w	r0, r3, #16
 800487c:	2301      	movs	r3, #1
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	f000 f9f1 	bl	8004c68 <bossBulletControl>
			bossBulletControl(&bossData->bulletData[1],bossData,mainSpeedD,0);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800488c:	2300      	movs	r3, #0
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	f000 f9e9 	bl	8004c68 <bossBulletControl>
			bossBulletControl(&bossData->bulletData[2],bossData,mainSpeedD,2);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800489c:	2302      	movs	r3, #2
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	f000 f9e1 	bl	8004c68 <bossBulletControl>

			bossBulletControl(&bossData->bulletData[5],bossData,mainSpeedD,3);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 80048ac:	2303      	movs	r3, #3
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	f000 f9d9 	bl	8004c68 <bossBulletControl>
			bossBulletControl(&bossData->bulletData[6],bossData,mainSpeedD,4);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f103 00a0 	add.w	r0, r3, #160	@ 0xa0
 80048bc:	2304      	movs	r3, #4
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	f000 f9d1 	bl	8004c68 <bossBulletControl>


			break;
 80048c6:	bf00      	nop
		}
	}
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80048c8:	2100      	movs	r1, #0
 80048ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80048ce:	f001 faa3 	bl	8005e18 <lcdSetTextColor>
	lcdSetCursor( 200 , 0 );
 80048d2:	2100      	movs	r1, #0
 80048d4:	20c8      	movs	r0, #200	@ 0xc8
 80048d6:	f001 fb1f 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 80048da:	480c      	ldr	r0, [pc, #48]	@ (800490c <bossBullet+0xf8>)
 80048dc:	f001 fa8c 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "HP:" );
 80048e0:	480b      	ldr	r0, [pc, #44]	@ (8004910 <bossBullet+0xfc>)
 80048e2:	f001 f9fd 	bl	8005ce0 <lcdPrintf>
	lcdSetCursor(100 , 0 );
 80048e6:	2100      	movs	r1, #0
 80048e8:	2064      	movs	r0, #100	@ 0x64
 80048ea:	f001 fb15 	bl	8005f18 <lcdSetCursor>
	lcdSetTextFont( & Font8 );
 80048ee:	4807      	ldr	r0, [pc, #28]	@ (800490c <bossBullet+0xf8>)
 80048f0:	f001 fa82 	bl	8005df8 <lcdSetTextFont>
	lcdPrintf( "%2u",bulletx );
 80048f4:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <bossBullet+0xf4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4619      	mov	r1, r3
 80048fa:	4806      	ldr	r0, [pc, #24]	@ (8004914 <bossBullet+0x100>)
 80048fc:	f001 f9f0 	bl	8005ce0 <lcdPrintf>


}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000018 	.word	0x20000018
 800490c:	2000003c 	.word	0x2000003c
 8004910:	08010334 	.word	0x08010334
 8004914:	08010338 	.word	0x08010338

08004918 <bossBulletControl2>:

void bossBulletControl2(struct bullet *bulletSub,struct bossStruct *bossData,struct mainStruct *mainSpeedD)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b089      	sub	sp, #36	@ 0x24
 800491c:	af04      	add	r7, sp, #16
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
	bulletSub->hit=collisionCheck(bulletSub->x-20, bulletSub->y-20, 40, 40, rTouchX, rTouchY, 30, 35);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1a3 0014 	sub.w	r0, r3, #20
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f1a3 0114 	sub.w	r1, r3, #20
 8004934:	4b60      	ldr	r3, [pc, #384]	@ (8004ab8 <bossBulletControl2+0x1a0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a60      	ldr	r2, [pc, #384]	@ (8004abc <bossBulletControl2+0x1a4>)
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	2423      	movs	r4, #35	@ 0x23
 800493e:	9403      	str	r4, [sp, #12]
 8004940:	241e      	movs	r4, #30
 8004942:	9402      	str	r4, [sp, #8]
 8004944:	9201      	str	r2, [sp, #4]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2328      	movs	r3, #40	@ 0x28
 800494a:	2228      	movs	r2, #40	@ 0x28
 800494c:	f7fd fc34 	bl	80021b8 <collisionCheck>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	609a      	str	r2, [r3, #8]
	if(bulletSub->bulletCooldown<70)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b45      	cmp	r3, #69	@ 0x45
 800495c:	f300 8096 	bgt.w	8004a8c <bossBulletControl2+0x174>
	{
		bulletSub->bulletCooldown+=1;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	60da      	str	r2, [r3, #12]


			if (bulletSub->hit==0) // nếu đạn chưa bắn trúng đích
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d147      	bne.n	8004a02 <bossBulletControl2+0xea>
			{
				if(bulletSub->y>60&&bulletSub->y<250&&bulletSub->x<200&&bulletSub->x>0)// đạn chưa chạm biên
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b3c      	cmp	r3, #60	@ 0x3c
 8004978:	dd3d      	ble.n	80049f6 <bossBulletControl2+0xde>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2bf9      	cmp	r3, #249	@ 0xf9
 8004980:	dc39      	bgt.n	80049f6 <bossBulletControl2+0xde>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2bc7      	cmp	r3, #199	@ 0xc7
 8004988:	dc35      	bgt.n	80049f6 <bossBulletControl2+0xde>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	dd31      	ble.n	80049f6 <bossBulletControl2+0xde>
				{
					//cập nhật đường bay của đạn

					lcdFillCircle(bulletSub->x, bulletSub->y, 20, COLOR_BLACK );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	b218      	sxth	r0, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b219      	sxth	r1, r3
 800499e:	2300      	movs	r3, #0
 80049a0:	2214      	movs	r2, #20
 80049a2:	f000 ff6b 	bl	800587c <lcdFillCircle>
					bulletSub->y+=10;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f103 020a 	add.w	r2, r3, #10
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
					lcdFillCircle(bulletSub ->x, bulletSub ->y, 20, COLOR_RED  );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b218      	sxth	r0, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	b219      	sxth	r1, r3
 80049be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80049c2:	2214      	movs	r2, #20
 80049c4:	f000 ff5a 	bl	800587c <lcdFillCircle>


					if(bulletSub->y>=250||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2bf9      	cmp	r3, #249	@ 0xf9
 80049ce:	dc07      	bgt.n	80049e0 <bossBulletControl2+0xc8>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2beb      	cmp	r3, #235	@ 0xeb
 80049d6:	dc03      	bgt.n	80049e0 <bossBulletControl2+0xc8>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	dc0f      	bgt.n	8004a00 <bossBulletControl2+0xe8>
						{
						lcdFillCircle(bulletSub ->x, bulletSub->y, 20, COLOR_BLACK );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b218      	sxth	r0, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	b219      	sxth	r1, r3
 80049ec:	2300      	movs	r3, #0
 80049ee:	2214      	movs	r2, #20
 80049f0:	f000 ff44 	bl	800587c <lcdFillCircle>
					if(bulletSub->y>=250||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 80049f4:	e004      	b.n	8004a00 <bossBulletControl2+0xe8>
						}
				}
				else// đạn chạm biên -> không vẽ nữa
				{
					bulletSub->y=999;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	e000      	b.n	8004a02 <bossBulletControl2+0xea>
					if(bulletSub->y>=250||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 8004a00:	bf00      	nop

			}



			if(bulletSub->hit==1 && bulletSub->x<200 && bulletSub->x>0 && bulletSub->y>0 && bulletSub->y<250)// cập nhật giá trị rác cho đạn sau khi trúng đích
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d152      	bne.n	8004ab0 <bossBulletControl2+0x198>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a10:	dc4e      	bgt.n	8004ab0 <bossBulletControl2+0x198>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	dd4a      	ble.n	8004ab0 <bossBulletControl2+0x198>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	dd46      	ble.n	8004ab0 <bossBulletControl2+0x198>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2bf9      	cmp	r3, #249	@ 0xf9
 8004a28:	dc42      	bgt.n	8004ab0 <bossBulletControl2+0x198>
			{

				lcdFillCircle(bulletSub->x, bulletSub->y, 20, COLOR_RED );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	b218      	sxth	r0, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	b219      	sxth	r1, r3
 8004a36:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004a3a:	2214      	movs	r2, #20
 8004a3c:	f000 ff1e 	bl	800587c <lcdFillCircle>
				HAL_Delay(10);
 8004a40:	200a      	movs	r0, #10
 8004a42:	f003 fdfb 	bl	800863c <HAL_Delay>
								lcdFillCircle(bulletSub->x, bulletSub->y, 20, COLOR_BLACK );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	b218      	sxth	r0, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	b219      	sxth	r1, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	2214      	movs	r2, #20
 8004a56:	f000 ff11 	bl	800587c <lcdFillCircle>
				mainSpeedD->hp-=bulletSub->dame;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	63da      	str	r2, [r3, #60]	@ 0x3c
				mainSpeedD->energy -= 100;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	641a      	str	r2, [r3, #64]	@ 0x40

				bulletSub->x=999;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004a7a:	601a      	str	r2, [r3, #0]
				bulletSub->y=999;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004a82:	605a      	str	r2, [r3, #4]
				bulletSub->hit=0;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
		bulletSub->x=bossData->x+45;

		bulletSub->bulletCooldown=0;
		bulletSub->hit=0;
	}
}
 8004a8a:	e011      	b.n	8004ab0 <bossBulletControl2+0x198>
		bulletSub->y=bossData->y+55;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f103 0237 	add.w	r2, r3, #55	@ 0x37
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	605a      	str	r2, [r3, #4]
		bulletSub->x=bossData->x+45;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]
		bulletSub->bulletCooldown=0;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	60da      	str	r2, [r3, #12]
		bulletSub->hit=0;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd90      	pop	{r4, r7, pc}
 8004ab8:	20000008 	.word	0x20000008
 8004abc:	2000000c 	.word	0x2000000c

08004ac0 <bossBulletControl3>:

void bossBulletControl3(struct bullet *bulletSub,struct bossStruct *bossData,struct mainStruct *mainSpeedD)
{
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b089      	sub	sp, #36	@ 0x24
 8004ac4:	af04      	add	r7, sp, #16
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
	bulletSub->hit=collisionCheck(bulletSub->x-50, bulletSub->y-50, 100, 100, rTouchX, rTouchY, 30, 35);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1a3 0032 	sub.w	r0, r3, #50	@ 0x32
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f1a3 0132 	sub.w	r1, r3, #50	@ 0x32
 8004adc:	4b60      	ldr	r3, [pc, #384]	@ (8004c60 <bossBulletControl3+0x1a0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a60      	ldr	r2, [pc, #384]	@ (8004c64 <bossBulletControl3+0x1a4>)
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	2423      	movs	r4, #35	@ 0x23
 8004ae6:	9403      	str	r4, [sp, #12]
 8004ae8:	241e      	movs	r4, #30
 8004aea:	9402      	str	r4, [sp, #8]
 8004aec:	9201      	str	r2, [sp, #4]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2364      	movs	r3, #100	@ 0x64
 8004af2:	2264      	movs	r2, #100	@ 0x64
 8004af4:	f7fd fb60 	bl	80021b8 <collisionCheck>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	609a      	str	r2, [r3, #8]
	if(bulletSub->bulletCooldown<70)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b45      	cmp	r3, #69	@ 0x45
 8004b04:	f300 8095 	bgt.w	8004c32 <bossBulletControl3+0x172>
	{
		bulletSub->bulletCooldown+=1;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	60da      	str	r2, [r3, #12]


			if (bulletSub->hit==0) // nếu đạn chưa bắn trúng đích
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d146      	bne.n	8004ba8 <bossBulletControl3+0xe8>
			{
				if(bulletSub->y>60&&bulletSub->y<230&&bulletSub->x<200&&bulletSub->x>0)// đạn chưa chạm biên
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b3c      	cmp	r3, #60	@ 0x3c
 8004b20:	dd3c      	ble.n	8004b9c <bossBulletControl3+0xdc>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2be5      	cmp	r3, #229	@ 0xe5
 8004b28:	dc38      	bgt.n	8004b9c <bossBulletControl3+0xdc>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b30:	dc34      	bgt.n	8004b9c <bossBulletControl3+0xdc>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	dd30      	ble.n	8004b9c <bossBulletControl3+0xdc>
				{
					//cập nhật đường bay của đạn

					lcdFillCircle(bulletSub->x, bulletSub->y, 50, COLOR_BLACK );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	b218      	sxth	r0, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	b219      	sxth	r1, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	2232      	movs	r2, #50	@ 0x32
 8004b4a:	f000 fe97 	bl	800587c <lcdFillCircle>
					bulletSub->y+=6;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	1d9a      	adds	r2, r3, #6
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	605a      	str	r2, [r3, #4]
					lcdFillCircle(bulletSub ->x, bulletSub ->y, 50, COLOR_RED  );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	b218      	sxth	r0, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	b219      	sxth	r1, r3
 8004b64:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004b68:	2232      	movs	r2, #50	@ 0x32
 8004b6a:	f000 fe87 	bl	800587c <lcdFillCircle>


					if(bulletSub->y>=230||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2be5      	cmp	r3, #229	@ 0xe5
 8004b74:	dc07      	bgt.n	8004b86 <bossBulletControl3+0xc6>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2beb      	cmp	r3, #235	@ 0xeb
 8004b7c:	dc03      	bgt.n	8004b86 <bossBulletControl3+0xc6>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	dc0f      	bgt.n	8004ba6 <bossBulletControl3+0xe6>
						{
						lcdFillCircle(bulletSub ->x, bulletSub->y, 50, COLOR_BLACK );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b218      	sxth	r0, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	b219      	sxth	r1, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	2232      	movs	r2, #50	@ 0x32
 8004b96:	f000 fe71 	bl	800587c <lcdFillCircle>
					if(bulletSub->y>=230||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 8004b9a:	e004      	b.n	8004ba6 <bossBulletControl3+0xe6>
						}
				}
				else// đạn chạm biên -> không vẽ nữa
				{
					// giá trị rác
					bulletSub->y=999;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	e000      	b.n	8004ba8 <bossBulletControl3+0xe8>
					if(bulletSub->y>=230||bulletSub->x>=236||bulletSub->x<=4)// đạn chuẩn bị chạm biên
 8004ba6:	bf00      	nop

			}



			if(bulletSub->hit==1 && bulletSub->x<200 && bulletSub->x>0 && bulletSub->y>0 && bulletSub->y<250)// cập nhật giá trị rác cho đạn sau khi trúng đích
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d152      	bne.n	8004c56 <bossBulletControl3+0x196>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bb6:	dc4e      	bgt.n	8004c56 <bossBulletControl3+0x196>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dd4a      	ble.n	8004c56 <bossBulletControl3+0x196>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	dd46      	ble.n	8004c56 <bossBulletControl3+0x196>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2bf9      	cmp	r3, #249	@ 0xf9
 8004bce:	dc42      	bgt.n	8004c56 <bossBulletControl3+0x196>
			{

				lcdFillCircle(bulletSub->x, bulletSub->y, 50, COLOR_RED );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b218      	sxth	r0, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	b219      	sxth	r1, r3
 8004bdc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004be0:	2232      	movs	r2, #50	@ 0x32
 8004be2:	f000 fe4b 	bl	800587c <lcdFillCircle>
				HAL_Delay(10);
 8004be6:	200a      	movs	r0, #10
 8004be8:	f003 fd28 	bl	800863c <HAL_Delay>
				lcdFillCircle(bulletSub->x, bulletSub->y, 50, COLOR_BLACK );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b218      	sxth	r0, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b219      	sxth	r1, r3
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2232      	movs	r2, #50	@ 0x32
 8004bfc:	f000 fe3e 	bl	800587c <lcdFillCircle>
				mainSpeedD->hp-=bulletSub->dame;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	1ad2      	subs	r2, r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
				mainSpeedD->energy -= 100;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	@ 0x40

				bulletSub->x=999;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c20:	601a      	str	r2, [r3, #0]
				bulletSub->y=999;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c28:	605a      	str	r2, [r3, #4]
				bulletSub->hit=0;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	609a      	str	r2, [r3, #8]
		bulletSub->x=bossData->x+45;

		bulletSub->bulletCooldown=0;
		bulletSub->hit=0;
	}
}
 8004c30:	e011      	b.n	8004c56 <bossBulletControl3+0x196>
		bulletSub->y=bossData->y+55;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f103 0237 	add.w	r2, r3, #55	@ 0x37
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	605a      	str	r2, [r3, #4]
		bulletSub->x=bossData->x+45;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	601a      	str	r2, [r3, #0]
		bulletSub->bulletCooldown=0;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	60da      	str	r2, [r3, #12]
		bulletSub->hit=0;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd90      	pop	{r4, r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000008 	.word	0x20000008
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <bossBulletControl>:
void bossBulletControl(struct bullet *bulletSub,struct bossStruct *bossData,struct mainStruct *mainSpeedD,int special)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
	bulletSub->hit=checkbossBulletHit(bulletSub);
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f8cc 	bl	8004e14 <checkbossBulletHit>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	609a      	str	r2, [r3, #8]
	if(bulletSub->bulletCooldown<70)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b45      	cmp	r3, #69	@ 0x45
 8004c88:	f300 80ad 	bgt.w	8004de6 <bossBulletControl+0x17e>
	{
		bulletSub->bulletCooldown+=1;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	60da      	str	r2, [r3, #12]


			if (bulletSub->hit==0) // nếu đạn chưa bắn trúng đích
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d16b      	bne.n	8004d76 <bossBulletControl+0x10e>
			{
				if(bulletSub->y>20&&bulletSub->y<270&&bulletSub->x<240&&bulletSub->x>0)// đạn chưa chạm biên
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b14      	cmp	r3, #20
 8004ca4:	dd61      	ble.n	8004d6a <bossBulletControl+0x102>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8004cae:	da5c      	bge.n	8004d6a <bossBulletControl+0x102>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2bef      	cmp	r3, #239	@ 0xef
 8004cb6:	dc58      	bgt.n	8004d6a <bossBulletControl+0x102>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dd54      	ble.n	8004d6a <bossBulletControl+0x102>
				{
					//cập nhật đường bay của đạn

					lcdFillCircle(bulletSub->x, bulletSub->y, 4, COLOR_BLACK );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	b218      	sxth	r0, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b219      	sxth	r1, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2204      	movs	r2, #4
 8004cd0:	f000 fdd4 	bl	800587c <lcdFillCircle>
					bulletSub->y+=5;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	1d5a      	adds	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]
					if(special==1){bulletSub->x+=5;}
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d105      	bne.n	8004cf0 <bossBulletControl+0x88>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1d5a      	adds	r2, r3, #5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e019      	b.n	8004d24 <bossBulletControl+0xbc>
					else if(special ==2){bulletSub->x-=5;}
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d105      	bne.n	8004d02 <bossBulletControl+0x9a>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	1f5a      	subs	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e010      	b.n	8004d24 <bossBulletControl+0xbc>
					else if(special ==3){bulletSub->x-=3;}
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d105      	bne.n	8004d14 <bossBulletControl+0xac>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1eda      	subs	r2, r3, #3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e007      	b.n	8004d24 <bossBulletControl+0xbc>
					else if(special ==4){bulletSub->x+=3;}
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d104      	bne.n	8004d24 <bossBulletControl+0xbc>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	1cda      	adds	r2, r3, #3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]
					lcdFillCircle(bulletSub ->x, bulletSub ->y, 4, COLOR_RED  );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b218      	sxth	r0, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	b219      	sxth	r1, r3
 8004d30:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004d34:	2204      	movs	r2, #4
 8004d36:	f000 fda1 	bl	800587c <lcdFillCircle>


					if(bulletSub->y>=270||bulletSub->x>=236||bulletSub->x<=0)// đạn chuẩn bị chạm biên
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8004d42:	da07      	bge.n	8004d54 <bossBulletControl+0xec>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2beb      	cmp	r3, #235	@ 0xeb
 8004d4a:	dc03      	bgt.n	8004d54 <bossBulletControl+0xec>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	dc0f      	bgt.n	8004d74 <bossBulletControl+0x10c>
						{
						lcdFillCircle(bulletSub ->x, bulletSub->y, 4, COLOR_BLACK );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	b218      	sxth	r0, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b219      	sxth	r1, r3
 8004d60:	2300      	movs	r3, #0
 8004d62:	2204      	movs	r2, #4
 8004d64:	f000 fd8a 	bl	800587c <lcdFillCircle>
					if(bulletSub->y>=270||bulletSub->x>=236||bulletSub->x<=0)// đạn chuẩn bị chạm biên
 8004d68:	e004      	b.n	8004d74 <bossBulletControl+0x10c>
						//bulletSub->y-=5;
						}
				}
				else// đạn chạm biên -> không vẽ nữa
				{
					bulletSub->y=999;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	e000      	b.n	8004d76 <bossBulletControl+0x10e>
					if(bulletSub->y>=270||bulletSub->x>=236||bulletSub->x<=0)// đạn chuẩn bị chạm biên
 8004d74:	bf00      	nop

			}



			if(bulletSub->hit==1 && bulletSub->x<240 && bulletSub->x>0 && bulletSub->y>0 && bulletSub->y<280)// cập nhật giá trị rác cho đạn sau khi trúng đích
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d145      	bne.n	8004e0a <bossBulletControl+0x1a2>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2bef      	cmp	r3, #239	@ 0xef
 8004d84:	dc41      	bgt.n	8004e0a <bossBulletControl+0x1a2>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	dd3d      	ble.n	8004e0a <bossBulletControl+0x1a2>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	dd39      	ble.n	8004e0a <bossBulletControl+0x1a2>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8004d9e:	da34      	bge.n	8004e0a <bossBulletControl+0x1a2>
			{


								lcdFillCircle(bulletSub->x, bulletSub->y, 4, COLOR_BLACK );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b218      	sxth	r0, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	b219      	sxth	r1, r3
 8004dac:	2300      	movs	r3, #0
 8004dae:	2204      	movs	r2, #4
 8004db0:	f000 fd64 	bl	800587c <lcdFillCircle>
				mainSpeedD->hp-=bulletSub->dame;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	1ad2      	subs	r2, r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
				mainSpeedD->energy -= 100;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	@ 0x40

				bulletSub->x=999;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004dd4:	601a      	str	r2, [r3, #0]
				bulletSub->y=999;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ddc:	605a      	str	r2, [r3, #4]
				bulletSub->hit=0;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	609a      	str	r2, [r3, #8]
		bulletSub->x=bossData->x+45;

		bulletSub->bulletCooldown=0;
		bulletSub->hit=0;
	}
}
 8004de4:	e011      	b.n	8004e0a <bossBulletControl+0x1a2>
		bulletSub->y=bossData->y+55;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f103 0237 	add.w	r2, r3, #55	@ 0x37
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]
		bulletSub->x=bossData->x+45;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]
		bulletSub->bulletCooldown=0;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	60da      	str	r2, [r3, #12]
		bulletSub->hit=0;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <checkbossBulletHit>:


int checkbossBulletHit(struct bullet *bulletSub)
{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af04      	add	r7, sp, #16
 8004e1a:	6078      	str	r0, [r7, #4]
	if (collisionCheck(bulletSub->x-4, bulletSub->y-4, 8, 8, rTouchX, rTouchY, 30, 35)==1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	1f18      	subs	r0, r3, #4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	1f19      	subs	r1, r3, #4
 8004e28:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <checkbossBulletHit+0x44>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004e5c <checkbossBulletHit+0x48>)
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	2423      	movs	r4, #35	@ 0x23
 8004e32:	9403      	str	r4, [sp, #12]
 8004e34:	241e      	movs	r4, #30
 8004e36:	9402      	str	r4, [sp, #8]
 8004e38:	9201      	str	r2, [sp, #4]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	2208      	movs	r2, #8
 8004e40:	f7fd f9ba 	bl	80021b8 <collisionCheck>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <checkbossBulletHit+0x3a>
	{
		return 1;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <checkbossBulletHit+0x3c>
	}
	else
	{
		return 0;
 8004e4e:	2300      	movs	r3, #0
	}
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}
 8004e58:	20000008 	.word	0x20000008
 8004e5c:	2000000c 	.word	0x2000000c

08004e60 <stringToInt>:




int stringToInt(char *str)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
    int num = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < strlen(str); i++) {
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	e01f      	b.n	8004eb2 <stringToInt+0x52>
        if (str[i] >= '0' && str[i] <= '9') {
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4413      	add	r3, r2
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8004e7c:	d916      	bls.n	8004eac <stringToInt+0x4c>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4413      	add	r3, r2
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b39      	cmp	r3, #57	@ 0x39
 8004e88:	d810      	bhi.n	8004eac <stringToInt+0x4c>
            num = num * 10 + (str[i] - '0');
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4619      	mov	r1, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3b30      	subs	r3, #48	@ 0x30
 8004ea0:	440b      	add	r3, r1
 8004ea2:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < strlen(str); i++) {
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	e002      	b.n	8004eb2 <stringToInt+0x52>
        } else {
            return -1;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb0:	e007      	b.n	8004ec2 <stringToInt+0x62>
    for (int i = 0; i < strlen(str); i++) {
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fb f98c 	bl	80001d0 <strlen>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d8d8      	bhi.n	8004e72 <stringToInt+0x12>
        }
    }
    return num;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <getDataTemp>:
int getDataTemp(int a)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
    json_start = strstr(RX_buffer, "{");
 8004ed4:	217b      	movs	r1, #123	@ 0x7b
 8004ed6:	481c      	ldr	r0, [pc, #112]	@ (8004f48 <getDataTemp+0x7c>)
 8004ed8:	f008 fcfa 	bl	800d8d0 <strchr>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4a1b      	ldr	r2, [pc, #108]	@ (8004f4c <getDataTemp+0x80>)
 8004ee0:	6013      	str	r3, [r2, #0]
    daily_section = strstr(json_start, "\"daily\":");
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f4c <getDataTemp+0x80>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	491a      	ldr	r1, [pc, #104]	@ (8004f50 <getDataTemp+0x84>)
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f008 fd23 	bl	800d934 <strstr>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4a18      	ldr	r2, [pc, #96]	@ (8004f54 <getDataTemp+0x88>)
 8004ef2:	6013      	str	r3, [r2, #0]
    current_section = strstr(json_start, "\"current\":");
 8004ef4:	4b15      	ldr	r3, [pc, #84]	@ (8004f4c <getDataTemp+0x80>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4917      	ldr	r1, [pc, #92]	@ (8004f58 <getDataTemp+0x8c>)
 8004efa:	4618      	mov	r0, r3
 8004efc:	f008 fd1a 	bl	800d934 <strstr>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4a16      	ldr	r2, [pc, #88]	@ (8004f5c <getDataTemp+0x90>)
 8004f04:	6013      	str	r3, [r2, #0]
	get_Temp_Max(json_start, temp_max, daily_section);
 8004f06:	4b11      	ldr	r3, [pc, #68]	@ (8004f4c <getDataTemp+0x80>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a12      	ldr	r2, [pc, #72]	@ (8004f54 <getDataTemp+0x88>)
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	4914      	ldr	r1, [pc, #80]	@ (8004f60 <getDataTemp+0x94>)
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fad9 	bl	80064c8 <get_Temp_Max>
	return (int)(temp_max[a] + 0.5);
 8004f16:	4a12      	ldr	r2, [pc, #72]	@ (8004f60 <getDataTemp+0x94>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fb fb11 	bl	8000548 <__aeabi_f2d>
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f64 <getDataTemp+0x98>)
 8004f2c:	f7fb f9ae 	bl	800028c <__adddf3>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	f7fb fdf8 	bl	8000b2c <__aeabi_d2iz>
 8004f3c:	4603      	mov	r3, r0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000bc0 	.word	0x20000bc0
 8004f4c:	20000980 	.word	0x20000980
 8004f50:	0801033c 	.word	0x0801033c
 8004f54:	20000978 	.word	0x20000978
 8004f58:	08010348 	.word	0x08010348
 8004f5c:	2000097c 	.word	0x2000097c
 8004f60:	20000b4c 	.word	0x20000b4c
 8004f64:	3fe00000 	.word	0x3fe00000

08004f68 <getDataWind>:
int getDataWind(int a)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
    json_start = strstr(RX_buffer, "{");
 8004f70:	217b      	movs	r1, #123	@ 0x7b
 8004f72:	481c      	ldr	r0, [pc, #112]	@ (8004fe4 <getDataWind+0x7c>)
 8004f74:	f008 fcac 	bl	800d8d0 <strchr>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <getDataWind+0x80>)
 8004f7c:	6013      	str	r3, [r2, #0]
    daily_section = strstr(json_start, "\"daily\":");
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <getDataWind+0x80>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	491a      	ldr	r1, [pc, #104]	@ (8004fec <getDataWind+0x84>)
 8004f84:	4618      	mov	r0, r3
 8004f86:	f008 fcd5 	bl	800d934 <strstr>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4a18      	ldr	r2, [pc, #96]	@ (8004ff0 <getDataWind+0x88>)
 8004f8e:	6013      	str	r3, [r2, #0]
    current_section = strstr(json_start, "\"current\":");
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <getDataWind+0x80>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4917      	ldr	r1, [pc, #92]	@ (8004ff4 <getDataWind+0x8c>)
 8004f96:	4618      	mov	r0, r3
 8004f98:	f008 fccc 	bl	800d934 <strstr>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4a16      	ldr	r2, [pc, #88]	@ (8004ff8 <getDataWind+0x90>)
 8004fa0:	6013      	str	r3, [r2, #0]
	get_Wind_Speed_Max(json_start, wind_max, daily_section);
 8004fa2:	4b11      	ldr	r3, [pc, #68]	@ (8004fe8 <getDataWind+0x80>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a12      	ldr	r2, [pc, #72]	@ (8004ff0 <getDataWind+0x88>)
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	4914      	ldr	r1, [pc, #80]	@ (8004ffc <getDataWind+0x94>)
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fabb 	bl	8006528 <get_Wind_Speed_Max>
	return (int)(wind_max[a]+0.5);
 8004fb2:	4a12      	ldr	r2, [pc, #72]	@ (8004ffc <getDataWind+0x94>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb fac3 	bl	8000548 <__aeabi_f2d>
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <getDataWind+0x98>)
 8004fc8:	f7fb f960 	bl	800028c <__adddf3>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f7fb fdaa 	bl	8000b2c <__aeabi_d2iz>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000bc0 	.word	0x20000bc0
 8004fe8:	20000980 	.word	0x20000980
 8004fec:	0801033c 	.word	0x0801033c
 8004ff0:	20000978 	.word	0x20000978
 8004ff4:	08010348 	.word	0x08010348
 8004ff8:	2000097c 	.word	0x2000097c
 8004ffc:	20000b84 	.word	0x20000b84
 8005000:	3fe00000 	.word	0x3fe00000

08005004 <getDataCodeWeather>:
int getDataCodeWeather(int a)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
    json_start = strstr(RX_buffer, "{");
 800500c:	217b      	movs	r1, #123	@ 0x7b
 800500e:	4817      	ldr	r0, [pc, #92]	@ (800506c <getDataCodeWeather+0x68>)
 8005010:	f008 fc5e 	bl	800d8d0 <strchr>
 8005014:	4603      	mov	r3, r0
 8005016:	4a16      	ldr	r2, [pc, #88]	@ (8005070 <getDataCodeWeather+0x6c>)
 8005018:	6013      	str	r3, [r2, #0]
    daily_section = strstr(json_start, "\"daily\":");
 800501a:	4b15      	ldr	r3, [pc, #84]	@ (8005070 <getDataCodeWeather+0x6c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4915      	ldr	r1, [pc, #84]	@ (8005074 <getDataCodeWeather+0x70>)
 8005020:	4618      	mov	r0, r3
 8005022:	f008 fc87 	bl	800d934 <strstr>
 8005026:	4603      	mov	r3, r0
 8005028:	4a13      	ldr	r2, [pc, #76]	@ (8005078 <getDataCodeWeather+0x74>)
 800502a:	6013      	str	r3, [r2, #0]
    current_section = strstr(json_start, "\"current\":");
 800502c:	4b10      	ldr	r3, [pc, #64]	@ (8005070 <getDataCodeWeather+0x6c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4912      	ldr	r1, [pc, #72]	@ (800507c <getDataCodeWeather+0x78>)
 8005032:	4618      	mov	r0, r3
 8005034:	f008 fc7e 	bl	800d934 <strstr>
 8005038:	4603      	mov	r3, r0
 800503a:	4a11      	ldr	r2, [pc, #68]	@ (8005080 <getDataCodeWeather+0x7c>)
 800503c:	6013      	str	r3, [r2, #0]
	get_Weather_Code(json_start, weather_code, daily_section);
 800503e:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <getDataCodeWeather+0x6c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a0d      	ldr	r2, [pc, #52]	@ (8005078 <getDataCodeWeather+0x74>)
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	490f      	ldr	r1, [pc, #60]	@ (8005084 <getDataCodeWeather+0x80>)
 8005048:	4618      	mov	r0, r3
 800504a:	f001 fa85 	bl	8006558 <get_Weather_Code>
	return weather_code[a];
 800504e:	4a0d      	ldr	r2, [pc, #52]	@ (8005084 <getDataCodeWeather+0x80>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	edd3 7a00 	vldr	s15, [r3]
 800505a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800505e:	ee17 3a90 	vmov	r3, s15
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000bc0 	.word	0x20000bc0
 8005070:	20000980 	.word	0x20000980
 8005074:	0801033c 	.word	0x0801033c
 8005078:	20000978 	.word	0x20000978
 800507c:	08010348 	.word	0x08010348
 8005080:	2000097c 	.word	0x2000097c
 8005084:	20000ba0 	.word	0x20000ba0

08005088 <getDailyTime>:
void getDailyTime()
{
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
	 json_start = strstr(RX_buffer, "{");
 800508e:	217b      	movs	r1, #123	@ 0x7b
 8005090:	481d      	ldr	r0, [pc, #116]	@ (8005108 <getDailyTime+0x80>)
 8005092:	f008 fc1d 	bl	800d8d0 <strchr>
 8005096:	4603      	mov	r3, r0
 8005098:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <getDailyTime+0x84>)
 800509a:	6013      	str	r3, [r2, #0]
	 int time_count = MAX_DAYS;
 800509c:	2307      	movs	r3, #7
 800509e:	603b      	str	r3, [r7, #0]
	 extract_array(json_start, "\"time\"", daily_time, &time_count);
 80050a0:	4b1a      	ldr	r3, [pc, #104]	@ (800510c <getDailyTime+0x84>)
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	463b      	mov	r3, r7
 80050a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005110 <getDailyTime+0x88>)
 80050a8:	491a      	ldr	r1, [pc, #104]	@ (8005114 <getDailyTime+0x8c>)
 80050aa:	f001 f8d6 	bl	800625a <extract_array>
	 for (int i = 0; i < time_count; i++) {
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	e01f      	b.n	80050f4 <getDailyTime+0x6c>
		 split_date(daily_time[i], year[i], month[i], day[i]);
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	4a13      	ldr	r2, [pc, #76]	@ (8005110 <getDailyTime+0x88>)
 80050c2:	1898      	adds	r0, r3, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	4a12      	ldr	r2, [pc, #72]	@ (8005118 <getDailyTime+0x90>)
 80050ce:	1899      	adds	r1, r3, r2
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	4a10      	ldr	r2, [pc, #64]	@ (800511c <getDailyTime+0x94>)
 80050da:	189c      	adds	r4, r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005120 <getDailyTime+0x98>)
 80050e6:	4413      	add	r3, r2
 80050e8:	4622      	mov	r2, r4
 80050ea:	f001 fa65 	bl	80065b8 <split_date>
	 for (int i = 0; i < time_count; i++) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3301      	adds	r3, #1
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	dbdb      	blt.n	80050b4 <getDailyTime+0x2c>
	 }
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bd90      	pop	{r4, r7, pc}
 8005106:	bf00      	nop
 8005108:	20000bc0 	.word	0x20000bc0
 800510c:	20000980 	.word	0x20000980
 8005110:	20000aa8 	.word	0x20000aa8
 8005114:	08010354 	.word	0x08010354
 8005118:	20000af8 	.word	0x20000af8
 800511c:	20000b1c 	.word	0x20000b1c
 8005120:	20000b34 	.word	0x20000b34

08005124 <getDataDay>:
int getDataDay(int a)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	 getDailyTime();
 800512c:	f7ff ffac 	bl	8005088 <getDailyTime>
	 return stringToInt(day[a]);
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	4413      	add	r3, r2
 8005138:	4a04      	ldr	r2, [pc, #16]	@ (800514c <getDataDay+0x28>)
 800513a:	4413      	add	r3, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fe8f 	bl	8004e60 <stringToInt>
 8005142:	4603      	mov	r3, r0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000b34 	.word	0x20000b34

08005150 <getDataMonth>:
char* getDataMonth(int a)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	 getDailyTime();
 8005158:	f7ff ff96 	bl	8005088 <getDailyTime>
	 int num = stringToInt(month[a]);
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <getDataMonth+0x9c>)
 8005166:	4413      	add	r3, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff fe79 	bl	8004e60 <stringToInt>
 800516e:	60f8      	str	r0, [r7, #12]
	 switch(num)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3b01      	subs	r3, #1
 8005174:	2b0b      	cmp	r3, #11
 8005176:	d833      	bhi.n	80051e0 <getDataMonth+0x90>
 8005178:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <getDataMonth+0x30>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051b1 	.word	0x080051b1
 8005184:	080051b5 	.word	0x080051b5
 8005188:	080051b9 	.word	0x080051b9
 800518c:	080051bd 	.word	0x080051bd
 8005190:	080051c1 	.word	0x080051c1
 8005194:	080051c5 	.word	0x080051c5
 8005198:	080051c9 	.word	0x080051c9
 800519c:	080051cd 	.word	0x080051cd
 80051a0:	080051d1 	.word	0x080051d1
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051d9 	.word	0x080051d9
 80051ac:	080051dd 	.word	0x080051dd
	 {
	 	 	case 1:  return "JAN";
 80051b0:	4b0f      	ldr	r3, [pc, #60]	@ (80051f0 <getDataMonth+0xa0>)
 80051b2:	e016      	b.n	80051e2 <getDataMonth+0x92>
	        case 2:  return "FEB";
 80051b4:	4b0f      	ldr	r3, [pc, #60]	@ (80051f4 <getDataMonth+0xa4>)
 80051b6:	e014      	b.n	80051e2 <getDataMonth+0x92>
	        case 3:  return "MAR";
 80051b8:	4b0f      	ldr	r3, [pc, #60]	@ (80051f8 <getDataMonth+0xa8>)
 80051ba:	e012      	b.n	80051e2 <getDataMonth+0x92>
	        case 4:  return "APR";
 80051bc:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <getDataMonth+0xac>)
 80051be:	e010      	b.n	80051e2 <getDataMonth+0x92>
	        case 5:  return "MAY";
 80051c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <getDataMonth+0xb0>)
 80051c2:	e00e      	b.n	80051e2 <getDataMonth+0x92>
	        case 6:  return "JUN";
 80051c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005204 <getDataMonth+0xb4>)
 80051c6:	e00c      	b.n	80051e2 <getDataMonth+0x92>
	        case 7:  return "JUL";
 80051c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <getDataMonth+0xb8>)
 80051ca:	e00a      	b.n	80051e2 <getDataMonth+0x92>
	        case 8:  return "AUG";
 80051cc:	4b0f      	ldr	r3, [pc, #60]	@ (800520c <getDataMonth+0xbc>)
 80051ce:	e008      	b.n	80051e2 <getDataMonth+0x92>
	        case 9:  return "SEP";
 80051d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005210 <getDataMonth+0xc0>)
 80051d2:	e006      	b.n	80051e2 <getDataMonth+0x92>
	        case 10: return "OCT";
 80051d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <getDataMonth+0xc4>)
 80051d6:	e004      	b.n	80051e2 <getDataMonth+0x92>
	        case 11: return "NOV";
 80051d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005218 <getDataMonth+0xc8>)
 80051da:	e002      	b.n	80051e2 <getDataMonth+0x92>
	        case 12: return "DEC";
 80051dc:	4b0f      	ldr	r3, [pc, #60]	@ (800521c <getDataMonth+0xcc>)
 80051de:	e000      	b.n	80051e2 <getDataMonth+0x92>
	        default: return "ERR";
 80051e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005220 <getDataMonth+0xd0>)
	 }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000b1c 	.word	0x20000b1c
 80051f0:	0801035c 	.word	0x0801035c
 80051f4:	08010360 	.word	0x08010360
 80051f8:	08010364 	.word	0x08010364
 80051fc:	08010368 	.word	0x08010368
 8005200:	0801036c 	.word	0x0801036c
 8005204:	08010370 	.word	0x08010370
 8005208:	08010374 	.word	0x08010374
 800520c:	08010378 	.word	0x08010378
 8005210:	0801037c 	.word	0x0801037c
 8005214:	08010380 	.word	0x08010380
 8005218:	08010384 	.word	0x08010384
 800521c:	08010388 	.word	0x08010388
 8005220:	0801038c 	.word	0x0801038c

08005224 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800522a:	2300      	movs	r3, #0
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	2301      	movs	r3, #1
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2300      	movs	r3, #0
 8005234:	2200      	movs	r2, #0
 8005236:	2101      	movs	r1, #1
 8005238:	2000      	movs	r0, #0
 800523a:	f000 ff51 	bl	80060e0 <lcdBuildMemoryAccessControlConfig>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	4bae      	ldr	r3, [pc, #696]	@ (80054fc <lcdInit+0x2d8>)
 8005244:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8005246:	2300      	movs	r3, #0
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	2301      	movs	r3, #1
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	2201      	movs	r2, #1
 8005252:	2100      	movs	r1, #0
 8005254:	2000      	movs	r0, #0
 8005256:	f000 ff43 	bl	80060e0 <lcdBuildMemoryAccessControlConfig>
 800525a:	4603      	mov	r3, r0
 800525c:	461a      	mov	r2, r3
 800525e:	4ba8      	ldr	r3, [pc, #672]	@ (8005500 <lcdInit+0x2dc>)
 8005260:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8005262:	2300      	movs	r3, #0
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	2301      	movs	r3, #1
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	2300      	movs	r3, #0
 800526c:	2200      	movs	r2, #0
 800526e:	2100      	movs	r1, #0
 8005270:	2001      	movs	r0, #1
 8005272:	f000 ff35 	bl	80060e0 <lcdBuildMemoryAccessControlConfig>
 8005276:	4603      	mov	r3, r0
 8005278:	461a      	mov	r2, r3
 800527a:	4ba2      	ldr	r3, [pc, #648]	@ (8005504 <lcdInit+0x2e0>)
 800527c:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800527e:	2300      	movs	r3, #0
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	2301      	movs	r3, #1
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	2300      	movs	r3, #0
 8005288:	2201      	movs	r2, #1
 800528a:	2101      	movs	r1, #1
 800528c:	2001      	movs	r0, #1
 800528e:	f000 ff27 	bl	80060e0 <lcdBuildMemoryAccessControlConfig>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	4b9c      	ldr	r3, [pc, #624]	@ (8005508 <lcdInit+0x2e4>)
 8005298:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 800529a:	f000 fef7 	bl	800608c <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 800529e:	2028      	movs	r0, #40	@ 0x28
 80052a0:	f000 fefe 	bl	80060a0 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80052a4:	20cf      	movs	r0, #207	@ 0xcf
 80052a6:	f000 fefb 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x00);
 80052aa:	2000      	movs	r0, #0
 80052ac:	f000 ff08 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x83);
 80052b0:	2083      	movs	r0, #131	@ 0x83
 80052b2:	f000 ff05 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x30);
 80052b6:	2030      	movs	r0, #48	@ 0x30
 80052b8:	f000 ff02 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(0xED);
 80052bc:	20ed      	movs	r0, #237	@ 0xed
 80052be:	f000 feef 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x64);
 80052c2:	2064      	movs	r0, #100	@ 0x64
 80052c4:	f000 fefc 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x03);
 80052c8:	2003      	movs	r0, #3
 80052ca:	f000 fef9 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x12);
 80052ce:	2012      	movs	r0, #18
 80052d0:	f000 fef6 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x81);
 80052d4:	2081      	movs	r0, #129	@ 0x81
 80052d6:	f000 fef3 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80052da:	20e8      	movs	r0, #232	@ 0xe8
 80052dc:	f000 fee0 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x85);
 80052e0:	2085      	movs	r0, #133	@ 0x85
 80052e2:	f000 feed 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x01);
 80052e6:	2001      	movs	r0, #1
 80052e8:	f000 feea 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x79);
 80052ec:	2079      	movs	r0, #121	@ 0x79
 80052ee:	f000 fee7 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(0xCB);
 80052f2:	20cb      	movs	r0, #203	@ 0xcb
 80052f4:	f000 fed4 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x39);
 80052f8:	2039      	movs	r0, #57	@ 0x39
 80052fa:	f000 fee1 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x2C);
 80052fe:	202c      	movs	r0, #44	@ 0x2c
 8005300:	f000 fede 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x00);
 8005304:	2000      	movs	r0, #0
 8005306:	f000 fedb 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x34);
 800530a:	2034      	movs	r0, #52	@ 0x34
 800530c:	f000 fed8 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x02);
 8005310:	2002      	movs	r0, #2
 8005312:	f000 fed5 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(0xF7);
 8005316:	20f7      	movs	r0, #247	@ 0xf7
 8005318:	f000 fec2 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x20);
 800531c:	2020      	movs	r0, #32
 800531e:	f000 fecf 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8005322:	20ea      	movs	r0, #234	@ 0xea
 8005324:	f000 febc 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x00);
 8005328:	2000      	movs	r0, #0
 800532a:	f000 fec9 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x00);
 800532e:	2000      	movs	r0, #0
 8005330:	f000 fec6 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8005334:	20c0      	movs	r0, #192	@ 0xc0
 8005336:	f000 feb3 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x26);
 800533a:	2026      	movs	r0, #38	@ 0x26
 800533c:	f000 fec0 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8005340:	20c1      	movs	r0, #193	@ 0xc1
 8005342:	f000 fead 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x11);
 8005346:	2011      	movs	r0, #17
 8005348:	f000 feba 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 800534c:	20c5      	movs	r0, #197	@ 0xc5
 800534e:	f000 fea7 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x35);
 8005352:	2035      	movs	r0, #53	@ 0x35
 8005354:	f000 feb4 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x3E);
 8005358:	203e      	movs	r0, #62	@ 0x3e
 800535a:	f000 feb1 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800535e:	20c7      	movs	r0, #199	@ 0xc7
 8005360:	f000 fe9e 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8005364:	20be      	movs	r0, #190	@ 0xbe
 8005366:	f000 feab 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800536a:	2036      	movs	r0, #54	@ 0x36
 800536c:	f000 fe98 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8005370:	4b62      	ldr	r3, [pc, #392]	@ (80054fc <lcdInit+0x2d8>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fea3 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800537a:	203a      	movs	r0, #58	@ 0x3a
 800537c:	f000 fe90 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x55);
 8005380:	2055      	movs	r0, #85	@ 0x55
 8005382:	f000 fe9d 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8005386:	20b1      	movs	r0, #177	@ 0xb1
 8005388:	f000 fe8a 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x00);
 800538c:	2000      	movs	r0, #0
 800538e:	f000 fe97 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x1B);
 8005392:	201b      	movs	r0, #27
 8005394:	f000 fe94 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(0xF2);
 8005398:	20f2      	movs	r0, #242	@ 0xf2
 800539a:	f000 fe81 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x08);
 800539e:	2008      	movs	r0, #8
 80053a0:	f000 fe8e 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80053a4:	2026      	movs	r0, #38	@ 0x26
 80053a6:	f000 fe7b 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x01);
 80053aa:	2001      	movs	r0, #1
 80053ac:	f000 fe88 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80053b0:	20e0      	movs	r0, #224	@ 0xe0
 80053b2:	f000 fe75 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80053b6:	201f      	movs	r0, #31
 80053b8:	f000 fe82 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x1A);
 80053bc:	201a      	movs	r0, #26
 80053be:	f000 fe7f 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x18);
 80053c2:	2018      	movs	r0, #24
 80053c4:	f000 fe7c 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x0A);
 80053c8:	200a      	movs	r0, #10
 80053ca:	f000 fe79 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x0F);
 80053ce:	200f      	movs	r0, #15
 80053d0:	f000 fe76 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x06);
 80053d4:	2006      	movs	r0, #6
 80053d6:	f000 fe73 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x45);
 80053da:	2045      	movs	r0, #69	@ 0x45
 80053dc:	f000 fe70 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x87);
 80053e0:	2087      	movs	r0, #135	@ 0x87
 80053e2:	f000 fe6d 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x32);
 80053e6:	2032      	movs	r0, #50	@ 0x32
 80053e8:	f000 fe6a 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x0A);
 80053ec:	200a      	movs	r0, #10
 80053ee:	f000 fe67 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x07);
 80053f2:	2007      	movs	r0, #7
 80053f4:	f000 fe64 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x02);
 80053f8:	2002      	movs	r0, #2
 80053fa:	f000 fe61 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x07);
 80053fe:	2007      	movs	r0, #7
 8005400:	f000 fe5e 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x05);
 8005404:	2005      	movs	r0, #5
 8005406:	f000 fe5b 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x00);
 800540a:	2000      	movs	r0, #0
 800540c:	f000 fe58 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8005410:	20e1      	movs	r0, #225	@ 0xe1
 8005412:	f000 fe45 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x00);
 8005416:	2000      	movs	r0, #0
 8005418:	f000 fe52 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x25);
 800541c:	2025      	movs	r0, #37	@ 0x25
 800541e:	f000 fe4f 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x27);
 8005422:	2027      	movs	r0, #39	@ 0x27
 8005424:	f000 fe4c 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x05);
 8005428:	2005      	movs	r0, #5
 800542a:	f000 fe49 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x10);
 800542e:	2010      	movs	r0, #16
 8005430:	f000 fe46 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x09);
 8005434:	2009      	movs	r0, #9
 8005436:	f000 fe43 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x3A);
 800543a:	203a      	movs	r0, #58	@ 0x3a
 800543c:	f000 fe40 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x78);
 8005440:	2078      	movs	r0, #120	@ 0x78
 8005442:	f000 fe3d 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x4D);
 8005446:	204d      	movs	r0, #77	@ 0x4d
 8005448:	f000 fe3a 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x05);
 800544c:	2005      	movs	r0, #5
 800544e:	f000 fe37 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x18);
 8005452:	2018      	movs	r0, #24
 8005454:	f000 fe34 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x0D);
 8005458:	200d      	movs	r0, #13
 800545a:	f000 fe31 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x38);
 800545e:	2038      	movs	r0, #56	@ 0x38
 8005460:	f000 fe2e 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x3A);
 8005464:	203a      	movs	r0, #58	@ 0x3a
 8005466:	f000 fe2b 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x1F);
 800546a:	201f      	movs	r0, #31
 800546c:	f000 fe28 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8005470:	202a      	movs	r0, #42	@ 0x2a
 8005472:	f000 fe15 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x00);
 8005476:	2000      	movs	r0, #0
 8005478:	f000 fe22 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x00);
 800547c:	2000      	movs	r0, #0
 800547e:	f000 fe1f 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x00);
 8005482:	2000      	movs	r0, #0
 8005484:	f000 fe1c 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0xEF);
 8005488:	20ef      	movs	r0, #239	@ 0xef
 800548a:	f000 fe19 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 800548e:	202b      	movs	r0, #43	@ 0x2b
 8005490:	f000 fe06 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x00);
 8005494:	2000      	movs	r0, #0
 8005496:	f000 fe13 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x00);
 800549a:	2000      	movs	r0, #0
 800549c:	f000 fe10 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x01);
 80054a0:	2001      	movs	r0, #1
 80054a2:	f000 fe0d 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x3F);
 80054a6:	203f      	movs	r0, #63	@ 0x3f
 80054a8:	f000 fe0a 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80054ac:	20b7      	movs	r0, #183	@ 0xb7
 80054ae:	f000 fdf7 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x07);
 80054b2:	2007      	movs	r0, #7
 80054b4:	f000 fe04 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80054b8:	20b6      	movs	r0, #182	@ 0xb6
 80054ba:	f000 fdf1 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80054be:	200a      	movs	r0, #10
 80054c0:	f000 fdfe 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x82);
 80054c4:	2082      	movs	r0, #130	@ 0x82
 80054c6:	f000 fdfb 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x27);
 80054ca:	2027      	movs	r0, #39	@ 0x27
 80054cc:	f000 fdf8 	bl	80060c0 <lcdWriteData>
  lcdWriteData(0x00);
 80054d0:	2000      	movs	r0, #0
 80054d2:	f000 fdf5 	bl	80060c0 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80054d6:	2011      	movs	r0, #17
 80054d8:	f000 fde2 	bl	80060a0 <lcdWriteCommand>
  HAL_Delay(100);
 80054dc:	2064      	movs	r0, #100	@ 0x64
 80054de:	f003 f8ad 	bl	800863c <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 80054e2:	2029      	movs	r0, #41	@ 0x29
 80054e4:	f000 fddc 	bl	80060a0 <lcdWriteCommand>
  HAL_Delay(100);
 80054e8:	2064      	movs	r0, #100	@ 0x64
 80054ea:	f003 f8a7 	bl	800863c <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80054ee:	202c      	movs	r0, #44	@ 0x2c
 80054f0:	f000 fdd6 	bl	80060a0 <lcdWriteCommand>
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000988 	.word	0x20000988
 8005500:	20000989 	.word	0x20000989
 8005504:	2000098a 	.word	0x2000098a
 8005508:	2000098b 	.word	0x2000098b

0800550c <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8005516:	4b11      	ldr	r3, [pc, #68]	@ (800555c <lcdFillRGB+0x50>)
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <lcdFillRGB+0x50>)
 8005520:	885b      	ldrh	r3, [r3, #2]
 8005522:	3b01      	subs	r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	2100      	movs	r1, #0
 8005528:	2000      	movs	r0, #0
 800552a:	f000 fd0f 	bl	8005f4c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 800552e:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <lcdFillRGB+0x50>)
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	4b09      	ldr	r3, [pc, #36]	@ (800555c <lcdFillRGB+0x50>)
 8005536:	885b      	ldrh	r3, [r3, #2]
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 800553e:	e003      	b.n	8005548 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fdbc 	bl	80060c0 <lcdWriteData>
  while(dimensions--)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	60fa      	str	r2, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f6      	bne.n	8005540 <lcdFillRGB+0x34>
  }
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000044 	.word	0x20000044

08005560 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	80fb      	strh	r3, [r7, #6]
 800556a:	460b      	mov	r3, r1
 800556c:	80bb      	strh	r3, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8005572:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <lcdDrawPixel+0x44>)
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	429a      	cmp	r2, r3
 800557a:	d20f      	bcs.n	800559c <lcdDrawPixel+0x3c>
 800557c:	4b09      	ldr	r3, [pc, #36]	@ (80055a4 <lcdDrawPixel+0x44>)
 800557e:	885b      	ldrh	r3, [r3, #2]
 8005580:	88ba      	ldrh	r2, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d20a      	bcs.n	800559c <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8005586:	88bb      	ldrh	r3, [r7, #4]
 8005588:	88fa      	ldrh	r2, [r7, #6]
 800558a:	88b9      	ldrh	r1, [r7, #4]
 800558c:	88f8      	ldrh	r0, [r7, #6]
 800558e:	f000 fcdd 	bl	8005f4c <lcdSetWindow>
    lcdWriteData(color);
 8005592:	887b      	ldrh	r3, [r7, #2]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fd93 	bl	80060c0 <lcdWriteData>
 800559a:	e000      	b.n	800559e <lcdDrawPixel+0x3e>
        return;
 800559c:	bf00      	nop
}
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000044 	.word	0x20000044

080055a8 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4623      	mov	r3, r4
 80055b8:	80fb      	strh	r3, [r7, #6]
 80055ba:	4603      	mov	r3, r0
 80055bc:	80bb      	strh	r3, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	807b      	strh	r3, [r7, #2]
 80055c2:	4613      	mov	r3, r2
 80055c4:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 80055c6:	88ba      	ldrh	r2, [r7, #4]
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d205      	bcs.n	80055da <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	817b      	strh	r3, [r7, #10]
 80055d2:	88bb      	ldrh	r3, [r7, #4]
 80055d4:	80fb      	strh	r3, [r7, #6]
 80055d6:	897b      	ldrh	r3, [r7, #10]
 80055d8:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 80055da:	4b15      	ldr	r3, [pc, #84]	@ (8005630 <lcdDrawHLine+0x88>)
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	88ba      	ldrh	r2, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d303      	bcc.n	80055ec <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 80055e4:	4b12      	ldr	r3, [pc, #72]	@ (8005630 <lcdDrawHLine+0x88>)
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 80055ec:	4b10      	ldr	r3, [pc, #64]	@ (8005630 <lcdDrawHLine+0x88>)
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d303      	bcc.n	80055fe <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 80055f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005630 <lcdDrawHLine+0x88>)
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 80055fe:	887b      	ldrh	r3, [r7, #2]
 8005600:	88ba      	ldrh	r2, [r7, #4]
 8005602:	8879      	ldrh	r1, [r7, #2]
 8005604:	88f8      	ldrh	r0, [r7, #6]
 8005606:	f000 fca1 	bl	8005f4c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e006      	b.n	800561e <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8005610:	883b      	ldrh	r3, [r7, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fd54 	bl	80060c0 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	88bb      	ldrh	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	429a      	cmp	r2, r3
 8005624:	ddf4      	ble.n	8005610 <lcdDrawHLine+0x68>
	}
}
 8005626:	bf00      	nop
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bd90      	pop	{r4, r7, pc}
 8005630:	20000044 	.word	0x20000044

08005634 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	4611      	mov	r1, r2
 8005640:	461a      	mov	r2, r3
 8005642:	4623      	mov	r3, r4
 8005644:	80fb      	strh	r3, [r7, #6]
 8005646:	4603      	mov	r3, r0
 8005648:	80bb      	strh	r3, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	807b      	strh	r3, [r7, #2]
 800564e:	4613      	mov	r3, r2
 8005650:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	88bb      	ldrh	r3, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d205      	bcs.n	8005666 <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 800565a:	88bb      	ldrh	r3, [r7, #4]
 800565c:	817b      	strh	r3, [r7, #10]
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	80bb      	strh	r3, [r7, #4]
 8005662:	897b      	ldrh	r3, [r7, #10]
 8005664:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8005666:	4b1a      	ldr	r3, [pc, #104]	@ (80056d0 <lcdDrawVLine+0x9c>)
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	429a      	cmp	r2, r3
 800566e:	d303      	bcc.n	8005678 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8005670:	4b17      	ldr	r3, [pc, #92]	@ (80056d0 <lcdDrawVLine+0x9c>)
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	3b01      	subs	r3, #1
 8005676:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8005678:	4b15      	ldr	r3, [pc, #84]	@ (80056d0 <lcdDrawVLine+0x9c>)
 800567a:	885b      	ldrh	r3, [r3, #2]
 800567c:	88ba      	ldrh	r2, [r7, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	d303      	bcc.n	800568a <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8005682:	4b13      	ldr	r3, [pc, #76]	@ (80056d0 <lcdDrawVLine+0x9c>)
 8005684:	885b      	ldrh	r3, [r3, #2]
 8005686:	3b01      	subs	r3, #1
 8005688:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 800568a:	4b11      	ldr	r3, [pc, #68]	@ (80056d0 <lcdDrawVLine+0x9c>)
 800568c:	885b      	ldrh	r3, [r3, #2]
 800568e:	887a      	ldrh	r2, [r7, #2]
 8005690:	429a      	cmp	r2, r3
 8005692:	d303      	bcc.n	800569c <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8005694:	4b0e      	ldr	r3, [pc, #56]	@ (80056d0 <lcdDrawVLine+0x9c>)
 8005696:	885b      	ldrh	r3, [r3, #2]
 8005698:	3b01      	subs	r3, #1
 800569a:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	88b9      	ldrh	r1, [r7, #4]
 80056a2:	88f8      	ldrh	r0, [r7, #6]
 80056a4:	f000 fc52 	bl	8005f4c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 80056a8:	88bb      	ldrh	r3, [r7, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e006      	b.n	80056bc <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 80056ae:	883b      	ldrh	r3, [r7, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fd05 	bl	80060c0 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3301      	adds	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	887b      	ldrh	r3, [r7, #2]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	ddf4      	ble.n	80056ae <lcdDrawVLine+0x7a>
  }
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd90      	pop	{r4, r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000044 	.word	0x20000044

080056d4 <lcdDrawCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4604      	mov	r4, r0
 80056dc:	4608      	mov	r0, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	461a      	mov	r2, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	80fb      	strh	r3, [r7, #6]
 80056e6:	4603      	mov	r3, r0
 80056e8:	80bb      	strh	r3, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	807b      	strh	r3, [r7, #2]
 80056ee:	4613      	mov	r3, r2
 80056f0:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80056f2:	887b      	ldrh	r3, [r7, #2]
 80056f4:	f1c3 0301 	rsb	r3, r3, #1
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80056fc:	2301      	movs	r3, #1
 80056fe:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8005700:	887b      	ldrh	r3, [r7, #2]
 8005702:	461a      	mov	r2, r3
 8005704:	03d2      	lsls	r2, r2, #15
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8005712:	887b      	ldrh	r3, [r7, #2]
 8005714:	81fb      	strh	r3, [r7, #14]

	lcdDrawPixel(x0, y0 + r, color);
 8005716:	88f8      	ldrh	r0, [r7, #6]
 8005718:	88ba      	ldrh	r2, [r7, #4]
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	4413      	add	r3, r2
 800571e:	b29b      	uxth	r3, r3
 8005720:	883a      	ldrh	r2, [r7, #0]
 8005722:	4619      	mov	r1, r3
 8005724:	f7ff ff1c 	bl	8005560 <lcdDrawPixel>
	lcdDrawPixel(x0, y0 - r, color);
 8005728:	88f8      	ldrh	r0, [r7, #6]
 800572a:	88ba      	ldrh	r2, [r7, #4]
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	b29b      	uxth	r3, r3
 8005732:	883a      	ldrh	r2, [r7, #0]
 8005734:	4619      	mov	r1, r3
 8005736:	f7ff ff13 	bl	8005560 <lcdDrawPixel>
	lcdDrawPixel(x0 + r, y0, color);
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	887b      	ldrh	r3, [r7, #2]
 800573e:	4413      	add	r3, r2
 8005740:	b29b      	uxth	r3, r3
 8005742:	88b9      	ldrh	r1, [r7, #4]
 8005744:	883a      	ldrh	r2, [r7, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff ff0a 	bl	8005560 <lcdDrawPixel>
	lcdDrawPixel(x0 - r, y0, color);
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	887b      	ldrh	r3, [r7, #2]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	b29b      	uxth	r3, r3
 8005754:	88b9      	ldrh	r1, [r7, #4]
 8005756:	883a      	ldrh	r2, [r7, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff01 	bl	8005560 <lcdDrawPixel>

	while (x < y)
 800575e:	e081      	b.n	8005864 <lcdDrawCircle+0x190>
	{
		if (f >= 0)
 8005760:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005764:	2b00      	cmp	r3, #0
 8005766:	db0e      	blt.n	8005786 <lcdDrawCircle+0xb2>
		{
			y--;
 8005768:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29b      	uxth	r3, r3
 8005772:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005774:	8a7b      	ldrh	r3, [r7, #18]
 8005776:	3302      	adds	r3, #2
 8005778:	b29b      	uxth	r3, r3
 800577a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800577c:	8afa      	ldrh	r2, [r7, #22]
 800577e:	8a7b      	ldrh	r3, [r7, #18]
 8005780:	4413      	add	r3, r2
 8005782:	b29b      	uxth	r3, r3
 8005784:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005786:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800578a:	b29b      	uxth	r3, r3
 800578c:	3301      	adds	r3, #1
 800578e:	b29b      	uxth	r3, r3
 8005790:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005792:	8abb      	ldrh	r3, [r7, #20]
 8005794:	3302      	adds	r3, #2
 8005796:	b29b      	uxth	r3, r3
 8005798:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800579a:	8afa      	ldrh	r2, [r7, #22]
 800579c:	8abb      	ldrh	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	82fb      	strh	r3, [r7, #22]

		lcdDrawPixel(x0 + x, y0 + y, color);
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	8a3b      	ldrh	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	b298      	uxth	r0, r3
 80057ac:	88ba      	ldrh	r2, [r7, #4]
 80057ae:	89fb      	ldrh	r3, [r7, #14]
 80057b0:	4413      	add	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	883a      	ldrh	r2, [r7, #0]
 80057b6:	4619      	mov	r1, r3
 80057b8:	f7ff fed2 	bl	8005560 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 + y, color);
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	8a3b      	ldrh	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	b298      	uxth	r0, r3
 80057c4:	88ba      	ldrh	r2, [r7, #4]
 80057c6:	89fb      	ldrh	r3, [r7, #14]
 80057c8:	4413      	add	r3, r2
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	883a      	ldrh	r2, [r7, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	f7ff fec6 	bl	8005560 <lcdDrawPixel>
		lcdDrawPixel(x0 + x, y0 - y, color);
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	8a3b      	ldrh	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	b298      	uxth	r0, r3
 80057dc:	88ba      	ldrh	r2, [r7, #4]
 80057de:	89fb      	ldrh	r3, [r7, #14]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	883a      	ldrh	r2, [r7, #0]
 80057e6:	4619      	mov	r1, r3
 80057e8:	f7ff feba 	bl	8005560 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 - y, color);
 80057ec:	88fa      	ldrh	r2, [r7, #6]
 80057ee:	8a3b      	ldrh	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	b298      	uxth	r0, r3
 80057f4:	88ba      	ldrh	r2, [r7, #4]
 80057f6:	89fb      	ldrh	r3, [r7, #14]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	883a      	ldrh	r2, [r7, #0]
 80057fe:	4619      	mov	r1, r3
 8005800:	f7ff feae 	bl	8005560 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 + x, color);
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	89fb      	ldrh	r3, [r7, #14]
 8005808:	4413      	add	r3, r2
 800580a:	b298      	uxth	r0, r3
 800580c:	88ba      	ldrh	r2, [r7, #4]
 800580e:	8a3b      	ldrh	r3, [r7, #16]
 8005810:	4413      	add	r3, r2
 8005812:	b29b      	uxth	r3, r3
 8005814:	883a      	ldrh	r2, [r7, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	f7ff fea2 	bl	8005560 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 + x, color);
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	89fb      	ldrh	r3, [r7, #14]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	b298      	uxth	r0, r3
 8005824:	88ba      	ldrh	r2, [r7, #4]
 8005826:	8a3b      	ldrh	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	883a      	ldrh	r2, [r7, #0]
 800582e:	4619      	mov	r1, r3
 8005830:	f7ff fe96 	bl	8005560 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 - x, color);
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	89fb      	ldrh	r3, [r7, #14]
 8005838:	4413      	add	r3, r2
 800583a:	b298      	uxth	r0, r3
 800583c:	88ba      	ldrh	r2, [r7, #4]
 800583e:	8a3b      	ldrh	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	b29b      	uxth	r3, r3
 8005844:	883a      	ldrh	r2, [r7, #0]
 8005846:	4619      	mov	r1, r3
 8005848:	f7ff fe8a 	bl	8005560 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 - x, color);
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	89fb      	ldrh	r3, [r7, #14]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	b298      	uxth	r0, r3
 8005854:	88ba      	ldrh	r2, [r7, #4]
 8005856:	8a3b      	ldrh	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	b29b      	uxth	r3, r3
 800585c:	883a      	ldrh	r2, [r7, #0]
 800585e:	4619      	mov	r1, r3
 8005860:	f7ff fe7e 	bl	8005560 <lcdDrawPixel>
	while (x < y)
 8005864:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800586c:	429a      	cmp	r2, r3
 800586e:	f6ff af77 	blt.w	8005760 <lcdDrawCircle+0x8c>
	}
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	bd90      	pop	{r4, r7, pc}

0800587c <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b085      	sub	sp, #20
 8005880:	af02      	add	r7, sp, #8
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	4611      	mov	r1, r2
 8005888:	461a      	mov	r2, r3
 800588a:	4623      	mov	r3, r4
 800588c:	80fb      	strh	r3, [r7, #6]
 800588e:	4603      	mov	r3, r0
 8005890:	80bb      	strh	r3, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	807b      	strh	r3, [r7, #2]
 8005896:	4613      	mov	r3, r2
 8005898:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 800589a:	88f8      	ldrh	r0, [r7, #6]
 800589c:	88ba      	ldrh	r2, [r7, #4]
 800589e:	887b      	ldrh	r3, [r7, #2]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	b299      	uxth	r1, r3
 80058a4:	88ba      	ldrh	r2, [r7, #4]
 80058a6:	887b      	ldrh	r3, [r7, #2]
 80058a8:	4413      	add	r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3301      	adds	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	883b      	ldrh	r3, [r7, #0]
 80058b2:	f7ff febf 	bl	8005634 <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 80058b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80058ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058c2:	883b      	ldrh	r3, [r7, #0]
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	2300      	movs	r3, #0
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	2303      	movs	r3, #3
 80058cc:	f000 f804 	bl	80058d8 <lcdFillCircleHelper>
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd90      	pop	{r4, r7, pc}

080058d8 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80058d8:	b590      	push	{r4, r7, lr}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	80fb      	strh	r3, [r7, #6]
 80058ea:	4603      	mov	r3, r0
 80058ec:	80bb      	strh	r3, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	807b      	strh	r3, [r7, #2]
 80058f2:	4613      	mov	r3, r2
 80058f4:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80058f6:	887b      	ldrh	r3, [r7, #2]
 80058f8:	f1c3 0301 	rsb	r3, r3, #1
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8005900:	2301      	movs	r3, #1
 8005902:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8005904:	887b      	ldrh	r3, [r7, #2]
 8005906:	461a      	mov	r2, r3
 8005908:	03d2      	lsls	r2, r2, #15
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	b29b      	uxth	r3, r3
 8005910:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8005916:	887b      	ldrh	r3, [r7, #2]
 8005918:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 800591a:	e07b      	b.n	8005a14 <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 800591c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005920:	2b00      	cmp	r3, #0
 8005922:	db0e      	blt.n	8005942 <lcdFillCircleHelper+0x6a>
		{
			y--;
 8005924:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005930:	8a7b      	ldrh	r3, [r7, #18]
 8005932:	3302      	adds	r3, #2
 8005934:	b29b      	uxth	r3, r3
 8005936:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8005938:	8afa      	ldrh	r2, [r7, #22]
 800593a:	8a7b      	ldrh	r3, [r7, #18]
 800593c:	4413      	add	r3, r2
 800593e:	b29b      	uxth	r3, r3
 8005940:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005942:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005946:	b29b      	uxth	r3, r3
 8005948:	3301      	adds	r3, #1
 800594a:	b29b      	uxth	r3, r3
 800594c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800594e:	8abb      	ldrh	r3, [r7, #20]
 8005950:	3302      	adds	r3, #2
 8005952:	b29b      	uxth	r3, r3
 8005954:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8005956:	8afa      	ldrh	r2, [r7, #22]
 8005958:	8abb      	ldrh	r3, [r7, #20]
 800595a:	4413      	add	r3, r2
 800595c:	b29b      	uxth	r3, r3
 800595e:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8005960:	787b      	ldrb	r3, [r7, #1]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d027      	beq.n	80059ba <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	8a3b      	ldrh	r3, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	b298      	uxth	r0, r3
 8005972:	88ba      	ldrh	r2, [r7, #4]
 8005974:	89fb      	ldrh	r3, [r7, #14]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	b299      	uxth	r1, r3
 800597a:	88ba      	ldrh	r2, [r7, #4]
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	4413      	add	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005984:	4413      	add	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	3301      	adds	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800598e:	f7ff fe51 	bl	8005634 <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8005992:	88fa      	ldrh	r2, [r7, #6]
 8005994:	89fb      	ldrh	r3, [r7, #14]
 8005996:	4413      	add	r3, r2
 8005998:	b298      	uxth	r0, r3
 800599a:	88ba      	ldrh	r2, [r7, #4]
 800599c:	8a3b      	ldrh	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	b299      	uxth	r1, r3
 80059a2:	88ba      	ldrh	r2, [r7, #4]
 80059a4:	8a3b      	ldrh	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059ac:	4413      	add	r3, r2
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3301      	adds	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80059b6:	f7ff fe3d 	bl	8005634 <lcdDrawVLine>
		}
		if (cornername & 0x2)
 80059ba:	787b      	ldrb	r3, [r7, #1]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d027      	beq.n	8005a14 <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	8a3b      	ldrh	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	b298      	uxth	r0, r3
 80059cc:	88ba      	ldrh	r2, [r7, #4]
 80059ce:	89fb      	ldrh	r3, [r7, #14]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	b299      	uxth	r1, r3
 80059d4:	88ba      	ldrh	r2, [r7, #4]
 80059d6:	89fb      	ldrh	r3, [r7, #14]
 80059d8:	4413      	add	r3, r2
 80059da:	b29a      	uxth	r2, r3
 80059dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059de:	4413      	add	r3, r2
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3301      	adds	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80059e8:	f7ff fe24 	bl	8005634 <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	89fb      	ldrh	r3, [r7, #14]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	b298      	uxth	r0, r3
 80059f4:	88ba      	ldrh	r2, [r7, #4]
 80059f6:	8a3b      	ldrh	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	b299      	uxth	r1, r3
 80059fc:	88ba      	ldrh	r2, [r7, #4]
 80059fe:	8a3b      	ldrh	r3, [r7, #16]
 8005a00:	4413      	add	r3, r2
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a06:	4413      	add	r3, r2
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005a10:	f7ff fe10 	bl	8005634 <lcdDrawVLine>
	while (x < y)
 8005a14:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005a18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	f6ff af7d 	blt.w	800591c <lcdFillCircleHelper+0x44>
		}
	}
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd90      	pop	{r4, r7, pc}

08005a2c <lcdFillRect>:
        if(a > b) swap(a,b);
        lcdDrawHLine(a, b + 1, y, color);
    }
}
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	80fb      	strh	r3, [r7, #6]
 8005a3e:	4603      	mov	r3, r0
 8005a40:	80bb      	strh	r3, [r7, #4]
 8005a42:	460b      	mov	r3, r1
 8005a44:	807b      	strh	r3, [r7, #2]
 8005a46:	4613      	mov	r3, r2
 8005a48:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8005a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a4e:	4a24      	ldr	r2, [pc, #144]	@ (8005ae0 <lcdFillRect+0xb4>)
 8005a50:	8812      	ldrh	r2, [r2, #0]
 8005a52:	4293      	cmp	r3, r2
 8005a54:	da3f      	bge.n	8005ad6 <lcdFillRect+0xaa>
 8005a56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a5a:	4a21      	ldr	r2, [pc, #132]	@ (8005ae0 <lcdFillRect+0xb4>)
 8005a5c:	8852      	ldrh	r2, [r2, #2]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	da39      	bge.n	8005ad6 <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8005a62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae0 <lcdFillRect+0xb4>)
 8005a6e:	8812      	ldrh	r2, [r2, #0]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	dd05      	ble.n	8005a80 <lcdFillRect+0x54>
 8005a74:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae0 <lcdFillRect+0xb4>)
 8005a76:	881a      	ldrh	r2, [r3, #0]
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8005a80:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005a88:	4413      	add	r3, r2
 8005a8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ae0 <lcdFillRect+0xb4>)
 8005a8c:	8852      	ldrh	r2, [r2, #2]
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	dd05      	ble.n	8005a9e <lcdFillRect+0x72>
 8005a92:	4b13      	ldr	r3, [pc, #76]	@ (8005ae0 <lcdFillRect+0xb4>)
 8005a94:	885a      	ldrh	r2, [r3, #2]
 8005a96:	88bb      	ldrh	r3, [r7, #4]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8005a9e:	88bb      	ldrh	r3, [r7, #4]
 8005aa0:	81fb      	strh	r3, [r7, #14]
 8005aa2:	e00e      	b.n	8005ac2 <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8005aa4:	88f8      	ldrh	r0, [r7, #6]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	887b      	ldrh	r3, [r7, #2]
 8005aaa:	4413      	add	r3, r2
 8005aac:	b299      	uxth	r1, r3
 8005aae:	89fa      	ldrh	r2, [r7, #14]
 8005ab0:	8c3b      	ldrh	r3, [r7, #32]
 8005ab2:	f7ff fd79 	bl	80055a8 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8005ab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3301      	adds	r3, #1
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	81fb      	strh	r3, [r7, #14]
 8005ac2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005ac6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005aca:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005ace:	440b      	add	r3, r1
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	dde7      	ble.n	8005aa4 <lcdFillRect+0x78>
 8005ad4:	e000      	b.n	8005ad8 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8005ad6:	bf00      	nop
	}
}
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd90      	pop	{r4, r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000044 	.word	0x20000044

08005ae4 <lcdDrawImage>:

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	603a      	str	r2, [r7, #0]
 8005aee:	80fb      	strh	r3, [r7, #6]
 8005af0:	460b      	mov	r3, r1
 8005af2:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8005af4:	4b24      	ldr	r3, [pc, #144]	@ (8005b88 <lcdDrawImage+0xa4>)
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	88fa      	ldrh	r2, [r7, #6]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d23b      	bcs.n	8005b76 <lcdDrawImage+0x92>
 8005afe:	4b22      	ldr	r3, [pc, #136]	@ (8005b88 <lcdDrawImage+0xa4>)
 8005b00:	885b      	ldrh	r3, [r3, #2]
 8005b02:	88ba      	ldrh	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d236      	bcs.n	8005b76 <lcdDrawImage+0x92>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	8812      	ldrh	r2, [r2, #0]
 8005b0e:	4413      	add	r3, r2
 8005b10:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <lcdDrawImage+0xa4>)
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	dc30      	bgt.n	8005b7a <lcdDrawImage+0x96>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8005b18:	88bb      	ldrh	r3, [r7, #4]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	8852      	ldrh	r2, [r2, #2]
 8005b1e:	4413      	add	r3, r2
 8005b20:	4a19      	ldr	r2, [pc, #100]	@ (8005b88 <lcdDrawImage+0xa4>)
 8005b22:	8852      	ldrh	r2, [r2, #2]
 8005b24:	4293      	cmp	r3, r2
 8005b26:	dc2a      	bgt.n	8005b7e <lcdDrawImage+0x9a>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e01c      	b.n	8005b68 <lcdDrawImage+0x84>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	88bb      	ldrh	r3, [r7, #4]
 8005b34:	4413      	add	r3, r2
 8005b36:	b299      	uxth	r1, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	8892      	ldrh	r2, [r2, #4]
 8005b40:	4610      	mov	r0, r2
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	fb00 f202 	mul.w	r2, r0, r2
 8005b48:	441a      	add	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	889b      	ldrh	r3, [r3, #4]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	799b      	ldrb	r3, [r3, #6]
 8005b54:	08db      	lsrs	r3, r3, #3
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	fb90 f3f3 	sdiv	r3, r0, r3
 8005b5c:	88f8      	ldrh	r0, [r7, #6]
 8005b5e:	f000 fa4d 	bl	8005ffc <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3301      	adds	r3, #1
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	885b      	ldrh	r3, [r3, #2]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	dbdc      	blt.n	8005b2e <lcdDrawImage+0x4a>
 8005b74:	e004      	b.n	8005b80 <lcdDrawImage+0x9c>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8005b76:	bf00      	nop
 8005b78:	e002      	b.n	8005b80 <lcdDrawImage+0x9c>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <lcdDrawImage+0x9c>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8005b7e:	bf00      	nop
	}
}
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000044 	.word	0x20000044

08005b8c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4623      	mov	r3, r4
 8005b9c:	80fb      	strh	r3, [r7, #6]
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	80bb      	strh	r3, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8005baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bae:	4a4a      	ldr	r2, [pc, #296]	@ (8005cd8 <lcdDrawChar+0x14c>)
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	f280 808c 	bge.w	8005cd0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8005bb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005bbc:	4a46      	ldr	r2, [pc, #280]	@ (8005cd8 <lcdDrawChar+0x14c>)
 8005bbe:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	f280 8085 	bge.w	8005cd0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8005bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bca:	4a44      	ldr	r2, [pc, #272]	@ (8005cdc <lcdDrawChar+0x150>)
 8005bcc:	6892      	ldr	r2, [r2, #8]
 8005bce:	8892      	ldrh	r2, [r2, #4]
 8005bd0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	db7c      	blt.n	8005cd0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8005bd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005bda:	4a40      	ldr	r2, [pc, #256]	@ (8005cdc <lcdDrawChar+0x150>)
 8005bdc:	6892      	ldr	r2, [r2, #8]
 8005bde:	88d2      	ldrh	r2, [r2, #6]
 8005be0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	db74      	blt.n	8005cd0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8005be6:	4b3d      	ldr	r3, [pc, #244]	@ (8005cdc <lcdDrawChar+0x150>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	88db      	ldrh	r3, [r3, #6]
 8005bec:	08db      	lsrs	r3, r3, #3
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73bb      	strb	r3, [r7, #14]
 8005bfa:	e061      	b.n	8005cc0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	733b      	strb	r3, [r7, #12]
 8005c00:	e055      	b.n	8005cae <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8005c02:	4b36      	ldr	r3, [pc, #216]	@ (8005cdc <lcdDrawChar+0x150>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	3a20      	subs	r2, #32
 8005c0c:	4933      	ldr	r1, [pc, #204]	@ (8005cdc <lcdDrawChar+0x150>)
 8005c0e:	6889      	ldr	r1, [r1, #8]
 8005c10:	88c9      	ldrh	r1, [r1, #6]
 8005c12:	fb01 f202 	mul.w	r2, r1, r2
 8005c16:	7ab9      	ldrb	r1, [r7, #10]
 8005c18:	fb02 f101 	mul.w	r1, r2, r1
 8005c1c:	7bba      	ldrb	r2, [r7, #14]
 8005c1e:	7ab8      	ldrb	r0, [r7, #10]
 8005c20:	fb00 f202 	mul.w	r2, r0, r2
 8005c24:	4411      	add	r1, r2
 8005c26:	7b3a      	ldrb	r2, [r7, #12]
 8005c28:	440a      	add	r2, r1
 8005c2a:	4413      	add	r3, r2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8005c30:	2300      	movs	r3, #0
 8005c32:	72fb      	strb	r3, [r7, #11]
 8005c34:	e032      	b.n	8005c9c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8005c36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da12      	bge.n	8005c64 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	4413      	add	r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	b298      	uxth	r0, r3
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	88bb      	ldrh	r3, [r7, #4]
 8005c56:	4413      	add	r3, r2
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	883a      	ldrh	r2, [r7, #0]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f7ff fc7f 	bl	8005560 <lcdDrawPixel>
 8005c62:	e015      	b.n	8005c90 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8005c64:	8c3a      	ldrh	r2, [r7, #32]
 8005c66:	883b      	ldrh	r3, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d011      	beq.n	8005c90 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8005c6c:	7afb      	ldrb	r3, [r7, #11]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	4413      	add	r3, r2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	b298      	uxth	r0, r3
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	88bb      	ldrh	r3, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	8c3a      	ldrh	r2, [r7, #32]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f7ff fc68 	bl	8005560 <lcdDrawPixel>
				}
				line <<= 1;
 8005c90:	7b7b      	ldrb	r3, [r7, #13]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	72fb      	strb	r3, [r7, #11]
 8005c9c:	7afb      	ldrb	r3, [r7, #11]
 8005c9e:	2b07      	cmp	r3, #7
 8005ca0:	d9c9      	bls.n	8005c36 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8005ca8:	7b3b      	ldrb	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	733b      	strb	r3, [r7, #12]
 8005cae:	7b3a      	ldrb	r2, [r7, #12]
 8005cb0:	7abb      	ldrb	r3, [r7, #10]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d3a5      	bcc.n	8005c02 <lcdDrawChar+0x76>
		}

		xP = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	73bb      	strb	r3, [r7, #14]
 8005cc0:	7bbb      	ldrb	r3, [r7, #14]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <lcdDrawChar+0x150>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	88db      	ldrh	r3, [r3, #6]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d396      	bcc.n	8005bfc <lcdDrawChar+0x70>
 8005cce:	e000      	b.n	8005cd2 <lcdDrawChar+0x146>
		return;
 8005cd0:	bf00      	nop
	}
}
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd90      	pop	{r4, r7, pc}
 8005cd8:	20000044 	.word	0x20000044
 8005cdc:	2000004c 	.word	0x2000004c

08005ce0 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8005ce0:	b40f      	push	{r0, r1, r2, r3}
 8005ce2:	b590      	push	{r4, r7, lr}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8005ce8:	f107 031c 	add.w	r3, r7, #28
 8005cec:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	69b9      	ldr	r1, [r7, #24]
 8005cf2:	483d      	ldr	r0, [pc, #244]	@ (8005de8 <lcdPrintf+0x108>)
 8005cf4:	f007 fdda 	bl	800d8ac <vsiprintf>
	va_end(lst);

	p = buf;
 8005cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8005de8 <lcdPrintf+0x108>)
 8005cfa:	607b      	str	r3, [r7, #4]
	while (*p)
 8005cfc:	e067      	b.n	8005dce <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b0a      	cmp	r3, #10
 8005d04:	d10c      	bne.n	8005d20 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8005d06:	4b39      	ldr	r3, [pc, #228]	@ (8005dec <lcdPrintf+0x10c>)
 8005d08:	885a      	ldrh	r2, [r3, #2]
 8005d0a:	4b39      	ldr	r3, [pc, #228]	@ (8005df0 <lcdPrintf+0x110>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	88db      	ldrh	r3, [r3, #6]
 8005d10:	4413      	add	r3, r2
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	4b35      	ldr	r3, [pc, #212]	@ (8005dec <lcdPrintf+0x10c>)
 8005d16:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8005d18:	4b34      	ldr	r3, [pc, #208]	@ (8005dec <lcdPrintf+0x10c>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	e04a      	b.n	8005db6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b0d      	cmp	r3, #13
 8005d26:	d046      	beq.n	8005db6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b09      	cmp	r3, #9
 8005d2e:	d10b      	bne.n	8005d48 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8005d30:	4b2e      	ldr	r3, [pc, #184]	@ (8005dec <lcdPrintf+0x10c>)
 8005d32:	881a      	ldrh	r2, [r3, #0]
 8005d34:	4b2e      	ldr	r3, [pc, #184]	@ (8005df0 <lcdPrintf+0x110>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	889b      	ldrh	r3, [r3, #4]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	4b2a      	ldr	r3, [pc, #168]	@ (8005dec <lcdPrintf+0x10c>)
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	e036      	b.n	8005db6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8005d48:	4b28      	ldr	r3, [pc, #160]	@ (8005dec <lcdPrintf+0x10c>)
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b218      	sxth	r0, r3
 8005d4e:	4b27      	ldr	r3, [pc, #156]	@ (8005dec <lcdPrintf+0x10c>)
 8005d50:	885b      	ldrh	r3, [r3, #2]
 8005d52:	b219      	sxth	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	781a      	ldrb	r2, [r3, #0]
 8005d58:	4b25      	ldr	r3, [pc, #148]	@ (8005df0 <lcdPrintf+0x110>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	b29c      	uxth	r4, r3
 8005d5e:	4b24      	ldr	r3, [pc, #144]	@ (8005df0 <lcdPrintf+0x110>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	4623      	mov	r3, r4
 8005d68:	f7ff ff10 	bl	8005b8c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8005d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dec <lcdPrintf+0x10c>)
 8005d6e:	881a      	ldrh	r2, [r3, #0]
 8005d70:	4b1f      	ldr	r3, [pc, #124]	@ (8005df0 <lcdPrintf+0x110>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	889b      	ldrh	r3, [r3, #4]
 8005d76:	4413      	add	r3, r2
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dec <lcdPrintf+0x10c>)
 8005d7c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005df0 <lcdPrintf+0x110>)
 8005d80:	7b1b      	ldrb	r3, [r3, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d017      	beq.n	8005db6 <lcdPrintf+0xd6>
 8005d86:	4b19      	ldr	r3, [pc, #100]	@ (8005dec <lcdPrintf+0x10c>)
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4b19      	ldr	r3, [pc, #100]	@ (8005df4 <lcdPrintf+0x114>)
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	4619      	mov	r1, r3
 8005d92:	4b17      	ldr	r3, [pc, #92]	@ (8005df0 <lcdPrintf+0x110>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	889b      	ldrh	r3, [r3, #4]
 8005d98:	1acb      	subs	r3, r1, r3
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	dd0b      	ble.n	8005db6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8005d9e:	4b13      	ldr	r3, [pc, #76]	@ (8005dec <lcdPrintf+0x10c>)
 8005da0:	885a      	ldrh	r2, [r3, #2]
 8005da2:	4b13      	ldr	r3, [pc, #76]	@ (8005df0 <lcdPrintf+0x110>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	88db      	ldrh	r3, [r3, #6]
 8005da8:	4413      	add	r3, r2
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	4b0f      	ldr	r3, [pc, #60]	@ (8005dec <lcdPrintf+0x10c>)
 8005dae:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8005db0:	4b0e      	ldr	r3, [pc, #56]	@ (8005dec <lcdPrintf+0x10c>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3301      	adds	r3, #1
 8005dba:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005dec <lcdPrintf+0x10c>)
 8005dbe:	885a      	ldrh	r2, [r3, #2]
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <lcdPrintf+0x114>)
 8005dc2:	885b      	ldrh	r3, [r3, #2]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d302      	bcc.n	8005dce <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8005dc8:	4b08      	ldr	r3, [pc, #32]	@ (8005dec <lcdPrintf+0x10c>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	805a      	strh	r2, [r3, #2]
	while (*p)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d193      	bne.n	8005cfe <lcdPrintf+0x1e>
		}
	}
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005de2:	b004      	add	sp, #16
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	2000098c 	.word	0x2000098c
 8005dec:	20000984 	.word	0x20000984
 8005df0:	2000004c 	.word	0x2000004c
 8005df4:	20000044 	.word	0x20000044

08005df8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8005e00:	4a04      	ldr	r2, [pc, #16]	@ (8005e14 <lcdSetTextFont+0x1c>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6093      	str	r3, [r2, #8]
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	2000004c 	.word	0x2000004c

08005e18 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	460a      	mov	r2, r1
 8005e22:	80fb      	strh	r3, [r7, #6]
 8005e24:	4613      	mov	r3, r2
 8005e26:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	4a05      	ldr	r2, [pc, #20]	@ (8005e40 <lcdSetTextColor+0x28>)
 8005e2c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8005e2e:	88bb      	ldrh	r3, [r7, #4]
 8005e30:	4a03      	ldr	r2, [pc, #12]	@ (8005e40 <lcdSetTextColor+0x28>)
 8005e32:	6053      	str	r3, [r2, #4]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	2000004c 	.word	0x2000004c

08005e44 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8005e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8005e54:	2036      	movs	r0, #54	@ 0x36
 8005e56:	f000 f923 	bl	80060a0 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8005e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005e5c:	791b      	ldrb	r3, [r3, #4]
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d83e      	bhi.n	8005ee0 <lcdSetOrientation+0x9c>
 8005e62:	a201      	add	r2, pc, #4	@ (adr r2, 8005e68 <lcdSetOrientation+0x24>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005ead 	.word	0x08005ead
 8005e70:	08005e93 	.word	0x08005e93
 8005e74:	08005ec7 	.word	0x08005ec7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8005e78:	4b23      	ldr	r3, [pc, #140]	@ (8005f08 <lcdSetOrientation+0xc4>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 f91f 	bl	80060c0 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8005e82:	4b20      	ldr	r3, [pc, #128]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005e84:	22f0      	movs	r2, #240	@ 0xf0
 8005e86:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8005e88:	4b1e      	ldr	r3, [pc, #120]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005e8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005e8e:	805a      	strh	r2, [r3, #2]
			break;
 8005e90:	e027      	b.n	8005ee2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8005e92:	4b1e      	ldr	r3, [pc, #120]	@ (8005f0c <lcdSetOrientation+0xc8>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f912 	bl	80060c0 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8005e9c:	4b19      	ldr	r3, [pc, #100]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005e9e:	22f0      	movs	r2, #240	@ 0xf0
 8005ea0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8005ea2:	4b18      	ldr	r3, [pc, #96]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005ea4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005ea8:	805a      	strh	r2, [r3, #2]
			break;
 8005eaa:	e01a      	b.n	8005ee2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8005eac:	4b18      	ldr	r3, [pc, #96]	@ (8005f10 <lcdSetOrientation+0xcc>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f905 	bl	80060c0 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8005eb6:	4b13      	ldr	r3, [pc, #76]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005eb8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005ebc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8005ebe:	4b11      	ldr	r3, [pc, #68]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005ec0:	22f0      	movs	r2, #240	@ 0xf0
 8005ec2:	805a      	strh	r2, [r3, #2]
			break;
 8005ec4:	e00d      	b.n	8005ee2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8005ec6:	4b13      	ldr	r3, [pc, #76]	@ (8005f14 <lcdSetOrientation+0xd0>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f8f8 	bl	80060c0 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005ed2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005ed6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005eda:	22f0      	movs	r2, #240	@ 0xf0
 8005edc:	805a      	strh	r2, [r3, #2]
			break;
 8005ede:	e000      	b.n	8005ee2 <lcdSetOrientation+0x9e>
		default:
			break;
 8005ee0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8005ee2:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <lcdSetOrientation+0xc0>)
 8005eec:	885b      	ldrh	r3, [r3, #2]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	f000 f829 	bl	8005f4c <lcdSetWindow>
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000044 	.word	0x20000044
 8005f08:	20000988 	.word	0x20000988
 8005f0c:	2000098a 	.word	0x2000098a
 8005f10:	20000989 	.word	0x20000989
 8005f14:	2000098b 	.word	0x2000098b

08005f18 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	460a      	mov	r2, r1
 8005f22:	80fb      	strh	r3, [r7, #6]
 8005f24:	4613      	mov	r3, r2
 8005f26:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8005f28:	4a07      	ldr	r2, [pc, #28]	@ (8005f48 <lcdSetCursor+0x30>)
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8005f2e:	4a06      	ldr	r2, [pc, #24]	@ (8005f48 <lcdSetCursor+0x30>)
 8005f30:	88bb      	ldrh	r3, [r7, #4]
 8005f32:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8005f34:	88bb      	ldrh	r3, [r7, #4]
 8005f36:	88fa      	ldrh	r2, [r7, #6]
 8005f38:	88b9      	ldrh	r1, [r7, #4]
 8005f3a:	88f8      	ldrh	r0, [r7, #6]
 8005f3c:	f000 f806 	bl	8005f4c <lcdSetWindow>
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000984 	.word	0x20000984

08005f4c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8005f4c:	b590      	push	{r4, r7, lr}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	80fb      	strh	r3, [r7, #6]
 8005f5e:	4603      	mov	r3, r0
 8005f60:	80bb      	strh	r3, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	807b      	strh	r3, [r7, #2]
 8005f66:	4613      	mov	r3, r2
 8005f68:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8005f6a:	202a      	movs	r0, #42	@ 0x2a
 8005f6c:	f000 f898 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 f8a2 	bl	80060c0 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f89c 	bl	80060c0 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8005f88:	887b      	ldrh	r3, [r7, #2]
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f896 	bl	80060c0 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8005f94:	887b      	ldrh	r3, [r7, #2]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f890 	bl	80060c0 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8005fa0:	202b      	movs	r0, #43	@ 0x2b
 8005fa2:	f000 f87d 	bl	80060a0 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8005fa6:	88bb      	ldrh	r3, [r7, #4]
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f887 	bl	80060c0 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f881 	bl	80060c0 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8005fbe:	883b      	ldrh	r3, [r7, #0]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 f87b 	bl	80060c0 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8005fca:	883b      	ldrh	r3, [r7, #0]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 f875 	bl	80060c0 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8005fd6:	202c      	movs	r0, #44	@ 0x2c
 8005fd8:	f000 f862 	bl	80060a0 <lcdWriteCommand>
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd90      	pop	{r4, r7, pc}

08005fe4 <lcdBacklightOn>:
{
	LCD_BL_OFF();
}

void lcdBacklightOn(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
	LCD_BL_ON();
 8005fe8:	2201      	movs	r2, #1
 8005fea:	2102      	movs	r1, #2
 8005fec:	4802      	ldr	r0, [pc, #8]	@ (8005ff8 <lcdBacklightOn+0x14>)
 8005fee:	f003 f98b 	bl	8009308 <HAL_GPIO_WritePin>
}
 8005ff2:	bf00      	nop
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40020400 	.word	0x40020400

08005ffc <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60ba      	str	r2, [r7, #8]
 8006004:	607b      	str	r3, [r7, #4]
 8006006:	4603      	mov	r3, r0
 8006008:	81fb      	strh	r3, [r7, #14]
 800600a:	460b      	mov	r3, r1
 800600c:	81bb      	strh	r3, [r7, #12]
    uint32_t i = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
    lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8006012:	4b1d      	ldr	r3, [pc, #116]	@ (8006088 <lcdDrawPixels+0x8c>)
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	4b1b      	ldr	r3, [pc, #108]	@ (8006088 <lcdDrawPixels+0x8c>)
 800601c:	885b      	ldrh	r3, [r3, #2]
 800601e:	3b01      	subs	r3, #1
 8006020:	b29b      	uxth	r3, r3
 8006022:	89b9      	ldrh	r1, [r7, #12]
 8006024:	89f8      	ldrh	r0, [r7, #14]
 8006026:	f7ff ff91 	bl	8005f4c <lcdSetWindow>
    uint16_t currentX = x;
 800602a:	89fb      	ldrh	r3, [r7, #14]
 800602c:	827b      	strh	r3, [r7, #18]

    while (i < dataLength)
 800602e:	e022      	b.n	8006076 <lcdDrawPixels+0x7a>
    {
        if (data[i] != 0x2589)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	f242 5289 	movw	r2, #9609	@ 0x2589
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <lcdDrawPixels+0x6e>
        {
            lcdSetWindow(currentX, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8006042:	4b11      	ldr	r3, [pc, #68]	@ (8006088 <lcdDrawPixels+0x8c>)
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	4b0f      	ldr	r3, [pc, #60]	@ (8006088 <lcdDrawPixels+0x8c>)
 800604c:	885b      	ldrh	r3, [r3, #2]
 800604e:	3b01      	subs	r3, #1
 8006050:	b29b      	uxth	r3, r3
 8006052:	89b9      	ldrh	r1, [r7, #12]
 8006054:	8a78      	ldrh	r0, [r7, #18]
 8006056:	f7ff ff79 	bl	8005f4c <lcdSetWindow>
            lcdWriteData(data[i]);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4413      	add	r3, r2
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f000 f82b 	bl	80060c0 <lcdWriteData>
        }
        currentX++;
 800606a:	8a7b      	ldrh	r3, [r7, #18]
 800606c:	3301      	adds	r3, #1
 800606e:	827b      	strh	r3, [r7, #18]
        i++;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	3301      	adds	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
    while (i < dataLength)
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	429a      	cmp	r2, r3
 800607c:	d3d8      	bcc.n	8006030 <lcdDrawPixels+0x34>
    }
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000044 	.word	0x20000044

0800608c <lcdReset>:
static void lcdReset(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8006090:	2001      	movs	r0, #1
 8006092:	f000 f805 	bl	80060a0 <lcdWriteCommand>
	HAL_Delay(50);
 8006096:	2032      	movs	r0, #50	@ 0x32
 8006098:	f002 fad0 	bl	800863c <HAL_Delay>
}
 800609c:	bf00      	nop
 800609e:	bd80      	pop	{r7, pc}

080060a0 <lcdWriteCommand>:
// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 80060aa:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80060ae:	79fa      	ldrb	r2, [r7, #7]
 80060b0:	b292      	uxth	r2, r2
 80060b2:	801a      	strh	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 80060ca:	4a04      	ldr	r2, [pc, #16]	@ (80060dc <lcdWriteData+0x1c>)
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	8013      	strh	r3, [r2, #0]
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	60080000 	.word	0x60080000

080060e0 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 80060e0:	b490      	push	{r4, r7}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	4611      	mov	r1, r2
 80060ec:	461a      	mov	r2, r3
 80060ee:	4623      	mov	r3, r4
 80060f0:	71fb      	strb	r3, [r7, #7]
 80060f2:	4603      	mov	r3, r0
 80060f4:	71bb      	strb	r3, [r7, #6]
 80060f6:	460b      	mov	r3, r1
 80060f8:	717b      	strb	r3, [r7, #5]
 80060fa:	4613      	mov	r3, r2
 80060fc:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8006102:	7f3b      	ldrb	r3, [r7, #28]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <lcdBuildMemoryAccessControlConfig+0x30>
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8006110:	7e3b      	ldrb	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <lcdBuildMemoryAccessControlConfig+0x3e>
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	f043 0308 	orr.w	r3, r3, #8
 800611c:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 800611e:	793b      	ldrb	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <lcdBuildMemoryAccessControlConfig+0x4c>
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	f043 0310 	orr.w	r3, r3, #16
 800612a:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 800612c:	797b      	ldrb	r3, [r7, #5]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <lcdBuildMemoryAccessControlConfig+0x5a>
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	f043 0320 	orr.w	r3, r3, #32
 8006138:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 800613a:	79bb      	ldrb	r3, [r7, #6]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <lcdBuildMemoryAccessControlConfig+0x68>
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006146:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <lcdBuildMemoryAccessControlConfig+0x76>
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006154:	73fb      	strb	r3, [r7, #15]
  return value;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bc90      	pop	{r4, r7}
 8006160:	4770      	bx	lr
	...

08006164 <MX_USART1_UART_Init>:




static void MX_USART1_UART_Init(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006168:	4b11      	ldr	r3, [pc, #68]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 800616a:	4a12      	ldr	r2, [pc, #72]	@ (80061b4 <MX_USART1_UART_Init+0x50>)
 800616c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800616e:	4b10      	ldr	r3, [pc, #64]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 8006170:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006176:	4b0e      	ldr	r3, [pc, #56]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 8006178:	2200      	movs	r2, #0
 800617a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800617c:	4b0c      	ldr	r3, [pc, #48]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 800617e:	2200      	movs	r2, #0
 8006180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006182:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 8006184:	2200      	movs	r2, #0
 8006186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006188:	4b09      	ldr	r3, [pc, #36]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 800618a:	220c      	movs	r2, #12
 800618c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800618e:	4b08      	ldr	r3, [pc, #32]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 8006190:	2200      	movs	r2, #0
 8006192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006194:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 8006196:	2200      	movs	r2, #0
 8006198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800619a:	4805      	ldr	r0, [pc, #20]	@ (80061b0 <MX_USART1_UART_Init+0x4c>)
 800619c:	f005 f85c 	bl	800b258 <HAL_UART_Init>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80061a6:	f000 ff6f 	bl	8007088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200013c0 	.word	0x200013c0
 80061b4:	40011000 	.word	0x40011000

080061b8 <uartInit>:



void uartInit()
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 80061bc:	f7ff ffd2 	bl	8006164 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, &data1, 1);
 80061c0:	2201      	movs	r2, #1
 80061c2:	4903      	ldr	r1, [pc, #12]	@ (80061d0 <uartInit+0x18>)
 80061c4:	4803      	ldr	r0, [pc, #12]	@ (80061d4 <uartInit+0x1c>)
 80061c6:	f005 f9b9 	bl	800b53c <HAL_UART_Receive_IT>
}
 80061ca:	bf00      	nop
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	2000005c 	.word	0x2000005c
 80061d4:	200013c0 	.word	0x200013c0

080061d8 <extract_value>:




// Định nghĩa các hàm
void extract_value(char *src, const char *key, char *value, int value_size) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
    char *start = strstr(src, key);
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f007 fba3 	bl	800d934 <strstr>
 80061ee:	6178      	str	r0, [r7, #20]
    if (start) {
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d02d      	beq.n	8006252 <extract_value+0x7a>
        start += strlen(key) + 2; // Bỏ qua key và ký tự ":
 80061f6:	68b8      	ldr	r0, [r7, #8]
 80061f8:	f7f9 ffea 	bl	80001d0 <strlen>
 80061fc:	4603      	mov	r3, r0
 80061fe:	3302      	adds	r3, #2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4413      	add	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
        char *end = strchr(start, ',');
 8006206:	212c      	movs	r1, #44	@ 0x2c
 8006208:	6978      	ldr	r0, [r7, #20]
 800620a:	f007 fb61 	bl	800d8d0 <strchr>
 800620e:	61f8      	str	r0, [r7, #28]
        if (!end) end = strchr(start, '}');
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <extract_value+0x48>
 8006216:	217d      	movs	r1, #125	@ 0x7d
 8006218:	6978      	ldr	r0, [r7, #20]
 800621a:	f007 fb59 	bl	800d8d0 <strchr>
 800621e:	61f8      	str	r0, [r7, #28]
        if (end) {
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d015      	beq.n	8006252 <extract_value+0x7a>
            int len = end - start;
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	61bb      	str	r3, [r7, #24]
            if (len >= value_size) len = value_size - 1;
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	db02      	blt.n	800623c <extract_value+0x64>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	3b01      	subs	r3, #1
 800623a:	61bb      	str	r3, [r7, #24]
            strncpy(value, start, len);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	461a      	mov	r2, r3
 8006240:	6979      	ldr	r1, [r7, #20]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f007 fb63 	bl	800d90e <strncpy>
            value[len] = '\0';
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8006252:	bf00      	nop
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <extract_array>:

void extract_array(char *src, const char *key, char result[][11], int *count) {
 800625a:	b590      	push	{r4, r7, lr}
 800625c:	b0cb      	sub	sp, #300	@ 0x12c
 800625e:	af00      	add	r7, sp, #0
 8006260:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8006264:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8006268:	6020      	str	r0, [r4, #0]
 800626a:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 800626e:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8006272:	6001      	str	r1, [r0, #0]
 8006274:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8006278:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 800627c:	600a      	str	r2, [r1, #0]
 800627e:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8006282:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8006286:	6013      	str	r3, [r2, #0]
    char *start = strstr(src, key);
 8006288:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800628c:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8006290:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006294:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006298:	6811      	ldr	r1, [r2, #0]
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	f007 fb4a 	bl	800d934 <strstr>
 80062a0:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (start) {
 80062a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8099 	beq.w	80063e0 <extract_array+0x186>
        start = strchr(start, '[') + 1; // Tìm '['
 80062ae:	215b      	movs	r1, #91	@ 0x5b
 80062b0:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80062b4:	f007 fb0c 	bl	800d8d0 <strchr>
 80062b8:	4603      	mov	r3, r0
 80062ba:	3301      	adds	r3, #1
 80062bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        char *end = strchr(start, ']'); // Tìm ']'
 80062c0:	215d      	movs	r1, #93	@ 0x5d
 80062c2:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80062c6:	f007 fb03 	bl	800d8d0 <strchr>
 80062ca:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
        char temp[256];
        int idx = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        while (start < end && idx < *count) {
 80062d4:	e06c      	b.n	80063b0 <extract_array+0x156>
            char *comma = strchr(start, ',');
 80062d6:	212c      	movs	r1, #44	@ 0x2c
 80062d8:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80062dc:	f007 faf8 	bl	800d8d0 <strchr>
 80062e0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
            if (comma == NULL || comma > end) comma = end;
 80062e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <extract_array+0x9e>
 80062ec:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80062f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d903      	bls.n	8006300 <extract_array+0xa6>
 80062f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            int len = comma - start;
 8006300:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006304:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            strncpy(temp, start, len);
 800630e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006312:	f107 0314 	add.w	r3, r7, #20
 8006316:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800631a:	4618      	mov	r0, r3
 800631c:	f007 faf7 	bl	800d90e <strncpy>
            temp[len] = '\0';
 8006320:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006324:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632c:	4413      	add	r3, r2
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
            strcpy(result[idx], temp + 1); // Bỏ dấu "
 8006332:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	4413      	add	r3, r2
 8006340:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8006344:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	441a      	add	r2, r3
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	3301      	adds	r3, #1
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f007 fb86 	bl	800da66 <strcpy>
            result[idx][strlen(result[idx]) - 1] = '\0';
 800635a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800636c:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	18d4      	adds	r4, r2, r3
 8006374:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8006386:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	4413      	add	r3, r2
 800638e:	4618      	mov	r0, r3
 8006390:	f7f9 ff1e 	bl	80001d0 <strlen>
 8006394:	4603      	mov	r3, r0
 8006396:	3b01      	subs	r3, #1
 8006398:	2200      	movs	r2, #0
 800639a:	54e2      	strb	r2, [r4, r3]
            start = comma + 1;
 800639c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a0:	3301      	adds	r3, #1
 80063a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            idx++;
 80063a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80063aa:	3301      	adds	r3, #1
 80063ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        while (start < end && idx < *count) {
 80063b0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80063b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d209      	bcs.n	80063d0 <extract_array+0x176>
 80063bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80063c0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80063cc:	429a      	cmp	r2, r3
 80063ce:	db82      	blt.n	80062d6 <extract_array+0x7c>
        }
        *count = idx;
 80063d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80063d4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80063de:	601a      	str	r2, [r3, #0]
    }
}
 80063e0:	bf00      	nop
 80063e2:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd90      	pop	{r4, r7, pc}

080063ea <extract_float_array>:

void extract_float_array(char *src, const char *key, float *result, int *count, char *search_start) {
 80063ea:	b590      	push	{r4, r7, lr}
 80063ec:	b08f      	sub	sp, #60	@ 0x3c
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
    char *start = strstr(search_start, key);
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80063fc:	f007 fa9a 	bl	800d934 <strstr>
 8006400:	6378      	str	r0, [r7, #52]	@ 0x34
    if (start) {
 8006402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006404:	2b00      	cmp	r3, #0
 8006406:	d05c      	beq.n	80064c2 <extract_float_array+0xd8>
        start = strchr(start, '['); // Tìm '['
 8006408:	215b      	movs	r1, #91	@ 0x5b
 800640a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800640c:	f007 fa60 	bl	800d8d0 <strchr>
 8006410:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!start) return;
 8006412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006414:	2b00      	cmp	r3, #0
 8006416:	d051      	beq.n	80064bc <extract_float_array+0xd2>
        start += 1; // Bỏ qua '['
 8006418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641a:	3301      	adds	r3, #1
 800641c:	637b      	str	r3, [r7, #52]	@ 0x34
        char *end = strchr(start, ']'); // Tìm ']'
 800641e:	215d      	movs	r1, #93	@ 0x5d
 8006420:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006422:	f007 fa55 	bl	800d8d0 <strchr>
 8006426:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (!end) return;
 8006428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d048      	beq.n	80064c0 <extract_float_array+0xd6>

        char temp[16];
        int idx = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	633b      	str	r3, [r7, #48]	@ 0x30

        while (start < end && idx < *count) {
 8006432:	e036      	b.n	80064a2 <extract_float_array+0xb8>
            char *comma = strchr(start, ',');
 8006434:	212c      	movs	r1, #44	@ 0x2c
 8006436:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006438:	f007 fa4a 	bl	800d8d0 <strchr>
 800643c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (!comma || comma > end) comma = end;
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <extract_float_array+0x62>
 8006444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	429a      	cmp	r2, r3
 800644a:	d901      	bls.n	8006450 <extract_float_array+0x66>
 800644c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            int len = comma - start;
 8006450:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
            if (len < sizeof(temp)) {
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	2b0f      	cmp	r3, #15
 800645c:	d81e      	bhi.n	800649c <extract_float_array+0xb2>
                strncpy(temp, start, len);
 800645e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006460:	f107 0314 	add.w	r3, r7, #20
 8006464:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006466:	4618      	mov	r0, r3
 8006468:	f007 fa51 	bl	800d90e <strncpy>
                temp[len] = '\0';
 800646c:	f107 0214 	add.w	r2, r7, #20
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	4413      	add	r3, r2
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
                result[idx] = atof(temp); // Chuyển chuỗi thành số thực
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	4618      	mov	r0, r3
 800647e:	f006 f923 	bl	800c6c8 <atof>
 8006482:	ec51 0b10 	vmov	r0, r1, d0
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	18d4      	adds	r4, r2, r3
 800648e:	f7fa fb95 	bl	8000bbc <__aeabi_d2f>
 8006492:	4603      	mov	r3, r0
 8006494:	6023      	str	r3, [r4, #0]
                idx++;
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	3301      	adds	r3, #1
 800649a:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            start = comma + 1;
 800649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649e:	3301      	adds	r3, #1
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
        while (start < end && idx < *count) {
 80064a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d204      	bcs.n	80064b4 <extract_float_array+0xca>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b0:	429a      	cmp	r2, r3
 80064b2:	dbbf      	blt.n	8006434 <extract_float_array+0x4a>
        }
        *count = idx; // Cập nhật số lượng phần tử đã xử lý
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <extract_float_array+0xd8>
        if (!start) return;
 80064bc:	bf00      	nop
 80064be:	e000      	b.n	80064c2 <extract_float_array+0xd8>
        if (!end) return;
 80064c0:	bf00      	nop
    }
}
 80064c2:	373c      	adds	r7, #60	@ 0x3c
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd90      	pop	{r4, r7, pc}

080064c8 <get_Temp_Max>:

void get_Temp_Max(char *src, float *result, char *search_start) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
    int count = MAX_DAYS;
 80064d4:	2307      	movs	r3, #7
 80064d6:	617b      	str	r3, [r7, #20]
    extract_float_array(src, "\"temperature_2m_max\"", result, &count, search_start);
 80064d8:	f107 0214 	add.w	r2, r7, #20
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4903      	ldr	r1, [pc, #12]	@ (80064f4 <get_Temp_Max+0x2c>)
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff ff7f 	bl	80063ea <extract_float_array>
}
 80064ec:	bf00      	nop
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	08010390 	.word	0x08010390

080064f8 <get_Temp_Min>:

void get_Temp_Min(char *src, float *result, char *search_start) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
    int count = MAX_DAYS;
 8006504:	2307      	movs	r3, #7
 8006506:	617b      	str	r3, [r7, #20]
    extract_float_array(src, "\"temperature_2m_min\"", result, &count, search_start);
 8006508:	f107 0214 	add.w	r2, r7, #20
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	4903      	ldr	r1, [pc, #12]	@ (8006524 <get_Temp_Min+0x2c>)
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f7ff ff67 	bl	80063ea <extract_float_array>
}
 800651c:	bf00      	nop
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	080103a8 	.word	0x080103a8

08006528 <get_Wind_Speed_Max>:

void get_Wind_Speed_Max(char *src, float *result, char *search_start) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
    int count = MAX_DAYS;
 8006534:	2307      	movs	r3, #7
 8006536:	617b      	str	r3, [r7, #20]
    extract_float_array(src, "\"wind_speed_10m_max\"", result, &count, search_start);
 8006538:	f107 0214 	add.w	r2, r7, #20
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	4903      	ldr	r1, [pc, #12]	@ (8006554 <get_Wind_Speed_Max+0x2c>)
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff ff4f 	bl	80063ea <extract_float_array>
}
 800654c:	bf00      	nop
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	080103c0 	.word	0x080103c0

08006558 <get_Weather_Code>:

void get_Weather_Code(char *src, float *result, char *search_start) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
    int count = MAX_DAYS;
 8006564:	2307      	movs	r3, #7
 8006566:	617b      	str	r3, [r7, #20]
    extract_float_array(src, "\"weather_code\"", result, &count, search_start);
 8006568:	f107 0214 	add.w	r2, r7, #20
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	4903      	ldr	r1, [pc, #12]	@ (8006584 <get_Weather_Code+0x2c>)
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff ff37 	bl	80063ea <extract_float_array>
}
 800657c:	bf00      	nop
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	080103d8 	.word	0x080103d8

08006588 <get_Humidity>:

int get_Humidity(char *src, char *search_start) {
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
    char value[16];
    extract_value(search_start, "\"relative_humidity_2m\"", value, sizeof(value));
 8006592:	f107 0208 	add.w	r2, r7, #8
 8006596:	2310      	movs	r3, #16
 8006598:	4906      	ldr	r1, [pc, #24]	@ (80065b4 <get_Humidity+0x2c>)
 800659a:	6838      	ldr	r0, [r7, #0]
 800659c:	f7ff fe1c 	bl	80061d8 <extract_value>
    return atoi(value); // Chuyển chuỗi sang số nguyên
 80065a0:	f107 0308 	add.w	r3, r7, #8
 80065a4:	4618      	mov	r0, r3
 80065a6:	f006 f892 	bl	800c6ce <atoi>
 80065aa:	4603      	mov	r3, r0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	080103e8 	.word	0x080103e8

080065b8 <split_date>:
void get_Time(void) {
	sscanf(RX_buffer, "Hour:%d, Min:%d, Day:%[^,], DATA_AVAILABLE:%s", &hour, &min, &date, &data_ready);
}
void split_date(const char *date, char *year, char *month, char *day) {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
    strncpy(year, date, 4);
 80065c6:	2204      	movs	r2, #4
 80065c8:	68f9      	ldr	r1, [r7, #12]
 80065ca:	68b8      	ldr	r0, [r7, #8]
 80065cc:	f007 f99f 	bl	800d90e <strncpy>
    year[4] = '\0';
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	3304      	adds	r3, #4
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]

    strncpy(month, date + 5, 2);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3305      	adds	r3, #5
 80065dc:	2202      	movs	r2, #2
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f007 f994 	bl	800d90e <strncpy>
    month[2] = '\0';
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3302      	adds	r3, #2
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]

    strncpy(day, date + 8, 2);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3308      	adds	r3, #8
 80065f2:	2202      	movs	r2, #2
 80065f4:	4619      	mov	r1, r3
 80065f6:	6838      	ldr	r0, [r7, #0]
 80065f8:	f007 f989 	bl	800d90e <strncpy>
    day[2] = '\0';
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	3302      	adds	r3, #2
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <upDateData>:
    case 99: return "Thunderstorm with heavy hail";
    default: return "Unknown";
  }
}
void upDateData()
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af02      	add	r7, sp, #8

    // Vòng lặp tiếp tục nhận dữ liệu cho đến khi hoàn tất
	  data_ready=0;
 8006612:	4b5a      	ldr	r3, [pc, #360]	@ (800677c <upDateData+0x170>)
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
	  uart_complete = 0;
 8006618:	4b59      	ldr	r3, [pc, #356]	@ (8006780 <upDateData+0x174>)
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
	  idx = 0;
 800661e:	4b59      	ldr	r3, [pc, #356]	@ (8006784 <upDateData+0x178>)
 8006620:	2200      	movs	r2, #0
 8006622:	801a      	strh	r2, [r3, #0]
	  hour = 0; min = 0;
 8006624:	4b58      	ldr	r3, [pc, #352]	@ (8006788 <upDateData+0x17c>)
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	4b58      	ldr	r3, [pc, #352]	@ (800678c <upDateData+0x180>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
	  data1 = '1';
 8006630:	4b57      	ldr	r3, [pc, #348]	@ (8006790 <upDateData+0x184>)
 8006632:	2231      	movs	r2, #49	@ 0x31
 8006634:	701a      	strb	r2, [r3, #0]
	  key1_flag = 0;
 8006636:	4b57      	ldr	r3, [pc, #348]	@ (8006794 <upDateData+0x188>)
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]
	  memset(date, 0, sizeof(date));;
 800663c:	220a      	movs	r2, #10
 800663e:	2100      	movs	r1, #0
 8006640:	4855      	ldr	r0, [pc, #340]	@ (8006798 <upDateData+0x18c>)
 8006642:	f007 f93d 	bl	800d8c0 <memset>
	  memset(RX_buffer, 0, sizeof(RX_buffer));
 8006646:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800664a:	2100      	movs	r1, #0
 800664c:	4853      	ldr	r0, [pc, #332]	@ (800679c <upDateData+0x190>)
 800664e:	f007 f937 	bl	800d8c0 <memset>
	  HAL_UART_Transmit(&huart1, "U", 1, 1000); // Gửi yêu cầu API
 8006652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006656:	2201      	movs	r2, #1
 8006658:	4951      	ldr	r1, [pc, #324]	@ (80067a0 <upDateData+0x194>)
 800665a:	4852      	ldr	r0, [pc, #328]	@ (80067a4 <upDateData+0x198>)
 800665c:	f004 fe4c 	bl	800b2f8 <HAL_UART_Transmit>


  //  while (data_ready!=1)
    	 while (date[1]==0||uart_complete!=1||HAL_UART_Receive(&huart1, (uint8_t *)&data2, 1, 10) != HAL_OK)
 8006660:	e072      	b.n	8006748 <upDateData+0x13c>
    {

    	if (checkXY(100,295,30,30))
 8006662:	231e      	movs	r3, #30
 8006664:	221e      	movs	r2, #30
 8006666:	f240 1127 	movw	r1, #295	@ 0x127
 800666a:	2064      	movs	r0, #100	@ 0x64
 800666c:	f001 ff08 	bl	8008480 <checkXY>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d17b      	bne.n	800676e <upDateData+0x162>
    	 	{
    		break;
    	 	}

    		  if (HAL_UART_Receive(&huart1, (uint8_t *)&data2, 1, 10) == HAL_OK)
 8006676:	230a      	movs	r3, #10
 8006678:	2201      	movs	r2, #1
 800667a:	494b      	ldr	r1, [pc, #300]	@ (80067a8 <upDateData+0x19c>)
 800667c:	4849      	ldr	r0, [pc, #292]	@ (80067a4 <upDateData+0x198>)
 800667e:	f004 fec6 	bl	800b40e <HAL_UART_Receive>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d15f      	bne.n	8006748 <upDateData+0x13c>
    		  {

    			  RX_buffer[idx++] = data2;
 8006688:	4b3e      	ldr	r3, [pc, #248]	@ (8006784 <upDateData+0x178>)
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	b291      	uxth	r1, r2
 8006690:	4a3c      	ldr	r2, [pc, #240]	@ (8006784 <upDateData+0x178>)
 8006692:	8011      	strh	r1, [r2, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	4b44      	ldr	r3, [pc, #272]	@ (80067a8 <upDateData+0x19c>)
 8006698:	7819      	ldrb	r1, [r3, #0]
 800669a:	4b40      	ldr	r3, [pc, #256]	@ (800679c <upDateData+0x190>)
 800669c:	5499      	strb	r1, [r3, r2]

    			  if(data2 == '\n')
 800669e:	4b42      	ldr	r3, [pc, #264]	@ (80067a8 <upDateData+0x19c>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b0a      	cmp	r3, #10
 80066a4:	d141      	bne.n	800672a <upDateData+0x11e>
    			  {
    				  uart_complete = 1;
 80066a6:	4b36      	ldr	r3, [pc, #216]	@ (8006780 <upDateData+0x174>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	701a      	strb	r2, [r3, #0]
    				  RX_buffer[idx] = '\0'; // Kết thúc chuỗi
 80066ac:	4b35      	ldr	r3, [pc, #212]	@ (8006784 <upDateData+0x178>)
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	4b3a      	ldr	r3, [pc, #232]	@ (800679c <upDateData+0x190>)
 80066b4:	2100      	movs	r1, #0
 80066b6:	5499      	strb	r1, [r3, r2]
    				  char *data_flag = strstr((char *)RX_buffer, "DATA_AVAILABLE:");
 80066b8:	493c      	ldr	r1, [pc, #240]	@ (80067ac <upDateData+0x1a0>)
 80066ba:	4838      	ldr	r0, [pc, #224]	@ (800679c <upDateData+0x190>)
 80066bc:	f007 f93a 	bl	800d934 <strstr>
 80066c0:	6078      	str	r0, [r7, #4]
    				  if (data_flag != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <upDateData+0xd4>
    				  {
    					  int temp = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	603b      	str	r3, [r7, #0]
    					  sscanf(data_flag, "DATA_AVAILABLE:%d", &temp);
 80066cc:	463b      	mov	r3, r7
 80066ce:	461a      	mov	r2, r3
 80066d0:	4937      	ldr	r1, [pc, #220]	@ (80067b0 <upDateData+0x1a4>)
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f007 f864 	bl	800d7a0 <siscanf>
    					  data_ready = (uint8_t)temp; // Gán giá trị vào biến data_ready
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	4b27      	ldr	r3, [pc, #156]	@ (800677c <upDateData+0x170>)
 80066de:	701a      	strb	r2, [r3, #0]
    				  }
    				  sscanf(RX_buffer, "Hour:%d, Min:%d, Day:%[^,], DATA_AVAILABLE:%s", &hour, &min, &date, &data_ready);
 80066e0:	4b26      	ldr	r3, [pc, #152]	@ (800677c <upDateData+0x170>)
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006798 <upDateData+0x18c>)
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	4b28      	ldr	r3, [pc, #160]	@ (800678c <upDateData+0x180>)
 80066ea:	4a27      	ldr	r2, [pc, #156]	@ (8006788 <upDateData+0x17c>)
 80066ec:	4931      	ldr	r1, [pc, #196]	@ (80067b4 <upDateData+0x1a8>)
 80066ee:	482b      	ldr	r0, [pc, #172]	@ (800679c <upDateData+0x190>)
 80066f0:	f007 f856 	bl	800d7a0 <siscanf>
    				  if(data_ready == 1)
 80066f4:	4b21      	ldr	r3, [pc, #132]	@ (800677c <upDateData+0x170>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <upDateData+0xf4>
    				  {
    					  get_Data_json(); // G�?i hàm xử lý JSON
 80066fc:	f000 f85c 	bl	80067b8 <get_Data_json>

    			      }

    		    		 if (data_ready == 1 && hour != 0 && min != 0)
 8006700:	4b1e      	ldr	r3, [pc, #120]	@ (800677c <upDateData+0x170>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d107      	bne.n	8006718 <upDateData+0x10c>
 8006708:	4b1f      	ldr	r3, [pc, #124]	@ (8006788 <upDateData+0x17c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <upDateData+0x10c>
 8006710:	4b1e      	ldr	r3, [pc, #120]	@ (800678c <upDateData+0x180>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d12c      	bne.n	8006772 <upDateData+0x166>
    		    		        {
    		    		            break; // Thoát khi đã nhận đủ dữ liệu (ví dụ giờ và phút khác 0)
    		    		        }

    				  //Clear_RX_Buffer(); // Reset buffer sau khi xử lý
    			      idx = 0; // Reset chỉ số buffer
 8006718:	4b1a      	ldr	r3, [pc, #104]	@ (8006784 <upDateData+0x178>)
 800671a:	2200      	movs	r2, #0
 800671c:	801a      	strh	r2, [r3, #0]
    		          memset(RX_buffer, 0, sizeof(RX_buffer));
 800671e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006722:	2100      	movs	r1, #0
 8006724:	481d      	ldr	r0, [pc, #116]	@ (800679c <upDateData+0x190>)
 8006726:	f007 f8cb 	bl	800d8c0 <memset>


    	          }
    			  if (idx >= RX_BUFFER_SIZE - 1)
 800672a:	4b16      	ldr	r3, [pc, #88]	@ (8006784 <upDateData+0x178>)
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8006732:	4293      	cmp	r3, r2
 8006734:	d908      	bls.n	8006748 <upDateData+0x13c>
    			  {
    				  memset(RX_buffer, 0, sizeof(RX_buffer));
 8006736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800673a:	2100      	movs	r1, #0
 800673c:	4817      	ldr	r0, [pc, #92]	@ (800679c <upDateData+0x190>)
 800673e:	f007 f8bf 	bl	800d8c0 <memset>
    				  idx = 0;
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <upDateData+0x178>)
 8006744:	2200      	movs	r2, #0
 8006746:	801a      	strh	r2, [r3, #0]
    	 while (date[1]==0||uart_complete!=1||HAL_UART_Receive(&huart1, (uint8_t *)&data2, 1, 10) != HAL_OK)
 8006748:	4b13      	ldr	r3, [pc, #76]	@ (8006798 <upDateData+0x18c>)
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d088      	beq.n	8006662 <upDateData+0x56>
 8006750:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <upDateData+0x174>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d184      	bne.n	8006662 <upDateData+0x56>
 8006758:	230a      	movs	r3, #10
 800675a:	2201      	movs	r2, #1
 800675c:	4912      	ldr	r1, [pc, #72]	@ (80067a8 <upDateData+0x19c>)
 800675e:	4811      	ldr	r0, [pc, #68]	@ (80067a4 <upDateData+0x198>)
 8006760:	f004 fe55 	bl	800b40e <HAL_UART_Receive>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	f47f af7b 	bne.w	8006662 <upDateData+0x56>
    			  }
    		  }

     }
}
 800676c:	e002      	b.n	8006774 <upDateData+0x168>
    		break;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <upDateData+0x168>
    		    		            break; // Thoát khi đã nhận đủ dữ liệu (ví dụ giờ và phút khác 0)
 8006772:	bf00      	nop
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20000a92 	.word	0x20000a92
 8006780:	20000a91 	.word	0x20000a91
 8006784:	20000a8e 	.word	0x20000a8e
 8006788:	20000a94 	.word	0x20000a94
 800678c:	20000a98 	.word	0x20000a98
 8006790:	2000005c 	.word	0x2000005c
 8006794:	20000a90 	.word	0x20000a90
 8006798:	20000a9c 	.word	0x20000a9c
 800679c:	20000bc0 	.word	0x20000bc0
 80067a0:	08010664 	.word	0x08010664
 80067a4:	200013c0 	.word	0x200013c0
 80067a8:	20000a8c 	.word	0x20000a8c
 80067ac:	08010668 	.word	0x08010668
 80067b0:	08010678 	.word	0x08010678
 80067b4:	08010400 	.word	0x08010400

080067b8 <get_Data_json>:



void get_Data_json() {
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b089      	sub	sp, #36	@ 0x24
 80067bc:	af02      	add	r7, sp, #8
	char *json_start = strstr((char *)RX_buffer, "{");
 80067be:	217b      	movs	r1, #123	@ 0x7b
 80067c0:	4836      	ldr	r0, [pc, #216]	@ (800689c <get_Data_json+0xe4>)
 80067c2:	f007 f885 	bl	800d8d0 <strchr>
 80067c6:	6138      	str	r0, [r7, #16]
	if (!json_start) {
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d062      	beq.n	8006894 <get_Data_json+0xdc>
		return; // Không tìm thấy JSON
	}
	char *daily_section = strstr(json_start, "\"daily\":");
 80067ce:	4934      	ldr	r1, [pc, #208]	@ (80068a0 <get_Data_json+0xe8>)
 80067d0:	6938      	ldr	r0, [r7, #16]
 80067d2:	f007 f8af 	bl	800d934 <strstr>
 80067d6:	60f8      	str	r0, [r7, #12]
	char *current_section = strstr(json_start, "\"current\":");
 80067d8:	4932      	ldr	r1, [pc, #200]	@ (80068a4 <get_Data_json+0xec>)
 80067da:	6938      	ldr	r0, [r7, #16]
 80067dc:	f007 f8aa 	bl	800d934 <strstr>
 80067e0:	60b8      	str	r0, [r7, #8]
	sscanf(RX_buffer, "Hour:%d, Min:%d, Day:%[^,],", &hour, &min, &date);
 80067e2:	4b31      	ldr	r3, [pc, #196]	@ (80068a8 <get_Data_json+0xf0>)
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	4b31      	ldr	r3, [pc, #196]	@ (80068ac <get_Data_json+0xf4>)
 80067e8:	4a31      	ldr	r2, [pc, #196]	@ (80068b0 <get_Data_json+0xf8>)
 80067ea:	4932      	ldr	r1, [pc, #200]	@ (80068b4 <get_Data_json+0xfc>)
 80067ec:	482b      	ldr	r0, [pc, #172]	@ (800689c <get_Data_json+0xe4>)
 80067ee:	f006 ffd7 	bl	800d7a0 <siscanf>
	if (daily_section && current_section) {
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d04e      	beq.n	8006896 <get_Data_json+0xde>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d04b      	beq.n	8006896 <get_Data_json+0xde>
		// Gọi các hàm xử lý
		int time_count = MAX_DAYS;
 80067fe:	2307      	movs	r3, #7
 8006800:	607b      	str	r3, [r7, #4]
		extract_array(json_start, "\"time\"", daily_time, &time_count);
 8006802:	1d3b      	adds	r3, r7, #4
 8006804:	4a2c      	ldr	r2, [pc, #176]	@ (80068b8 <get_Data_json+0x100>)
 8006806:	492d      	ldr	r1, [pc, #180]	@ (80068bc <get_Data_json+0x104>)
 8006808:	6938      	ldr	r0, [r7, #16]
 800680a:	f7ff fd26 	bl	800625a <extract_array>
		for (int i = 0; i < time_count; i++) {
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	e01f      	b.n	8006854 <get_Data_json+0x9c>
			split_date(daily_time[i], year[i], month[i], day[i]);
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4413      	add	r3, r2
 8006820:	4a25      	ldr	r2, [pc, #148]	@ (80068b8 <get_Data_json+0x100>)
 8006822:	1898      	adds	r0, r3, r2
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	4a24      	ldr	r2, [pc, #144]	@ (80068c0 <get_Data_json+0x108>)
 800682e:	1899      	adds	r1, r3, r2
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4613      	mov	r3, r2
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4413      	add	r3, r2
 8006838:	4a22      	ldr	r2, [pc, #136]	@ (80068c4 <get_Data_json+0x10c>)
 800683a:	189c      	adds	r4, r3, r2
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4613      	mov	r3, r2
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	4413      	add	r3, r2
 8006844:	4a20      	ldr	r2, [pc, #128]	@ (80068c8 <get_Data_json+0x110>)
 8006846:	4413      	add	r3, r2
 8006848:	4622      	mov	r2, r4
 800684a:	f7ff feb5 	bl	80065b8 <split_date>
		for (int i = 0; i < time_count; i++) {
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	3301      	adds	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	429a      	cmp	r2, r3
 800685a:	dbdb      	blt.n	8006814 <get_Data_json+0x5c>
		}
		get_Temp_Max(json_start, temp_max, daily_section);
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	491b      	ldr	r1, [pc, #108]	@ (80068cc <get_Data_json+0x114>)
 8006860:	6938      	ldr	r0, [r7, #16]
 8006862:	f7ff fe31 	bl	80064c8 <get_Temp_Max>
		get_Temp_Min(json_start, temp_min, daily_section);
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4919      	ldr	r1, [pc, #100]	@ (80068d0 <get_Data_json+0x118>)
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f7ff fe44 	bl	80064f8 <get_Temp_Min>
		get_Wind_Speed_Max(json_start, wind_max, daily_section);
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4918      	ldr	r1, [pc, #96]	@ (80068d4 <get_Data_json+0x11c>)
 8006874:	6938      	ldr	r0, [r7, #16]
 8006876:	f7ff fe57 	bl	8006528 <get_Wind_Speed_Max>
		get_Weather_Code(json_start, weather_code, daily_section);
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4916      	ldr	r1, [pc, #88]	@ (80068d8 <get_Data_json+0x120>)
 800687e:	6938      	ldr	r0, [r7, #16]
 8006880:	f7ff fe6a 	bl	8006558 <get_Weather_Code>
		humidity = get_Humidity(json_start, current_section);
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	6938      	ldr	r0, [r7, #16]
 8006888:	f7ff fe7e 	bl	8006588 <get_Humidity>
 800688c:	4603      	mov	r3, r0
 800688e:	4a13      	ldr	r2, [pc, #76]	@ (80068dc <get_Data_json+0x124>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	e000      	b.n	8006896 <get_Data_json+0xde>
		return; // Không tìm thấy JSON
 8006894:	bf00      	nop
	}
}
 8006896:	371c      	adds	r7, #28
 8006898:	46bd      	mov	sp, r7
 800689a:	bd90      	pop	{r4, r7, pc}
 800689c:	20000bc0 	.word	0x20000bc0
 80068a0:	0801068c 	.word	0x0801068c
 80068a4:	08010698 	.word	0x08010698
 80068a8:	20000a9c 	.word	0x20000a9c
 80068ac:	20000a98 	.word	0x20000a98
 80068b0:	20000a94 	.word	0x20000a94
 80068b4:	080106a4 	.word	0x080106a4
 80068b8:	20000aa8 	.word	0x20000aa8
 80068bc:	080106c0 	.word	0x080106c0
 80068c0:	20000af8 	.word	0x20000af8
 80068c4:	20000b1c 	.word	0x20000b1c
 80068c8:	20000b34 	.word	0x20000b34
 80068cc:	20000b4c 	.word	0x20000b4c
 80068d0:	20000b68 	.word	0x20000b68
 80068d4:	20000b84 	.word	0x20000b84
 80068d8:	20000ba0 	.word	0x20000ba0
 80068dc:	20000bbc 	.word	0x20000bbc

080068e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	initApp();
 80068e4:	f7fa fbcc 	bl	8001080 <initApp>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80068e8:	f001 fe36 	bl	8008558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80068ec:	f000 f832 	bl	8006954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80068f0:	f000 fa0a 	bl	8006d08 <MX_GPIO_Init>
  MX_DMA_Init();
 80068f4:	f000 f9e8 	bl	8006cc8 <MX_DMA_Init>
  MX_FSMC_Init();
 80068f8:	f000 fae8 	bl	8006ecc <MX_FSMC_Init>
  //MX_USART1_UART_Init();
  MX_RTC_Init();
 80068fc:	f000 f896 	bl	8006a2c <MX_RTC_Init>
  MX_TIM6_Init();
 8006900:	f000 f9ac 	bl	8006c5c <MX_TIM6_Init>
  MX_SPI1_Init();
 8006904:	f000 f8ec 	bl	8006ae0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006908:	f000 f920 	bl	8006b4c <MX_SPI2_Init>
  MX_TIM1_Init();
 800690c:	f000 f954 	bl	8006bb8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uartInit();
 8006910:	f7ff fc52 	bl	80061b8 <uartInit>
  LCD_BL_ON();
 8006914:	2201      	movs	r2, #1
 8006916:	2102      	movs	r1, #2
 8006918:	480c      	ldr	r0, [pc, #48]	@ (800694c <main+0x6c>)
 800691a:	f002 fcf5 	bl	8009308 <HAL_GPIO_WritePin>

  lcdBacklightOn();
 800691e:	f7ff fb61 	bl	8005fe4 <lcdBacklightOn>
  lcdInit();
 8006922:	f7fe fc7f 	bl	8005224 <lcdInit>
  lcdSetOrientation(LCD_ORIENTATION_PORTRAIT);
 8006926:	2000      	movs	r0, #0
 8006928:	f7ff fa8c 	bl	8005e44 <lcdSetOrientation>
  lcdFillRGB(COLOR_WHITE);
 800692c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006930:	f7fe fdec 	bl	800550c <lcdFillRGB>
  //lcdPrintf("", weatherStation2());
  // turnOnLCD();
   //turnLCD();
   TouchCalibrate();
 8006934:	f001 fd76 	bl	8008424 <TouchCalibrate>

   HAL_TIM_Base_Start_IT(&htim1);  // Bật Timer 1
 8006938:	4805      	ldr	r0, [pc, #20]	@ (8006950 <main+0x70>)
 800693a:	f004 f839 	bl	800a9b0 <HAL_TIM_Base_Start_IT>
  while (1)
  {



	  runScreen();
 800693e:	f7fa fbaf 	bl	80010a0 <runScreen>
	   controlButton();
 8006942:	f7fa fbb7 	bl	80010b4 <controlButton>
	  runScreen();
 8006946:	bf00      	nop
 8006948:	e7f9      	b.n	800693e <main+0x5e>
 800694a:	bf00      	nop
 800694c:	40020400 	.word	0x40020400
 8006950:	20001538 	.word	0x20001538

08006954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b094      	sub	sp, #80	@ 0x50
 8006958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800695a:	f107 0320 	add.w	r3, r7, #32
 800695e:	2230      	movs	r2, #48	@ 0x30
 8006960:	2100      	movs	r1, #0
 8006962:	4618      	mov	r0, r3
 8006964:	f006 ffac 	bl	800d8c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006968:	f107 030c 	add.w	r3, r7, #12
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	609a      	str	r2, [r3, #8]
 8006974:	60da      	str	r2, [r3, #12]
 8006976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006978:	2300      	movs	r3, #0
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	4b29      	ldr	r3, [pc, #164]	@ (8006a24 <SystemClock_Config+0xd0>)
 800697e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006980:	4a28      	ldr	r2, [pc, #160]	@ (8006a24 <SystemClock_Config+0xd0>)
 8006982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006986:	6413      	str	r3, [r2, #64]	@ 0x40
 8006988:	4b26      	ldr	r3, [pc, #152]	@ (8006a24 <SystemClock_Config+0xd0>)
 800698a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006994:	2300      	movs	r3, #0
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	4b23      	ldr	r3, [pc, #140]	@ (8006a28 <SystemClock_Config+0xd4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a22      	ldr	r2, [pc, #136]	@ (8006a28 <SystemClock_Config+0xd4>)
 800699e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b20      	ldr	r3, [pc, #128]	@ (8006a28 <SystemClock_Config+0xd4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80069b0:	230a      	movs	r3, #10
 80069b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80069b4:	2301      	movs	r3, #1
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80069b8:	2310      	movs	r3, #16
 80069ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80069bc:	2301      	movs	r3, #1
 80069be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80069c0:	2302      	movs	r3, #2
 80069c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80069c4:	2300      	movs	r3, #0
 80069c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80069c8:	2308      	movs	r3, #8
 80069ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80069cc:	23a8      	movs	r3, #168	@ 0xa8
 80069ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80069d0:	2302      	movs	r3, #2
 80069d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80069d4:	2304      	movs	r3, #4
 80069d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80069d8:	f107 0320 	add.w	r3, r7, #32
 80069dc:	4618      	mov	r0, r3
 80069de:	f002 fcc5 	bl	800936c <HAL_RCC_OscConfig>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80069e8:	f000 fb4e 	bl	8007088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069ec:	230f      	movs	r3, #15
 80069ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80069f0:	2302      	movs	r3, #2
 80069f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80069f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80069fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80069fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006a04:	f107 030c 	add.w	r3, r7, #12
 8006a08:	2105      	movs	r1, #5
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f002 ff26 	bl	800985c <HAL_RCC_ClockConfig>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006a16:	f000 fb37 	bl	8007088 <Error_Handler>
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	3750      	adds	r7, #80	@ 0x50
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	40023800 	.word	0x40023800
 8006a28:	40007000 	.word	0x40007000

08006a2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	609a      	str	r2, [r3, #8]
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8006a40:	2300      	movs	r3, #0
 8006a42:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006a44:	4b24      	ldr	r3, [pc, #144]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a46:	4a25      	ldr	r2, [pc, #148]	@ (8006adc <MX_RTC_Init+0xb0>)
 8006a48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006a4a:	4b23      	ldr	r3, [pc, #140]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006a50:	4b21      	ldr	r3, [pc, #132]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a52:	227f      	movs	r2, #127	@ 0x7f
 8006a54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006a56:	4b20      	ldr	r3, [pc, #128]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a58:	22ff      	movs	r2, #255	@ 0xff
 8006a5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006a62:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006a68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006a6e:	481a      	ldr	r0, [pc, #104]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a70:	f003 f9b6 	bl	8009de0 <HAL_RTC_Init>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8006a7a:	f000 fb05 	bl	8007088 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	2201      	movs	r2, #1
 8006a96:	4619      	mov	r1, r3
 8006a98:	480f      	ldr	r0, [pc, #60]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006a9a:	f003 fa24 	bl	8009ee6 <HAL_RTC_SetTime>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8006aa4:	f000 faf0 	bl	8007088 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8006aac:	2311      	movs	r3, #17
 8006aae:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27;
 8006ab0:	2327      	movs	r3, #39	@ 0x27
 8006ab2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8006ab4:	2324      	movs	r3, #36	@ 0x24
 8006ab6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006ab8:	463b      	mov	r3, r7
 8006aba:	2201      	movs	r2, #1
 8006abc:	4619      	mov	r1, r3
 8006abe:	4806      	ldr	r0, [pc, #24]	@ (8006ad8 <MX_RTC_Init+0xac>)
 8006ac0:	f003 faab 	bl	800a01a <HAL_RTC_SetDate>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8006aca:	f000 fadd 	bl	8007088 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006ace:	bf00      	nop
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20001408 	.word	0x20001408
 8006adc:	40002800 	.word	0x40002800

08006ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006ae4:	4b17      	ldr	r3, [pc, #92]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006ae6:	4a18      	ldr	r2, [pc, #96]	@ (8006b48 <MX_SPI1_Init+0x68>)
 8006ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006aea:	4b16      	ldr	r3, [pc, #88]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006aec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006af2:	4b14      	ldr	r3, [pc, #80]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006af8:	4b12      	ldr	r3, [pc, #72]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006afe:	4b11      	ldr	r3, [pc, #68]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b04:	4b0f      	ldr	r3, [pc, #60]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006b12:	4b0c      	ldr	r3, [pc, #48]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b14:	2208      	movs	r2, #8
 8006b16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b18:	4b0a      	ldr	r3, [pc, #40]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b1e:	4b09      	ldr	r3, [pc, #36]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b24:	4b07      	ldr	r3, [pc, #28]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006b2a:	4b06      	ldr	r3, [pc, #24]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006b30:	4804      	ldr	r0, [pc, #16]	@ (8006b44 <MX_SPI1_Init+0x64>)
 8006b32:	f003 fb97 	bl	800a264 <HAL_SPI_Init>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006b3c:	f000 faa4 	bl	8007088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006b40:	bf00      	nop
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	20001428 	.word	0x20001428
 8006b48:	40013000 	.word	0x40013000

08006b4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006b50:	4b17      	ldr	r3, [pc, #92]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b52:	4a18      	ldr	r2, [pc, #96]	@ (8006bb4 <MX_SPI2_Init+0x68>)
 8006b54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006b56:	4b16      	ldr	r3, [pc, #88]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006b5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006b5e:	4b14      	ldr	r3, [pc, #80]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b64:	4b12      	ldr	r3, [pc, #72]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b6a:	4b11      	ldr	r3, [pc, #68]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b70:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006b76:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b80:	2220      	movs	r2, #32
 8006b82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b84:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b8a:	4b09      	ldr	r3, [pc, #36]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b90:	4b07      	ldr	r3, [pc, #28]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006b96:	4b06      	ldr	r3, [pc, #24]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b98:	220a      	movs	r2, #10
 8006b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006b9c:	4804      	ldr	r0, [pc, #16]	@ (8006bb0 <MX_SPI2_Init+0x64>)
 8006b9e:	f003 fb61 	bl	800a264 <HAL_SPI_Init>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006ba8:	f000 fa6e 	bl	8007088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006bac:	bf00      	nop
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20001480 	.word	0x20001480
 8006bb4:	40003800 	.word	0x40003800

08006bb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006bbe:	f107 0308 	add.w	r3, r7, #8
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	605a      	str	r2, [r3, #4]
 8006bc8:	609a      	str	r2, [r3, #8]
 8006bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bcc:	463b      	mov	r3, r7
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006bd6:	4a20      	ldr	r2, [pc, #128]	@ (8006c58 <MX_TIM1_Init+0xa0>)
 8006bd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25599;
 8006bda:	4b1e      	ldr	r3, [pc, #120]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006bdc:	f246 32ff 	movw	r2, #25599	@ 0x63ff
 8006be0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006be2:	4b1c      	ldr	r3, [pc, #112]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006be8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bf0:	4b18      	ldr	r3, [pc, #96]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006bf6:	4b17      	ldr	r3, [pc, #92]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bfc:	4b15      	ldr	r3, [pc, #84]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006c02:	4814      	ldr	r0, [pc, #80]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006c04:	f003 fe84 	bl	800a910 <HAL_TIM_Base_Init>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8006c0e:	f000 fa3b 	bl	8007088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006c18:	f107 0308 	add.w	r3, r7, #8
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	480d      	ldr	r0, [pc, #52]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006c20:	f004 f855 	bl	800acce <HAL_TIM_ConfigClockSource>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8006c2a:	f000 fa2d 	bl	8007088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006c36:	463b      	mov	r3, r7
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4806      	ldr	r0, [pc, #24]	@ (8006c54 <MX_TIM1_Init+0x9c>)
 8006c3c:	f004 fa7c 	bl	800b138 <HAL_TIMEx_MasterConfigSynchronization>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8006c46:	f000 fa1f 	bl	8007088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006c4a:	bf00      	nop
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20001538 	.word	0x20001538
 8006c58:	40010000 	.word	0x40010000

08006c5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c62:	463b      	mov	r3, r7
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006c6a:	4b15      	ldr	r3, [pc, #84]	@ (8006cc0 <MX_TIM6_Init+0x64>)
 8006c6c:	4a15      	ldr	r2, [pc, #84]	@ (8006cc4 <MX_TIM6_Init+0x68>)
 8006c6e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8006c70:	4b13      	ldr	r3, [pc, #76]	@ (8006cc0 <MX_TIM6_Init+0x64>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c76:	4b12      	ldr	r3, [pc, #72]	@ (8006cc0 <MX_TIM6_Init+0x64>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8006c7c:	4b10      	ldr	r3, [pc, #64]	@ (8006cc0 <MX_TIM6_Init+0x64>)
 8006c7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c84:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc0 <MX_TIM6_Init+0x64>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006c8a:	480d      	ldr	r0, [pc, #52]	@ (8006cc0 <MX_TIM6_Init+0x64>)
 8006c8c:	f003 fe40 	bl	800a910 <HAL_TIM_Base_Init>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006c96:	f000 f9f7 	bl	8007088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006ca2:	463b      	mov	r3, r7
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4806      	ldr	r0, [pc, #24]	@ (8006cc0 <MX_TIM6_Init+0x64>)
 8006ca8:	f004 fa46 	bl	800b138 <HAL_TIMEx_MasterConfigSynchronization>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006cb2:	f000 f9e9 	bl	8007088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20001580 	.word	0x20001580
 8006cc4:	40001000 	.word	0x40001000

08006cc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	607b      	str	r3, [r7, #4]
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d04 <MX_DMA_Init+0x3c>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8006d04 <MX_DMA_Init+0x3c>)
 8006cd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cde:	4b09      	ldr	r3, [pc, #36]	@ (8006d04 <MX_DMA_Init+0x3c>)
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006cea:	2200      	movs	r2, #0
 8006cec:	2100      	movs	r1, #0
 8006cee:	2038      	movs	r0, #56	@ 0x38
 8006cf0:	f001 fda3 	bl	800883a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006cf4:	2038      	movs	r0, #56	@ 0x38
 8006cf6:	f001 fdbc 	bl	8008872 <HAL_NVIC_EnableIRQ>

}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800

08006d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08c      	sub	sp, #48	@ 0x30
 8006d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d0e:	f107 031c 	add.w	r3, r7, #28
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	605a      	str	r2, [r3, #4]
 8006d18:	609a      	str	r2, [r3, #8]
 8006d1a:	60da      	str	r2, [r3, #12]
 8006d1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	4b65      	ldr	r3, [pc, #404]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d26:	4a64      	ldr	r2, [pc, #400]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d28:	f043 0310 	orr.w	r3, r3, #16
 8006d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d2e:	4b62      	ldr	r3, [pc, #392]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	4b5e      	ldr	r3, [pc, #376]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	4a5d      	ldr	r2, [pc, #372]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d44:	f043 0304 	orr.w	r3, r3, #4
 8006d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d4a:	4b5b      	ldr	r3, [pc, #364]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	4b57      	ldr	r3, [pc, #348]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5e:	4a56      	ldr	r2, [pc, #344]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d66:	4b54      	ldr	r3, [pc, #336]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	4b50      	ldr	r3, [pc, #320]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7a:	4a4f      	ldr	r2, [pc, #316]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d82:	4b4d      	ldr	r3, [pc, #308]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	4b49      	ldr	r3, [pc, #292]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	4a48      	ldr	r2, [pc, #288]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d9e:	4b46      	ldr	r3, [pc, #280]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	4b42      	ldr	r3, [pc, #264]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	4a41      	ldr	r2, [pc, #260]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006db4:	f043 0308 	orr.w	r3, r3, #8
 8006db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dba:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb8 <MX_GPIO_Init+0x1b0>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	2150      	movs	r1, #80	@ 0x50
 8006dca:	483c      	ldr	r0, [pc, #240]	@ (8006ebc <MX_GPIO_Init+0x1b4>)
 8006dcc:	f002 fa9c 	bl	8009308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|TOUCH_CS_Pin, GPIO_PIN_SET);
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f241 0101 	movw	r1, #4097	@ 0x1001
 8006dd6:	483a      	ldr	r0, [pc, #232]	@ (8006ec0 <MX_GPIO_Init+0x1b8>)
 8006dd8:	f002 fa96 	bl	8009308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2102      	movs	r1, #2
 8006de0:	4837      	ldr	r0, [pc, #220]	@ (8006ec0 <MX_GPIO_Init+0x1b8>)
 8006de2:	f002 fa91 	bl	8009308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8006de6:	2318      	movs	r3, #24
 8006de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006dea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006df4:	f107 031c 	add.w	r3, r7, #28
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4832      	ldr	r0, [pc, #200]	@ (8006ec4 <MX_GPIO_Init+0x1bc>)
 8006dfc:	f002 f8d0 	bl	8008fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 8006e00:	2350      	movs	r3, #80	@ 0x50
 8006e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e04:	2301      	movs	r3, #1
 8006e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e10:	f107 031c 	add.w	r3, r7, #28
 8006e14:	4619      	mov	r1, r3
 8006e16:	4829      	ldr	r0, [pc, #164]	@ (8006ebc <MX_GPIO_Init+0x1b4>)
 8006e18:	f002 f8c2 	bl	8008fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_PEN_Pin */
  GPIO_InitStruct.Pin = TC_PEN_Pin;
 8006e1c:	2320      	movs	r3, #32
 8006e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e20:	2300      	movs	r3, #0
 8006e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 8006e28:	f107 031c 	add.w	r3, r7, #28
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4826      	ldr	r0, [pc, #152]	@ (8006ec8 <MX_GPIO_Init+0x1c0>)
 8006e30:	f002 f8b6 	bl	8008fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|TOUCH_CS_Pin;
 8006e34:	f241 0301 	movw	r3, #4097	@ 0x1001
 8006e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e42:	2302      	movs	r3, #2
 8006e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e46:	f107 031c 	add.w	r3, r7, #28
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	481c      	ldr	r0, [pc, #112]	@ (8006ec0 <MX_GPIO_Init+0x1b8>)
 8006e4e:	f002 f8a7 	bl	8008fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8006e52:	2302      	movs	r3, #2
 8006e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e56:	2301      	movs	r3, #1
 8006e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8006e62:	f107 031c 	add.w	r3, r7, #28
 8006e66:	4619      	mov	r1, r3
 8006e68:	4815      	ldr	r0, [pc, #84]	@ (8006ec0 <MX_GPIO_Init+0x1b8>)
 8006e6a:	f002 f899 	bl	8008fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e74:	2302      	movs	r3, #2
 8006e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e80:	230a      	movs	r3, #10
 8006e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e84:	f107 031c 	add.w	r3, r7, #28
 8006e88:	4619      	mov	r1, r3
 8006e8a:	480c      	ldr	r0, [pc, #48]	@ (8006ebc <MX_GPIO_Init+0x1b4>)
 8006e8c:	f002 f888 	bl	8008fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8006e90:	2200      	movs	r2, #0
 8006e92:	2101      	movs	r1, #1
 8006e94:	2009      	movs	r0, #9
 8006e96:	f001 fcd0 	bl	800883a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006e9a:	2009      	movs	r0, #9
 8006e9c:	f001 fce9 	bl	8008872 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	200a      	movs	r0, #10
 8006ea6:	f001 fcc8 	bl	800883a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006eaa:	200a      	movs	r0, #10
 8006eac:	f001 fce1 	bl	8008872 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006eb0:	bf00      	nop
 8006eb2:	3730      	adds	r7, #48	@ 0x30
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	40020000 	.word	0x40020000
 8006ec0:	40020400 	.word	0x40020400
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40020800 	.word	0x40020800

08006ecc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	609a      	str	r2, [r3, #8]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	611a      	str	r2, [r3, #16]
 8006ee0:	615a      	str	r2, [r3, #20]
 8006ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8006ee4:	4b27      	ldr	r3, [pc, #156]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006ee6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8006eea:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006eec:	4b25      	ldr	r3, [pc, #148]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006eee:	4a26      	ldr	r2, [pc, #152]	@ (8006f88 <MX_FSMC_Init+0xbc>)
 8006ef0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8006ef2:	4b24      	ldr	r3, [pc, #144]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006ef8:	4b22      	ldr	r3, [pc, #136]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8006efe:	4b21      	ldr	r3, [pc, #132]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8006f04:	4b1f      	ldr	r3, [pc, #124]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f06:	2210      	movs	r2, #16
 8006f08:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006f10:	4b1c      	ldr	r3, [pc, #112]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8006f16:	4b1b      	ldr	r3, [pc, #108]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006f1c:	4b19      	ldr	r3, [pc, #100]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006f22:	4b18      	ldr	r3, [pc, #96]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f28:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006f2a:	4b16      	ldr	r3, [pc, #88]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8006f30:	4b14      	ldr	r3, [pc, #80]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006f36:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006f3c:	4b11      	ldr	r3, [pc, #68]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006f42:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8006f4c:	230f      	movs	r3, #15
 8006f4e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8006f50:	2305      	movs	r3, #5
 8006f52:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8006f58:	2310      	movs	r3, #16
 8006f5a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8006f5c:	2311      	movs	r3, #17
 8006f5e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8006f64:	1d3b      	adds	r3, r7, #4
 8006f66:	2200      	movs	r2, #0
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4806      	ldr	r0, [pc, #24]	@ (8006f84 <MX_FSMC_Init+0xb8>)
 8006f6c:	f003 fc88 	bl	800a880 <HAL_SRAM_Init>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8006f76:	f000 f887 	bl	8007088 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8006f7a:	bf00      	nop
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	200015c8 	.word	0x200015c8
 8006f88:	a0000104 	.word	0xa0000104

08006f8c <resetTim1>:

/* USER CODE BEGIN 4 */
void resetTim1()
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
	if(runningScreen==1)
 8006f90:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <resetTim1+0x2c>)
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d10c      	bne.n	8006fb2 <resetTim1+0x26>
	{
		   HAL_TIM_Base_Stop_IT(&htim1);
 8006f98:	4808      	ldr	r0, [pc, #32]	@ (8006fbc <resetTim1+0x30>)
 8006f9a:	f003 fd79 	bl	800aa90 <HAL_TIM_Base_Stop_IT>
		   __HAL_TIM_SET_COUNTER(&htim1, 0);
 8006f9e:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <resetTim1+0x30>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	625a      	str	r2, [r3, #36]	@ 0x24
		   count1=0;
 8006fa6:	4b06      	ldr	r3, [pc, #24]	@ (8006fc0 <resetTim1+0x34>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	701a      	strb	r2, [r3, #0]
		   HAL_TIM_Base_Start_IT(&htim1);
 8006fac:	4803      	ldr	r0, [pc, #12]	@ (8006fbc <resetTim1+0x30>)
 8006fae:	f003 fcff 	bl	800a9b0 <HAL_TIM_Base_Start_IT>

	}

}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000000 	.word	0x20000000
 8006fbc:	20001538 	.word	0x20001538
 8006fc0:	20001618 	.word	0x20001618

08006fc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a18      	ldr	r2, [pc, #96]	@ (8007034 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d127      	bne.n	8007026 <HAL_TIM_PeriodElapsedCallback+0x62>

    	count1+=1;
 8006fd6:	4b18      	ldr	r3, [pc, #96]	@ (8007038 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	4b16      	ldr	r3, [pc, #88]	@ (8007038 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8006fe0:	701a      	strb	r2, [r3, #0]


        if(count1==6)
 8006fe2:	4b15      	ldr	r3, [pc, #84]	@ (8007038 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d11d      	bne.n	8007026 <HAL_TIM_PeriodElapsedCallback+0x62>
        {
        	count1=0;
 8006fea:	4b13      	ldr	r3, [pc, #76]	@ (8007038 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
        	min+=1;
 8006ff0:	4b12      	ldr	r3, [pc, #72]	@ (800703c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	4a11      	ldr	r2, [pc, #68]	@ (800703c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8006ff8:	6013      	str	r3, [r2, #0]
        	if(min>59)
 8006ffa:	4b10      	ldr	r3, [pc, #64]	@ (800703c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b3b      	cmp	r3, #59	@ 0x3b
 8007000:	dd07      	ble.n	8007012 <HAL_TIM_PeriodElapsedCallback+0x4e>
        	{
        		min=0;
 8007002:	4b0e      	ldr	r3, [pc, #56]	@ (800703c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
        		hour+=1;
 8007008:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	4a0c      	ldr	r2, [pc, #48]	@ (8007040 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8007010:	6013      	str	r3, [r2, #0]
        	}
        	if(hour>23)
 8007012:	4b0b      	ldr	r3, [pc, #44]	@ (8007040 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b17      	cmp	r3, #23
 8007018:	dd05      	ble.n	8007026 <HAL_TIM_PeriodElapsedCallback+0x62>
        	{
        		hour=0;
 800701a:	4b09      	ldr	r3, [pc, #36]	@ (8007040 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
        		min=0;
 8007020:	4b06      	ldr	r3, [pc, #24]	@ (800703c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
        	}
        }
    }
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40010000 	.word	0x40010000
 8007038:	20001618 	.word	0x20001618
 800703c:	20000a98 	.word	0x20000a98
 8007040:	20000a94 	.word	0x20000a94

08007044 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	80fb      	strh	r3, [r7, #6]
	//KEy1
    if(GPIO_Pin == (GPIOE, GPIO_PIN_3))
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	2b08      	cmp	r3, #8
 8007052:	d102      	bne.n	800705a <HAL_GPIO_EXTI_Callback+0x16>
    {
    	key1_flag = 1;
 8007054:	4b09      	ldr	r3, [pc, #36]	@ (800707c <HAL_GPIO_EXTI_Callback+0x38>)
 8007056:	2201      	movs	r2, #1
 8007058:	701a      	strb	r2, [r3, #0]
//    	get_Data_json();
    }

    //KEY0
    if(GPIO_Pin == (GPIOE, GPIO_PIN_4))
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b10      	cmp	r3, #16
 800705e:	d108      	bne.n	8007072 <HAL_GPIO_EXTI_Callback+0x2e>
    {
    	idx = 0;
 8007060:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <HAL_GPIO_EXTI_Callback+0x3c>)
 8007062:	2200      	movs	r2, #0
 8007064:	801a      	strh	r2, [r3, #0]
    	memset(RX_buffer, 0, sizeof(RX_buffer));
 8007066:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800706a:	2100      	movs	r1, #0
 800706c:	4805      	ldr	r0, [pc, #20]	@ (8007084 <HAL_GPIO_EXTI_Callback+0x40>)
 800706e:	f006 fc27 	bl	800d8c0 <memset>

    	      // G�?i hàm xử lý dữ liệu JSON
    	//Clear_RX_Buffer();    // Xóa buffer sau khi xử lý xong
    }
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000a90 	.word	0x20000a90
 8007080:	20000a8e 	.word	0x20000a8e
 8007084:	20000bc0 	.word	0x20000bc0

08007088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800708c:	b672      	cpsid	i
}
 800708e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <Error_Handler+0x8>

08007094 <initMainSpeed>:
#include <mainPlanes.h>
//struct mainStruct mainSpeedData={120,250,10,{{0,0,0,70},{0,0,0,70}},5};
int checkSkill=0;
int subHP=0;
void initMainSpeed(struct mainStruct *mainSpeedData)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b094      	sub	sp, #80	@ 0x50
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
    // Khởi tạo các biến toàn cục
    bulletCooldown = 0;
 800709c:	4b19      	ldr	r3, [pc, #100]	@ (8007104 <initMainSpeed+0x70>)
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
    rTouchX = 120;
 80070a2:	4b19      	ldr	r3, [pc, #100]	@ (8007108 <initMainSpeed+0x74>)
 80070a4:	2278      	movs	r2, #120	@ 0x78
 80070a6:	601a      	str	r2, [r3, #0]
    rTouchY = 250;
 80070a8:	4b18      	ldr	r3, [pc, #96]	@ (800710c <initMainSpeed+0x78>)
 80070aa:	22fa      	movs	r2, #250	@ 0xfa
 80070ac:	601a      	str	r2, [r3, #0]
    touchX = 0;
 80070ae:	4b18      	ldr	r3, [pc, #96]	@ (8007110 <initMainSpeed+0x7c>)
 80070b0:	f04f 0200 	mov.w	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
    touchY = 0;
 80070b6:	4b17      	ldr	r3, [pc, #92]	@ (8007114 <initMainSpeed+0x80>)
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
    checkSkill=0;
 80070be:	4b16      	ldr	r3, [pc, #88]	@ (8007118 <initMainSpeed+0x84>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]

    // Khởi tạo các thuộc tính của mainSpeedData
    *mainSpeedData=(struct mainStruct){120,250,4,{{134,250,0,70,2,2},{134,250,0,70,2,2}},6,1000};
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a15      	ldr	r2, [pc, #84]	@ (800711c <initMainSpeed+0x88>)
 80070c8:	4618      	mov	r0, r3
 80070ca:	4611      	mov	r1, r2
 80070cc:	2344      	movs	r3, #68	@ 0x44
 80070ce:	461a      	mov	r2, r3
 80070d0:	f006 fcd1 	bl	800da76 <memcpy>


    // Vẽ máy bay lên màn hình
    lcdDrawImage(mainSpeedData->x, mainSpeedData->y, &iconPlaneSpeed);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	edd3 7a00 	vldr	s15, [r3]
 80070da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070de:	ee17 3a90 	vmov	r3, s15
 80070e2:	b298      	uxth	r0, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80070ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ee:	ee17 3a90 	vmov	r3, s15
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007120 <initMainSpeed+0x8c>)
 80070f6:	4619      	mov	r1, r3
 80070f8:	f7fe fcf4 	bl	8005ae4 <lcdDrawImage>
}
 80070fc:	bf00      	nop
 80070fe:	3750      	adds	r7, #80	@ 0x50
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	200002c8 	.word	0x200002c8
 8007108:	20000008 	.word	0x20000008
 800710c:	2000000c 	.word	0x2000000c
 8007110:	200002cc 	.word	0x200002cc
 8007114:	200002d0 	.word	0x200002d0
 8007118:	2000161c 	.word	0x2000161c
 800711c:	080106c8 	.word	0x080106c8
 8007120:	08016390 	.word	0x08016390

08007124 <mainSpeed>:

void mainSpeed(struct mainStruct *mainSpeedData)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af02      	add	r7, sp, #8
 800712a:	6078      	str	r0, [r7, #4]
	int x=rTouchX,y= rTouchY;
 800712c:	4b21      	ldr	r3, [pc, #132]	@ (80071b4 <mainSpeed+0x90>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	4b21      	ldr	r3, [pc, #132]	@ (80071b8 <mainSpeed+0x94>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60bb      	str	r3, [r7, #8]

	if (TouchGetCalibratedPoint(&rTouchX, &rTouchY))
 8007138:	491f      	ldr	r1, [pc, #124]	@ (80071b8 <mainSpeed+0x94>)
 800713a:	481e      	ldr	r0, [pc, #120]	@ (80071b4 <mainSpeed+0x90>)
 800713c:	f001 f92c 	bl	8008398 <TouchGetCalibratedPoint>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01e      	beq.n	8007184 <mainSpeed+0x60>
	{
		lcdFillRect(x,y, 35, 34,COLOR_BLACK);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	b218      	sxth	r0, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	b219      	sxth	r1, r3
 800714e:	2300      	movs	r3, #0
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	2322      	movs	r3, #34	@ 0x22
 8007154:	2223      	movs	r2, #35	@ 0x23
 8007156:	f7fe fc69 	bl	8005a2c <lcdFillRect>
		touchX=rTouchX;
 800715a:	4b16      	ldr	r3, [pc, #88]	@ (80071b4 <mainSpeed+0x90>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007166:	4b15      	ldr	r3, [pc, #84]	@ (80071bc <mainSpeed+0x98>)
 8007168:	edc3 7a00 	vstr	s15, [r3]
		touchY=rTouchY;
 800716c:	4b12      	ldr	r3, [pc, #72]	@ (80071b8 <mainSpeed+0x94>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	ee07 3a90 	vmov	s15, r3
 8007174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007178:	4b11      	ldr	r3, [pc, #68]	@ (80071c0 <mainSpeed+0x9c>)
 800717a:	edc3 7a00 	vstr	s15, [r3]
		mainMoveCalculator(mainSpeedData);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa42 	bl	8007608 <mainMoveCalculator>

	}
	lcdDrawImage( rTouchX , rTouchY, & iconPlaneSpeed);
 8007184:	4b0b      	ldr	r3, [pc, #44]	@ (80071b4 <mainSpeed+0x90>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	4a0b      	ldr	r2, [pc, #44]	@ (80071b8 <mainSpeed+0x94>)
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	b291      	uxth	r1, r2
 8007190:	4a0c      	ldr	r2, [pc, #48]	@ (80071c4 <mainSpeed+0xa0>)
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fca6 	bl	8005ae4 <lcdDrawImage>
	SPDskill(mainSpeedData);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fb93 	bl	80078c4 <SPDskill>
	HAL_Delay(10);
 800719e:	200a      	movs	r0, #10
 80071a0:	f001 fa4c 	bl	800863c <HAL_Delay>

	mainBullet(mainSpeedData);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f80f 	bl	80071c8 <mainBullet>


}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000008 	.word	0x20000008
 80071b8:	2000000c 	.word	0x2000000c
 80071bc:	200002cc 	.word	0x200002cc
 80071c0:	200002d0 	.word	0x200002d0
 80071c4:	08016390 	.word	0x08016390

080071c8 <mainBullet>:
void mainBullet(struct mainStruct *mainSpeedData)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]


	bulletControl(&mainSpeedData->mainBullet[0],mainSpeedData);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	330c      	adds	r3, #12
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f950 	bl	800747c <bulletControl>

	if(bulletCooldown>=10)
 80071dc:	4b09      	ldr	r3, [pc, #36]	@ (8007204 <mainBullet+0x3c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b09      	cmp	r3, #9
 80071e2:	dd06      	ble.n	80071f2 <mainBullet+0x2a>
	{
		bulletControl(&mainSpeedData->mainBullet[1],mainSpeedData);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3324      	adds	r3, #36	@ 0x24
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f946 	bl	800747c <bulletControl>
	else
	{
		bulletCooldown +=1;
	}

}
 80071f0:	e004      	b.n	80071fc <mainBullet+0x34>
		bulletCooldown +=1;
 80071f2:	4b04      	ldr	r3, [pc, #16]	@ (8007204 <mainBullet+0x3c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3301      	adds	r3, #1
 80071f8:	4a02      	ldr	r2, [pc, #8]	@ (8007204 <mainBullet+0x3c>)
 80071fa:	6013      	str	r3, [r2, #0]
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	200002c8 	.word	0x200002c8

08007208 <initMainDPS>:

void initMainDPS(struct mainStruct *mainSpeedData)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b094      	sub	sp, #80	@ 0x50
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
    // Khởi tạo các biến toàn cục
    bulletCooldown = 0;
 8007210:	4b19      	ldr	r3, [pc, #100]	@ (8007278 <initMainDPS+0x70>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
    rTouchX = 120;
 8007216:	4b19      	ldr	r3, [pc, #100]	@ (800727c <initMainDPS+0x74>)
 8007218:	2278      	movs	r2, #120	@ 0x78
 800721a:	601a      	str	r2, [r3, #0]
    rTouchY = 250;
 800721c:	4b18      	ldr	r3, [pc, #96]	@ (8007280 <initMainDPS+0x78>)
 800721e:	22fa      	movs	r2, #250	@ 0xfa
 8007220:	601a      	str	r2, [r3, #0]
    touchX = 0;
 8007222:	4b18      	ldr	r3, [pc, #96]	@ (8007284 <initMainDPS+0x7c>)
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	601a      	str	r2, [r3, #0]
    touchY = 0;
 800722a:	4b17      	ldr	r3, [pc, #92]	@ (8007288 <initMainDPS+0x80>)
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
    checkSkill=0;
 8007232:	4b16      	ldr	r3, [pc, #88]	@ (800728c <initMainDPS+0x84>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

    // Khởi tạo các thuộc tính của mainSpeedData
    *mainSpeedData=(struct mainStruct){120,250,2,{{134,250,0,70,3,2},{134,250,0,70,3,2}},6,1000};
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a15      	ldr	r2, [pc, #84]	@ (8007290 <initMainDPS+0x88>)
 800723c:	4618      	mov	r0, r3
 800723e:	4611      	mov	r1, r2
 8007240:	2344      	movs	r3, #68	@ 0x44
 8007242:	461a      	mov	r2, r3
 8007244:	f006 fc17 	bl	800da76 <memcpy>


    // Vẽ máy bay lên màn hình
    lcdDrawImage(mainSpeedData->x, mainSpeedData->y, &iconPlaneDPS);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	edd3 7a00 	vldr	s15, [r3]
 800724e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007252:	ee17 3a90 	vmov	r3, s15
 8007256:	b298      	uxth	r0, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	edd3 7a01 	vldr	s15, [r3, #4]
 800725e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007262:	ee17 3a90 	vmov	r3, s15
 8007266:	b29b      	uxth	r3, r3
 8007268:	4a0a      	ldr	r2, [pc, #40]	@ (8007294 <initMainDPS+0x8c>)
 800726a:	4619      	mov	r1, r3
 800726c:	f7fe fc3a 	bl	8005ae4 <lcdDrawImage>
}
 8007270:	bf00      	nop
 8007272:	3750      	adds	r7, #80	@ 0x50
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	200002c8 	.word	0x200002c8
 800727c:	20000008 	.word	0x20000008
 8007280:	2000000c 	.word	0x2000000c
 8007284:	200002cc 	.word	0x200002cc
 8007288:	200002d0 	.word	0x200002d0
 800728c:	2000161c 	.word	0x2000161c
 8007290:	0801070c 	.word	0x0801070c
 8007294:	08015b50 	.word	0x08015b50

08007298 <mainDPS>:

void mainDPS(struct mainStruct *mainSpeedData)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af02      	add	r7, sp, #8
 800729e:	6078      	str	r0, [r7, #4]
	int x=rTouchX,y= rTouchY;
 80072a0:	4b21      	ldr	r3, [pc, #132]	@ (8007328 <mainDPS+0x90>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	4b21      	ldr	r3, [pc, #132]	@ (800732c <mainDPS+0x94>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60bb      	str	r3, [r7, #8]

	if (TouchGetCalibratedPoint(&rTouchX, &rTouchY))
 80072ac:	491f      	ldr	r1, [pc, #124]	@ (800732c <mainDPS+0x94>)
 80072ae:	481e      	ldr	r0, [pc, #120]	@ (8007328 <mainDPS+0x90>)
 80072b0:	f001 f872 	bl	8008398 <TouchGetCalibratedPoint>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01e      	beq.n	80072f8 <mainDPS+0x60>
	{
		lcdFillRect(x,y, 35, 34,COLOR_BLACK);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	b218      	sxth	r0, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	b219      	sxth	r1, r3
 80072c2:	2300      	movs	r3, #0
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	2322      	movs	r3, #34	@ 0x22
 80072c8:	2223      	movs	r2, #35	@ 0x23
 80072ca:	f7fe fbaf 	bl	8005a2c <lcdFillRect>
		touchX=rTouchX;
 80072ce:	4b16      	ldr	r3, [pc, #88]	@ (8007328 <mainDPS+0x90>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072da:	4b15      	ldr	r3, [pc, #84]	@ (8007330 <mainDPS+0x98>)
 80072dc:	edc3 7a00 	vstr	s15, [r3]
		touchY=rTouchY;
 80072e0:	4b12      	ldr	r3, [pc, #72]	@ (800732c <mainDPS+0x94>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	ee07 3a90 	vmov	s15, r3
 80072e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ec:	4b11      	ldr	r3, [pc, #68]	@ (8007334 <mainDPS+0x9c>)
 80072ee:	edc3 7a00 	vstr	s15, [r3]
		mainMoveCalculator(mainSpeedData);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f988 	bl	8007608 <mainMoveCalculator>

	}
	lcdDrawImage( rTouchX , rTouchY, & iconPlaneDPS);
 80072f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <mainDPS+0x90>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4a0b      	ldr	r2, [pc, #44]	@ (800732c <mainDPS+0x94>)
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	b291      	uxth	r1, r2
 8007304:	4a0c      	ldr	r2, [pc, #48]	@ (8007338 <mainDPS+0xa0>)
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fbec 	bl	8005ae4 <lcdDrawImage>
	DPSskill(mainSpeedData);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fa8b 	bl	8007828 <DPSskill>
	HAL_Delay(10);
 8007312:	200a      	movs	r0, #10
 8007314:	f001 f992 	bl	800863c <HAL_Delay>

	mainBullet(mainSpeedData);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff ff55 	bl	80071c8 <mainBullet>


}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000008 	.word	0x20000008
 800732c:	2000000c 	.word	0x2000000c
 8007330:	200002cc 	.word	0x200002cc
 8007334:	200002d0 	.word	0x200002d0
 8007338:	08015b50 	.word	0x08015b50

0800733c <initMainTank>:
void initMainTank(struct mainStruct *mainSpeedData)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b094      	sub	sp, #80	@ 0x50
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
    // Khởi tạo các biến toàn cục
    bulletCooldown = 0;
 8007344:	4b1b      	ldr	r3, [pc, #108]	@ (80073b4 <initMainTank+0x78>)
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
    rTouchX = 120;
 800734a:	4b1b      	ldr	r3, [pc, #108]	@ (80073b8 <initMainTank+0x7c>)
 800734c:	2278      	movs	r2, #120	@ 0x78
 800734e:	601a      	str	r2, [r3, #0]
    rTouchY = 250;
 8007350:	4b1a      	ldr	r3, [pc, #104]	@ (80073bc <initMainTank+0x80>)
 8007352:	22fa      	movs	r2, #250	@ 0xfa
 8007354:	601a      	str	r2, [r3, #0]
    touchX = 0;
 8007356:	4b1a      	ldr	r3, [pc, #104]	@ (80073c0 <initMainTank+0x84>)
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
    touchY = 0;
 800735e:	4b19      	ldr	r3, [pc, #100]	@ (80073c4 <initMainTank+0x88>)
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
    checkSkill=0;
 8007366:	4b18      	ldr	r3, [pc, #96]	@ (80073c8 <initMainTank+0x8c>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]


    // Khởi tạo các thuộc tính của mainSpeedData
    *mainSpeedData=(struct mainStruct){120,250,1,{{134,250,0,70,2,3},{134,250,0,70,2,3}},12,1000};
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a17      	ldr	r2, [pc, #92]	@ (80073cc <initMainTank+0x90>)
 8007370:	4618      	mov	r0, r3
 8007372:	4611      	mov	r1, r2
 8007374:	2344      	movs	r3, #68	@ 0x44
 8007376:	461a      	mov	r2, r3
 8007378:	f006 fb7d 	bl	800da76 <memcpy>
    subHP=mainSpeedData->hp;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007380:	4a13      	ldr	r2, [pc, #76]	@ (80073d0 <initMainTank+0x94>)
 8007382:	6013      	str	r3, [r2, #0]

    // Vẽ máy bay lên màn hình
    lcdDrawImage(mainSpeedData->x, mainSpeedData->y, &iconPlaneTank);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	edd3 7a00 	vldr	s15, [r3]
 800738a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738e:	ee17 3a90 	vmov	r3, s15
 8007392:	b298      	uxth	r0, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	edd3 7a01 	vldr	s15, [r3, #4]
 800739a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800739e:	ee17 3a90 	vmov	r3, s15
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4a0b      	ldr	r2, [pc, #44]	@ (80073d4 <initMainTank+0x98>)
 80073a6:	4619      	mov	r1, r3
 80073a8:	f7fe fb9c 	bl	8005ae4 <lcdDrawImage>
}
 80073ac:	bf00      	nop
 80073ae:	3750      	adds	r7, #80	@ 0x50
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	200002c8 	.word	0x200002c8
 80073b8:	20000008 	.word	0x20000008
 80073bc:	2000000c 	.word	0x2000000c
 80073c0:	200002cc 	.word	0x200002cc
 80073c4:	200002d0 	.word	0x200002d0
 80073c8:	2000161c 	.word	0x2000161c
 80073cc:	08010750 	.word	0x08010750
 80073d0:	20001620 	.word	0x20001620
 80073d4:	08016bd0 	.word	0x08016bd0

080073d8 <mainTank>:

void mainTank(struct mainStruct *mainSpeedData)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af02      	add	r7, sp, #8
 80073de:	6078      	str	r0, [r7, #4]
	int x=rTouchX,y= rTouchY;
 80073e0:	4b21      	ldr	r3, [pc, #132]	@ (8007468 <mainTank+0x90>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	4b21      	ldr	r3, [pc, #132]	@ (800746c <mainTank+0x94>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60bb      	str	r3, [r7, #8]

	if (TouchGetCalibratedPoint(&rTouchX, &rTouchY))
 80073ec:	491f      	ldr	r1, [pc, #124]	@ (800746c <mainTank+0x94>)
 80073ee:	481e      	ldr	r0, [pc, #120]	@ (8007468 <mainTank+0x90>)
 80073f0:	f000 ffd2 	bl	8008398 <TouchGetCalibratedPoint>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d01e      	beq.n	8007438 <mainTank+0x60>
	{
		lcdFillRect(x,y, 35, 34,COLOR_BLACK);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	b218      	sxth	r0, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	b219      	sxth	r1, r3
 8007402:	2300      	movs	r3, #0
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	2322      	movs	r3, #34	@ 0x22
 8007408:	2223      	movs	r2, #35	@ 0x23
 800740a:	f7fe fb0f 	bl	8005a2c <lcdFillRect>
		touchX=rTouchX;
 800740e:	4b16      	ldr	r3, [pc, #88]	@ (8007468 <mainTank+0x90>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800741a:	4b15      	ldr	r3, [pc, #84]	@ (8007470 <mainTank+0x98>)
 800741c:	edc3 7a00 	vstr	s15, [r3]
		touchY=rTouchY;
 8007420:	4b12      	ldr	r3, [pc, #72]	@ (800746c <mainTank+0x94>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	ee07 3a90 	vmov	s15, r3
 8007428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800742c:	4b11      	ldr	r3, [pc, #68]	@ (8007474 <mainTank+0x9c>)
 800742e:	edc3 7a00 	vstr	s15, [r3]
		mainMoveCalculator(mainSpeedData);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8e8 	bl	8007608 <mainMoveCalculator>

	}
	lcdDrawImage( rTouchX , rTouchY, & iconPlaneTank);
 8007438:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <mainTank+0x90>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	b29b      	uxth	r3, r3
 800743e:	4a0b      	ldr	r2, [pc, #44]	@ (800746c <mainTank+0x94>)
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	b291      	uxth	r1, r2
 8007444:	4a0c      	ldr	r2, [pc, #48]	@ (8007478 <mainTank+0xa0>)
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fb4c 	bl	8005ae4 <lcdDrawImage>
	TANKskill(mainSpeedData);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fa9b 	bl	8007988 <TANKskill>
	HAL_Delay(10);
 8007452:	200a      	movs	r0, #10
 8007454:	f001 f8f2 	bl	800863c <HAL_Delay>

	mainBullet(mainSpeedData);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff feb5 	bl	80071c8 <mainBullet>


}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000008 	.word	0x20000008
 800746c:	2000000c 	.word	0x2000000c
 8007470:	200002cc 	.word	0x200002cc
 8007474:	200002d0 	.word	0x200002d0
 8007478:	08016bd0 	.word	0x08016bd0

0800747c <bulletControl>:
void bulletControl(struct bullet *bulletSub, struct mainStruct *mainSpeedData)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
    if (bulletSub->bulletCooldown < 35)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	2b22      	cmp	r3, #34	@ 0x22
 800748c:	dc16      	bgt.n	80074bc <bulletControl+0x40>
    {
        bulletSub->bulletCooldown += 1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60da      	str	r2, [r3, #12]

        if (bulletSub->hit == 0)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d103      	bne.n	80074a8 <bulletControl+0x2c>
        {
            bulletUpdatePosition(bulletSub);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f813 	bl	80074cc <bulletUpdatePosition>
    }
    else
    {
        bulletReset(bulletSub, mainSpeedData);
    }
}
 80074a6:	e00d      	b.n	80074c4 <bulletControl+0x48>
        else if (bulletOutOfBounds(bulletSub))
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f84d 	bl	8007548 <bulletOutOfBounds>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d007      	beq.n	80074c4 <bulletControl+0x48>
            bulletCleanup(bulletSub);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f869 	bl	800758c <bulletCleanup>
}
 80074ba:	e003      	b.n	80074c4 <bulletControl+0x48>
        bulletReset(bulletSub, mainSpeedData);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f87a 	bl	80075b8 <bulletReset>
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <bulletUpdatePosition>:

void bulletUpdatePosition(struct bullet *bulletSub)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
    if (bulletSub->y > 20) // Đạn chưa chạm biên
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2b14      	cmp	r3, #20
 80074da:	dd2b      	ble.n	8007534 <bulletUpdatePosition+0x68>
    {
        lcdFillCircle(bulletSub->x, bulletSub->y, 4, COLOR_BLACK);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	b218      	sxth	r0, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	b219      	sxth	r1, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	2204      	movs	r2, #4
 80074ec:	f7fe f9c6 	bl	800587c <lcdFillCircle>
        bulletSub->y -= 10; // Đạn di chuyển lên
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f1a3 020a 	sub.w	r2, r3, #10
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	605a      	str	r2, [r3, #4]
        lcdFillCircle(bulletSub->x, bulletSub->y, bulletSub->w, COLOR_THEME_LIMEGREEN_LIGHTER);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	b218      	sxth	r0, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b219      	sxth	r1, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	b21a      	sxth	r2, r3
 800750e:	f64e 73f9 	movw	r3, #61433	@ 0xeff9
 8007512:	f7fe f9b3 	bl	800587c <lcdFillCircle>

        if (bulletSub->y <= 20) // Đạn chuẩn bị chạm biên
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b14      	cmp	r3, #20
 800751c:	dc10      	bgt.n	8007540 <bulletUpdatePosition+0x74>
        {
            lcdFillCircle(bulletSub->x, bulletSub->y, 4, COLOR_BLACK);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	b218      	sxth	r0, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	b219      	sxth	r1, r3
 800752a:	2300      	movs	r3, #0
 800752c:	2204      	movs	r2, #4
 800752e:	f7fe f9a5 	bl	800587c <lcdFillCircle>
    }
    else // Đạn chạm biên
    {
        bulletSub->y -= 10; // Giá trị rác
    }
}
 8007532:	e005      	b.n	8007540 <bulletUpdatePosition+0x74>
        bulletSub->y -= 10; // Giá trị rác
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f1a3 020a 	sub.w	r2, r3, #10
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	605a      	str	r2, [r3, #4]
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <bulletOutOfBounds>:

int bulletOutOfBounds(struct bullet *bulletSub)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
    return (bulletSub->hit == 1 && bulletSub->x < 235 && bulletSub->x >5 && bulletSub->y > 5&& bulletSub->y < 285);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d112      	bne.n	800757e <bulletOutOfBounds+0x36>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2bea      	cmp	r3, #234	@ 0xea
 800755e:	dc0e      	bgt.n	800757e <bulletOutOfBounds+0x36>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b05      	cmp	r3, #5
 8007566:	dd0a      	ble.n	800757e <bulletOutOfBounds+0x36>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	2b05      	cmp	r3, #5
 800756e:	dd06      	ble.n	800757e <bulletOutOfBounds+0x36>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8007578:	dc01      	bgt.n	800757e <bulletOutOfBounds+0x36>
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <bulletOutOfBounds+0x38>
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <bulletCleanup>:
void bulletCleanup(struct bullet *bulletSub)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
    lcdFillCircle(bulletSub->x, bulletSub->y, 4, COLOR_BLACK);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	b218      	sxth	r0, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	b219      	sxth	r1, r3
 80075a0:	2300      	movs	r3, #0
 80075a2:	2204      	movs	r2, #4
 80075a4:	f7fe f96a 	bl	800587c <lcdFillCircle>
    bulletSub->x = 999; // Đặt giá trị rác
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80075ae:	601a      	str	r2, [r3, #0]
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <bulletReset>:
void bulletReset(struct bullet *bulletSub, struct mainStruct *mainSpeedData)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
    bulletSub->y = mainSpeedData->y;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80075c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075cc:	ee17 2a90 	vmov	r2, s15
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	605a      	str	r2, [r3, #4]
    bulletSub->x = mainSpeedData->x + 14;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	edd3 7a00 	vldr	s15, [r3]
 80075da:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80075de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075e6:	ee17 2a90 	vmov	r2, s15
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	601a      	str	r2, [r3, #0]

    bulletSub->bulletCooldown = 0;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	60da      	str	r2, [r3, #12]
    bulletSub->hit = 0;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	609a      	str	r2, [r3, #8]
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <mainMoveCalculator>:


void mainMoveCalculator( struct mainStruct *mains)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	float countDraw=0;
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
	countDraw = sqrtf( (touchX-mains->x)*(touchX-mains->x) + (touchY-mains->y)*(touchY-mains->y) ) / mains->spd ;
 8007616:	4b63      	ldr	r3, [pc, #396]	@ (80077a4 <mainMoveCalculator+0x19c>)
 8007618:	ed93 7a00 	vldr	s14, [r3]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	edd3 7a00 	vldr	s15, [r3]
 8007622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007626:	4b5f      	ldr	r3, [pc, #380]	@ (80077a4 <mainMoveCalculator+0x19c>)
 8007628:	edd3 6a00 	vldr	s13, [r3]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	edd3 7a00 	vldr	s15, [r3]
 8007632:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800763a:	4b5b      	ldr	r3, [pc, #364]	@ (80077a8 <mainMoveCalculator+0x1a0>)
 800763c:	edd3 6a00 	vldr	s13, [r3]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	edd3 7a01 	vldr	s15, [r3, #4]
 8007646:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800764a:	4b57      	ldr	r3, [pc, #348]	@ (80077a8 <mainMoveCalculator+0x1a0>)
 800764c:	ed93 6a00 	vldr	s12, [r3]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	edd3 7a01 	vldr	s15, [r3, #4]
 8007656:	ee76 7a67 	vsub.f32	s15, s12, s15
 800765a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800765e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007662:	eeb0 0a67 	vmov.f32	s0, s15
 8007666:	f004 ffc7 	bl	800c5f8 <sqrtf>
 800766a:	eef0 6a40 	vmov.f32	s13, s0
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	ed93 7a02 	vldr	s14, [r3, #8]
 8007674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007678:	edc7 7a03 	vstr	s15, [r7, #12]

	if (countDraw>1)
 800767c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007680:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768c:	dd2f      	ble.n	80076ee <mainMoveCalculator+0xe6>
	{
		mains->x =mains->x + (touchX-mains->x)/countDraw;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	ed93 7a00 	vldr	s14, [r3]
 8007694:	4b43      	ldr	r3, [pc, #268]	@ (80077a4 <mainMoveCalculator+0x19c>)
 8007696:	edd3 6a00 	vldr	s13, [r3]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	edd3 7a00 	vldr	s15, [r3]
 80076a0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80076a4:	edd7 6a03 	vldr	s13, [r7, #12]
 80076a8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80076ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	edc3 7a00 	vstr	s15, [r3]
		mains->y = mains->y + (touchY-mains->y)/countDraw;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80076bc:	4b3a      	ldr	r3, [pc, #232]	@ (80077a8 <mainMoveCalculator+0x1a0>)
 80076be:	edd3 6a00 	vldr	s13, [r3]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80076c8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80076cc:	edd7 6a03 	vldr	s13, [r7, #12]
 80076d0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80076d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	edc3 7a01 	vstr	s15, [r3, #4]

		countDraw-=1;
 80076de:	edd7 7a03 	vldr	s15, [r7, #12]
 80076e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076ea:	edc7 7a03 	vstr	s15, [r7, #12]
	}


		if (mains->x+30>240){mains->x=240-32;}
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	edd3 7a00 	vldr	s15, [r3]
 80076f4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80076f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076fc:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80077ac <mainMoveCalculator+0x1a4>
 8007700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007708:	dd02      	ble.n	8007710 <mainMoveCalculator+0x108>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a28      	ldr	r2, [pc, #160]	@ (80077b0 <mainMoveCalculator+0x1a8>)
 800770e:	601a      	str	r2, [r3, #0]
		if (mains->y+40>290){mains->y=290-40;}
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	edd3 7a01 	vldr	s15, [r3, #4]
 8007716:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80077b4 <mainMoveCalculator+0x1ac>
 800771a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800771e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80077b8 <mainMoveCalculator+0x1b0>
 8007722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772a:	dd02      	ble.n	8007732 <mainMoveCalculator+0x12a>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a23      	ldr	r2, [pc, #140]	@ (80077bc <mainMoveCalculator+0x1b4>)
 8007730:	605a      	str	r2, [r3, #4]
		if (mains->y<15){mains->y=15;}
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	edd3 7a01 	vldr	s15, [r3, #4]
 8007738:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800773c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007744:	d502      	bpl.n	800774c <mainMoveCalculator+0x144>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a1d      	ldr	r2, [pc, #116]	@ (80077c0 <mainMoveCalculator+0x1b8>)
 800774a:	605a      	str	r2, [r3, #4]

		rTouchY=round (mains->y);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	4618      	mov	r0, r3
 8007752:	f7f8 fef9 	bl	8000548 <__aeabi_f2d>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	ec43 2b10 	vmov	d0, r2, r3
 800775e:	f004 ff6d 	bl	800c63c <round>
 8007762:	ec53 2b10 	vmov	r2, r3, d0
 8007766:	4610      	mov	r0, r2
 8007768:	4619      	mov	r1, r3
 800776a:	f7f9 f9df 	bl	8000b2c <__aeabi_d2iz>
 800776e:	4603      	mov	r3, r0
 8007770:	4a14      	ldr	r2, [pc, #80]	@ (80077c4 <mainMoveCalculator+0x1bc>)
 8007772:	6013      	str	r3, [r2, #0]
		rTouchX=round (mains->x);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4618      	mov	r0, r3
 800777a:	f7f8 fee5 	bl	8000548 <__aeabi_f2d>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	ec43 2b10 	vmov	d0, r2, r3
 8007786:	f004 ff59 	bl	800c63c <round>
 800778a:	ec53 2b10 	vmov	r2, r3, d0
 800778e:	4610      	mov	r0, r2
 8007790:	4619      	mov	r1, r3
 8007792:	f7f9 f9cb 	bl	8000b2c <__aeabi_d2iz>
 8007796:	4603      	mov	r3, r0
 8007798:	4a0b      	ldr	r2, [pc, #44]	@ (80077c8 <mainMoveCalculator+0x1c0>)
 800779a:	6013      	str	r3, [r2, #0]



}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	200002cc 	.word	0x200002cc
 80077a8:	200002d0 	.word	0x200002d0
 80077ac:	43700000 	.word	0x43700000
 80077b0:	43500000 	.word	0x43500000
 80077b4:	42200000 	.word	0x42200000
 80077b8:	43910000 	.word	0x43910000
 80077bc:	437a0000 	.word	0x437a0000
 80077c0:	41700000 	.word	0x41700000
 80077c4:	2000000c 	.word	0x2000000c
 80077c8:	20000008 	.word	0x20000008

080077cc <skillControl>:

void skillControl(struct mainStruct *mainSpeedData)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	if(checkXY(205,255,30,30))
 80077d4:	231e      	movs	r3, #30
 80077d6:	221e      	movs	r2, #30
 80077d8:	21ff      	movs	r1, #255	@ 0xff
 80077da:	20cd      	movs	r0, #205	@ 0xcd
 80077dc:	f000 fe50 	bl	8008480 <checkXY>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d018      	beq.n	8007818 <skillControl+0x4c>
	{
		while (TouchIsTouched())
 80077e6:	bf00      	nop
 80077e8:	f000 fdc0 	bl	800836c <TouchIsTouched>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1fa      	bne.n	80077e8 <skillControl+0x1c>
			{

			}
		if(checkSkill==0&&mainSpeedData->energy>0)
 80077f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007820 <skillControl+0x54>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <skillControl+0x46>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	dd07      	ble.n	8007812 <skillControl+0x46>
		{
			checkSkill=1;
 8007802:	4b07      	ldr	r3, [pc, #28]	@ (8007820 <skillControl+0x54>)
 8007804:	2201      	movs	r2, #1
 8007806:	601a      	str	r2, [r3, #0]
			subHP=mainSpeedData->hp;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780c:	4a05      	ldr	r2, [pc, #20]	@ (8007824 <skillControl+0x58>)
 800780e:	6013      	str	r3, [r2, #0]
		{
			checkSkill=0;
		}
	}

}
 8007810:	e002      	b.n	8007818 <skillControl+0x4c>
			checkSkill=0;
 8007812:	4b03      	ldr	r3, [pc, #12]	@ (8007820 <skillControl+0x54>)
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	2000161c 	.word	0x2000161c
 8007824:	20001620 	.word	0x20001620

08007828 <DPSskill>:

void DPSskill(struct mainStruct *mainSpeedData)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	skillControl(mainSpeedData);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ffcb 	bl	80077cc <skillControl>
	if(checkSkill==1)
 8007836:	4b20      	ldr	r3, [pc, #128]	@ (80078b8 <DPSskill+0x90>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d12c      	bne.n	8007898 <DPSskill+0x70>
	{

		mainSpeedData->energy-=2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007842:	1e9a      	subs	r2, r3, #2
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	641a      	str	r2, [r3, #64]	@ 0x40
		mainSpeedData->mainBullet[0].dame=6;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2206      	movs	r2, #6
 800784c:	61da      	str	r2, [r3, #28]
		mainSpeedData->mainBullet[1].dame=6;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2206      	movs	r2, #6
 8007852:	635a      	str	r2, [r3, #52]	@ 0x34

		lcdFillCircle(rTouchX+15, rTouchY+8, 2, COLOR_THEME_LIMEGREEN_LIGHTER);
 8007854:	4b19      	ldr	r3, [pc, #100]	@ (80078bc <DPSskill+0x94>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b29b      	uxth	r3, r3
 800785a:	330f      	adds	r3, #15
 800785c:	b29b      	uxth	r3, r3
 800785e:	b218      	sxth	r0, r3
 8007860:	4b17      	ldr	r3, [pc, #92]	@ (80078c0 <DPSskill+0x98>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	3308      	adds	r3, #8
 8007868:	b29b      	uxth	r3, r3
 800786a:	b219      	sxth	r1, r3
 800786c:	f64e 73f9 	movw	r3, #61433	@ 0xeff9
 8007870:	2202      	movs	r2, #2
 8007872:	f7fe f803 	bl	800587c <lcdFillCircle>
		mainSpeedData->mainBullet[0].w=4;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2204      	movs	r2, #4
 800787a:	621a      	str	r2, [r3, #32]
		mainSpeedData->mainBullet[1].w=4;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2204      	movs	r2, #4
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38
		if(mainSpeedData->energy<=0)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	dc12      	bgt.n	80078b0 <DPSskill+0x88>
		{
			mainSpeedData->energy=0;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	641a      	str	r2, [r3, #64]	@ 0x40
			checkSkill=0;
 8007890:	4b09      	ldr	r3, [pc, #36]	@ (80078b8 <DPSskill+0x90>)
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
		mainSpeedData->mainBullet[0].dame=3;
		mainSpeedData->mainBullet[1].dame=3;
		mainSpeedData->mainBullet[1].w=2;
	}

}
 8007896:	e00b      	b.n	80078b0 <DPSskill+0x88>
		mainSpeedData->mainBullet[0].w=2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	621a      	str	r2, [r3, #32]
		mainSpeedData->mainBullet[0].dame=3;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2203      	movs	r2, #3
 80078a2:	61da      	str	r2, [r3, #28]
		mainSpeedData->mainBullet[1].dame=3;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2203      	movs	r2, #3
 80078a8:	635a      	str	r2, [r3, #52]	@ 0x34
		mainSpeedData->mainBullet[1].w=2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	2000161c 	.word	0x2000161c
 80078bc:	20000008 	.word	0x20000008
 80078c0:	2000000c 	.word	0x2000000c

080078c4 <SPDskill>:

void SPDskill(struct mainStruct *mainSpeedData)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	6078      	str	r0, [r7, #4]
	skillControl(mainSpeedData);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ff7d 	bl	80077cc <skillControl>
	if(checkSkill==1)
 80078d2:	4b29      	ldr	r3, [pc, #164]	@ (8007978 <SPDskill+0xb4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d145      	bne.n	8007966 <SPDskill+0xa2>
	{

		mainSpeedData->energy-=2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	1e9a      	subs	r2, r3, #2
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	641a      	str	r2, [r3, #64]	@ 0x40
		if(mainSpeedData->hp<=0)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	dc08      	bgt.n	80078fe <SPDskill+0x3a>
		{
		mainSpeedData->hp=1;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	63da      	str	r2, [r3, #60]	@ 0x3c
		mainSpeedData->mainBullet[0].dame=4;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	61da      	str	r2, [r3, #28]
		mainSpeedData->mainBullet[1].dame=4;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2204      	movs	r2, #4
 80078fc:	635a      	str	r2, [r3, #52]	@ 0x34

		}
		mainSpeedData->spd=10;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1e      	ldr	r2, [pc, #120]	@ (800797c <SPDskill+0xb8>)
 8007902:	609a      	str	r2, [r3, #8]

		lcdFillRect(rTouchX+7,rTouchY+32, 2, 2,COLOR_THEME_LIMEGREEN_LIGHTER);
 8007904:	4b1e      	ldr	r3, [pc, #120]	@ (8007980 <SPDskill+0xbc>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	3307      	adds	r3, #7
 800790c:	b29b      	uxth	r3, r3
 800790e:	b218      	sxth	r0, r3
 8007910:	4b1c      	ldr	r3, [pc, #112]	@ (8007984 <SPDskill+0xc0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	3320      	adds	r3, #32
 8007918:	b29b      	uxth	r3, r3
 800791a:	b219      	sxth	r1, r3
 800791c:	f64e 73f9 	movw	r3, #61433	@ 0xeff9
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	2302      	movs	r3, #2
 8007924:	2202      	movs	r2, #2
 8007926:	f7fe f881 	bl	8005a2c <lcdFillRect>
		lcdFillRect(rTouchX+22,rTouchY+32, 2, 2,COLOR_THEME_LIMEGREEN_LIGHTER);
 800792a:	4b15      	ldr	r3, [pc, #84]	@ (8007980 <SPDskill+0xbc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	3316      	adds	r3, #22
 8007932:	b29b      	uxth	r3, r3
 8007934:	b218      	sxth	r0, r3
 8007936:	4b13      	ldr	r3, [pc, #76]	@ (8007984 <SPDskill+0xc0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	3320      	adds	r3, #32
 800793e:	b29b      	uxth	r3, r3
 8007940:	b219      	sxth	r1, r3
 8007942:	f64e 73f9 	movw	r3, #61433	@ 0xeff9
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	2302      	movs	r3, #2
 800794a:	2202      	movs	r2, #2
 800794c:	f7fe f86e 	bl	8005a2c <lcdFillRect>

		if(mainSpeedData->energy<=0)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc0a      	bgt.n	800796e <SPDskill+0xaa>
		{
			mainSpeedData->energy=0;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	641a      	str	r2, [r3, #64]	@ 0x40
			checkSkill=0;
 800795e:	4b06      	ldr	r3, [pc, #24]	@ (8007978 <SPDskill+0xb4>)
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]
	{
		mainSpeedData->spd=4;

	}

}
 8007964:	e003      	b.n	800796e <SPDskill+0xaa>
		mainSpeedData->spd=4;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800796c:	609a      	str	r2, [r3, #8]
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	2000161c 	.word	0x2000161c
 800797c:	41200000 	.word	0x41200000
 8007980:	20000008 	.word	0x20000008
 8007984:	2000000c 	.word	0x2000000c

08007988 <TANKskill>:

void TANKskill(struct mainStruct *mainSpeedData)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	skillControl(mainSpeedData);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff ff1b 	bl	80077cc <skillControl>
	if(checkSkill==1)
 8007996:	4b16      	ldr	r3, [pc, #88]	@ (80079f0 <TANKskill+0x68>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d123      	bne.n	80079e6 <TANKskill+0x5e>
	{

		mainSpeedData->energy-=2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a2:	1e9a      	subs	r2, r3, #2
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	641a      	str	r2, [r3, #64]	@ 0x40
		mainSpeedData->hp=subHP;
 80079a8:	4b12      	ldr	r3, [pc, #72]	@ (80079f4 <TANKskill+0x6c>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	63da      	str	r2, [r3, #60]	@ 0x3c
		lcdDrawCircle(rTouchX+15, rTouchY+17, 15, COLOR_THEME_LIMEGREEN_LIGHTER );
 80079b0:	4b11      	ldr	r3, [pc, #68]	@ (80079f8 <TANKskill+0x70>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	330f      	adds	r3, #15
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	b218      	sxth	r0, r3
 80079bc:	4b0f      	ldr	r3, [pc, #60]	@ (80079fc <TANKskill+0x74>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3311      	adds	r3, #17
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	b219      	sxth	r1, r3
 80079c8:	f64e 73f9 	movw	r3, #61433	@ 0xeff9
 80079cc:	220f      	movs	r2, #15
 80079ce:	f7fd fe81 	bl	80056d4 <lcdDrawCircle>

		if(mainSpeedData->energy<=0)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	dc05      	bgt.n	80079e6 <TANKskill+0x5e>
		{
			mainSpeedData->energy=0;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	641a      	str	r2, [r3, #64]	@ 0x40
			checkSkill=0;
 80079e0:	4b03      	ldr	r3, [pc, #12]	@ (80079f0 <TANKskill+0x68>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
	{


	}

}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	2000161c 	.word	0x2000161c
 80079f4:	20001620 	.word	0x20001620
 80079f8:	20000008 	.word	0x20000008
 80079fc:	2000000c 	.word	0x2000000c

08007a00 <lose>:


void lose()
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0

	lcdSetTextColor(COLOR_RED,COLOR_BLACK);
 8007a04:	2100      	movs	r1, #0
 8007a06:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8007a0a:	f7fe fa05 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font24 );
 8007a0e:	4806      	ldr	r0, [pc, #24]	@ (8007a28 <lose+0x28>)
 8007a10:	f7fe f9f2 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 55 , 135 );
 8007a14:	2187      	movs	r1, #135	@ 0x87
 8007a16:	2037      	movs	r0, #55	@ 0x37
 8007a18:	f7fe fa7e 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "YOU LOSE" );
 8007a1c:	4803      	ldr	r0, [pc, #12]	@ (8007a2c <lose+0x2c>)
 8007a1e:	f7fe f95f 	bl	8005ce0 <lcdPrintf>
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000034 	.word	0x20000034
 8007a2c:	08010794 	.word	0x08010794

08007a30 <win>:

void win()
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0

	lcdSetTextColor(COLOR_BLUE,COLOR_BLACK);
 8007a34:	2100      	movs	r1, #0
 8007a36:	201f      	movs	r0, #31
 8007a38:	f7fe f9ee 	bl	8005e18 <lcdSetTextColor>
	lcdSetTextFont( & Font24 );
 8007a3c:	4805      	ldr	r0, [pc, #20]	@ (8007a54 <win+0x24>)
 8007a3e:	f7fe f9db 	bl	8005df8 <lcdSetTextFont>
	lcdSetCursor( 55 , 135 );
 8007a42:	2187      	movs	r1, #135	@ 0x87
 8007a44:	2037      	movs	r0, #55	@ 0x37
 8007a46:	f7fe fa67 	bl	8005f18 <lcdSetCursor>
	lcdPrintf( "YOU WIN" );
 8007a4a:	4803      	ldr	r0, [pc, #12]	@ (8007a58 <win+0x28>)
 8007a4c:	f7fe f948 	bl	8005ce0 <lcdPrintf>
}
 8007a50:	bf00      	nop
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20000034 	.word	0x20000034
 8007a58:	080107a0 	.word	0x080107a0

08007a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a62:	2300      	movs	r3, #0
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	4b10      	ldr	r3, [pc, #64]	@ (8007aa8 <HAL_MspInit+0x4c>)
 8007a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa8 <HAL_MspInit+0x4c>)
 8007a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a72:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <HAL_MspInit+0x4c>)
 8007a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a7a:	607b      	str	r3, [r7, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a7e:	2300      	movs	r3, #0
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	4b09      	ldr	r3, [pc, #36]	@ (8007aa8 <HAL_MspInit+0x4c>)
 8007a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a86:	4a08      	ldr	r2, [pc, #32]	@ (8007aa8 <HAL_MspInit+0x4c>)
 8007a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a8e:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <HAL_MspInit+0x4c>)
 8007a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40023800 	.word	0x40023800

08007aac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ab4:	f107 0308 	add.w	r3, r7, #8
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	609a      	str	r2, [r3, #8]
 8007ac0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8007af8 <HAL_RTC_MspInit+0x4c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d111      	bne.n	8007af0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007acc:	2302      	movs	r3, #2
 8007ace:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ad4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ad6:	f107 0308 	add.w	r3, r7, #8
 8007ada:	4618      	mov	r0, r3
 8007adc:	f002 f89e 	bl	8009c1c <HAL_RCCEx_PeriphCLKConfig>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8007ae6:	f7ff facf 	bl	8007088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007aea:	4b04      	ldr	r3, [pc, #16]	@ (8007afc <HAL_RTC_MspInit+0x50>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8007af0:	bf00      	nop
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40002800 	.word	0x40002800
 8007afc:	42470e3c 	.word	0x42470e3c

08007b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08c      	sub	sp, #48	@ 0x30
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b08:	f107 031c 	add.w	r3, r7, #28
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	605a      	str	r2, [r3, #4]
 8007b12:	609a      	str	r2, [r3, #8]
 8007b14:	60da      	str	r2, [r3, #12]
 8007b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a58      	ldr	r2, [pc, #352]	@ (8007c80 <HAL_SPI_MspInit+0x180>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d178      	bne.n	8007c14 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b22:	2300      	movs	r3, #0
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	4b57      	ldr	r3, [pc, #348]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b2a:	4a56      	ldr	r2, [pc, #344]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b32:	4b54      	ldr	r3, [pc, #336]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	4b50      	ldr	r3, [pc, #320]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b46:	4a4f      	ldr	r2, [pc, #316]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b48:	f043 0301 	orr.w	r3, r3, #1
 8007b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	4b49      	ldr	r3, [pc, #292]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b62:	4a48      	ldr	r2, [pc, #288]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b6a:	4b46      	ldr	r3, [pc, #280]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007b76:	23a0      	movs	r3, #160	@ 0xa0
 8007b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b82:	2303      	movs	r3, #3
 8007b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b86:	2305      	movs	r3, #5
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b8a:	f107 031c 	add.w	r3, r7, #28
 8007b8e:	4619      	mov	r1, r3
 8007b90:	483d      	ldr	r0, [pc, #244]	@ (8007c88 <HAL_SPI_MspInit+0x188>)
 8007b92:	f001 fa05 	bl	8008fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007b96:	2310      	movs	r3, #16
 8007b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007ba6:	2305      	movs	r3, #5
 8007ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007baa:	f107 031c 	add.w	r3, r7, #28
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4836      	ldr	r0, [pc, #216]	@ (8007c8c <HAL_SPI_MspInit+0x18c>)
 8007bb2:	f001 f9f5 	bl	8008fa0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8007bb6:	4b36      	ldr	r3, [pc, #216]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bb8:	4a36      	ldr	r2, [pc, #216]	@ (8007c94 <HAL_SPI_MspInit+0x194>)
 8007bba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8007bbc:	4b34      	ldr	r3, [pc, #208]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bbe:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8007bc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007bc4:	4b32      	ldr	r3, [pc, #200]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bca:	4b31      	ldr	r3, [pc, #196]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bd6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bde:	4b2c      	ldr	r3, [pc, #176]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8007be4:	4b2a      	ldr	r3, [pc, #168]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007bea:	4b29      	ldr	r3, [pc, #164]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bf0:	4b27      	ldr	r3, [pc, #156]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8007bf6:	4826      	ldr	r0, [pc, #152]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007bf8:	f000 fe56 	bl	80088a8 <HAL_DMA_Init>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8007c02:	f7ff fa41 	bl	8007088 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a21      	ldr	r2, [pc, #132]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007c0c:	4a20      	ldr	r2, [pc, #128]	@ (8007c90 <HAL_SPI_MspInit+0x190>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007c12:	e031      	b.n	8007c78 <HAL_SPI_MspInit+0x178>
  else if(hspi->Instance==SPI2)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a1f      	ldr	r2, [pc, #124]	@ (8007c98 <HAL_SPI_MspInit+0x198>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d12c      	bne.n	8007c78 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	4b18      	ldr	r3, [pc, #96]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	4a17      	ldr	r2, [pc, #92]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c2e:	4b15      	ldr	r3, [pc, #84]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	4b11      	ldr	r3, [pc, #68]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c42:	4a10      	ldr	r2, [pc, #64]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007c44:	f043 0302 	orr.w	r3, r3, #2
 8007c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c84 <HAL_SPI_MspInit+0x184>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	60bb      	str	r3, [r7, #8]
 8007c54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007c56:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8007c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c64:	2303      	movs	r3, #3
 8007c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007c68:	2305      	movs	r3, #5
 8007c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c6c:	f107 031c 	add.w	r3, r7, #28
 8007c70:	4619      	mov	r1, r3
 8007c72:	4806      	ldr	r0, [pc, #24]	@ (8007c8c <HAL_SPI_MspInit+0x18c>)
 8007c74:	f001 f994 	bl	8008fa0 <HAL_GPIO_Init>
}
 8007c78:	bf00      	nop
 8007c7a:	3730      	adds	r7, #48	@ 0x30
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	40013000 	.word	0x40013000
 8007c84:	40023800 	.word	0x40023800
 8007c88:	40020000 	.word	0x40020000
 8007c8c:	40020400 	.word	0x40020400
 8007c90:	200014d8 	.word	0x200014d8
 8007c94:	40026410 	.word	0x40026410
 8007c98:	40003800 	.word	0x40003800

08007c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d1c <HAL_TIM_Base_MspInit+0x80>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d116      	bne.n	8007cdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d20 <HAL_TIM_Base_MspInit+0x84>)
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8007d20 <HAL_TIM_Base_MspInit+0x84>)
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8007cbe:	4b18      	ldr	r3, [pc, #96]	@ (8007d20 <HAL_TIM_Base_MspInit+0x84>)
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2100      	movs	r1, #0
 8007cce:	2019      	movs	r0, #25
 8007cd0:	f000 fdb3 	bl	800883a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007cd4:	2019      	movs	r0, #25
 8007cd6:	f000 fdcc 	bl	8008872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007cda:	e01a      	b.n	8007d12 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a10      	ldr	r2, [pc, #64]	@ (8007d24 <HAL_TIM_Base_MspInit+0x88>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d115      	bne.n	8007d12 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60bb      	str	r3, [r7, #8]
 8007cea:	4b0d      	ldr	r3, [pc, #52]	@ (8007d20 <HAL_TIM_Base_MspInit+0x84>)
 8007cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cee:	4a0c      	ldr	r2, [pc, #48]	@ (8007d20 <HAL_TIM_Base_MspInit+0x84>)
 8007cf0:	f043 0310 	orr.w	r3, r3, #16
 8007cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d20 <HAL_TIM_Base_MspInit+0x84>)
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	60bb      	str	r3, [r7, #8]
 8007d00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007d02:	2200      	movs	r2, #0
 8007d04:	2100      	movs	r1, #0
 8007d06:	2036      	movs	r0, #54	@ 0x36
 8007d08:	f000 fd97 	bl	800883a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007d0c:	2036      	movs	r0, #54	@ 0x36
 8007d0e:	f000 fdb0 	bl	8008872 <HAL_NVIC_EnableIRQ>
}
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	40010000 	.word	0x40010000
 8007d20:	40023800 	.word	0x40023800
 8007d24:	40001000 	.word	0x40001000

08007d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08a      	sub	sp, #40	@ 0x28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d30:	f107 0314 	add.w	r3, r7, #20
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	60da      	str	r2, [r3, #12]
 8007d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1d      	ldr	r2, [pc, #116]	@ (8007dbc <HAL_UART_MspInit+0x94>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d134      	bne.n	8007db4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc0 <HAL_UART_MspInit+0x98>)
 8007d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d52:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc0 <HAL_UART_MspInit+0x98>)
 8007d54:	f043 0310 	orr.w	r3, r3, #16
 8007d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d5a:	4b19      	ldr	r3, [pc, #100]	@ (8007dc0 <HAL_UART_MspInit+0x98>)
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <HAL_UART_MspInit+0x98>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	4a14      	ldr	r2, [pc, #80]	@ (8007dc0 <HAL_UART_MspInit+0x98>)
 8007d70:	f043 0301 	orr.w	r3, r3, #1
 8007d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d76:	4b12      	ldr	r3, [pc, #72]	@ (8007dc0 <HAL_UART_MspInit+0x98>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007d82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d90:	2303      	movs	r3, #3
 8007d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007d94:	2307      	movs	r3, #7
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d98:	f107 0314 	add.w	r3, r7, #20
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4809      	ldr	r0, [pc, #36]	@ (8007dc4 <HAL_UART_MspInit+0x9c>)
 8007da0:	f001 f8fe 	bl	8008fa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8007da4:	2200      	movs	r2, #0
 8007da6:	2101      	movs	r1, #1
 8007da8:	2025      	movs	r0, #37	@ 0x25
 8007daa:	f000 fd46 	bl	800883a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007dae:	2025      	movs	r0, #37	@ 0x25
 8007db0:	f000 fd5f 	bl	8008872 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8007db4:	bf00      	nop
 8007db6:	3728      	adds	r7, #40	@ 0x28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	40011000 	.word	0x40011000
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	40020000 	.word	0x40020000

08007dc8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8007dce:	1d3b      	adds	r3, r7, #4
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8007e50 <HAL_FSMC_MspInit+0x88>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d131      	bne.n	8007e48 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8007de4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e50 <HAL_FSMC_MspInit+0x88>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8007dea:	2300      	movs	r3, #0
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	4b19      	ldr	r3, [pc, #100]	@ (8007e54 <HAL_FSMC_MspInit+0x8c>)
 8007df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df2:	4a18      	ldr	r2, [pc, #96]	@ (8007e54 <HAL_FSMC_MspInit+0x8c>)
 8007df4:	f043 0301 	orr.w	r3, r3, #1
 8007df8:	6393      	str	r3, [r2, #56]	@ 0x38
 8007dfa:	4b16      	ldr	r3, [pc, #88]	@ (8007e54 <HAL_FSMC_MspInit+0x8c>)
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8007e06:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8007e0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e14:	2303      	movs	r3, #3
 8007e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8007e18:	230c      	movs	r3, #12
 8007e1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e1c:	1d3b      	adds	r3, r7, #4
 8007e1e:	4619      	mov	r1, r3
 8007e20:	480d      	ldr	r0, [pc, #52]	@ (8007e58 <HAL_FSMC_MspInit+0x90>)
 8007e22:	f001 f8bd 	bl	8008fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8007e26:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8007e2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e34:	2303      	movs	r3, #3
 8007e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8007e38:	230c      	movs	r3, #12
 8007e3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e3c:	1d3b      	adds	r3, r7, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4806      	ldr	r0, [pc, #24]	@ (8007e5c <HAL_FSMC_MspInit+0x94>)
 8007e42:	f001 f8ad 	bl	8008fa0 <HAL_GPIO_Init>
 8007e46:	e000      	b.n	8007e4a <HAL_FSMC_MspInit+0x82>
    return;
 8007e48:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20001624 	.word	0x20001624
 8007e54:	40023800 	.word	0x40023800
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40020c00 	.word	0x40020c00

08007e60 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8007e68:	f7ff ffae 	bl	8007dc8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007e78:	bf00      	nop
 8007e7a:	e7fd      	b.n	8007e78 <NMI_Handler+0x4>

08007e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e80:	bf00      	nop
 8007e82:	e7fd      	b.n	8007e80 <HardFault_Handler+0x4>

08007e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e88:	bf00      	nop
 8007e8a:	e7fd      	b.n	8007e88 <MemManage_Handler+0x4>

08007e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e90:	bf00      	nop
 8007e92:	e7fd      	b.n	8007e90 <BusFault_Handler+0x4>

08007e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e98:	bf00      	nop
 8007e9a:	e7fd      	b.n	8007e98 <UsageFault_Handler+0x4>

08007e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ea0:	bf00      	nop
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007eae:	bf00      	nop
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ebc:	bf00      	nop
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007eca:	f000 fb97 	bl	80085fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ece:	bf00      	nop
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007ed6:	2008      	movs	r0, #8
 8007ed8:	f001 fa30 	bl	800933c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007edc:	bf00      	nop
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007ee4:	2010      	movs	r0, #16
 8007ee6:	f001 fa29 	bl	800933c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007eea:	bf00      	nop
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007ef4:	4802      	ldr	r0, [pc, #8]	@ (8007f00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007ef6:	f002 fdfa 	bl	800aaee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007efa:	bf00      	nop
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20001538 	.word	0x20001538

08007f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007f08:	4802      	ldr	r0, [pc, #8]	@ (8007f14 <USART1_IRQHandler+0x10>)
 8007f0a:	f003 fb3d 	bl	800b588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007f0e:	bf00      	nop
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	200013c0 	.word	0x200013c0

08007f18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007f1c:	4802      	ldr	r0, [pc, #8]	@ (8007f28 <TIM6_DAC_IRQHandler+0x10>)
 8007f1e:	f002 fde6 	bl	800aaee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007f22:	bf00      	nop
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20001580 	.word	0x20001580

08007f2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007f30:	4802      	ldr	r0, [pc, #8]	@ (8007f3c <DMA2_Stream0_IRQHandler+0x10>)
 8007f32:	f000 fdf9 	bl	8008b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	200014d8 	.word	0x200014d8

08007f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  return 1;
 8007f44:	2301      	movs	r3, #1
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <_kill>:

int _kill(int pid, int sig)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007f5a:	f005 fd57 	bl	800da0c <__errno>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2216      	movs	r2, #22
 8007f62:	601a      	str	r2, [r3, #0]
  return -1;
 8007f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <_exit>:

void _exit (int status)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007f78:	f04f 31ff 	mov.w	r1, #4294967295
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ffe7 	bl	8007f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007f82:	bf00      	nop
 8007f84:	e7fd      	b.n	8007f82 <_exit+0x12>

08007f86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	e00a      	b.n	8007fae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007f98:	f3af 8000 	nop.w
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	60ba      	str	r2, [r7, #8]
 8007fa4:	b2ca      	uxtb	r2, r1
 8007fa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	3301      	adds	r3, #1
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	dbf0      	blt.n	8007f98 <_read+0x12>
  }

  return len;
 8007fb6:	687b      	ldr	r3, [r7, #4]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	e009      	b.n	8007fe6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	60ba      	str	r2, [r7, #8]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	dbf1      	blt.n	8007fd2 <_write+0x12>
  }
  return len;
 8007fee:	687b      	ldr	r3, [r7, #4]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <_close>:

int _close(int file)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008020:	605a      	str	r2, [r3, #4]
  return 0;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <_isatty>:

int _isatty(int file)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008038:	2301      	movs	r3, #1
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008046:	b480      	push	{r7}
 8008048:	b085      	sub	sp, #20
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008068:	4a14      	ldr	r2, [pc, #80]	@ (80080bc <_sbrk+0x5c>)
 800806a:	4b15      	ldr	r3, [pc, #84]	@ (80080c0 <_sbrk+0x60>)
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008074:	4b13      	ldr	r3, [pc, #76]	@ (80080c4 <_sbrk+0x64>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800807c:	4b11      	ldr	r3, [pc, #68]	@ (80080c4 <_sbrk+0x64>)
 800807e:	4a12      	ldr	r2, [pc, #72]	@ (80080c8 <_sbrk+0x68>)
 8008080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008082:	4b10      	ldr	r3, [pc, #64]	@ (80080c4 <_sbrk+0x64>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4413      	add	r3, r2
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	429a      	cmp	r2, r3
 800808e:	d207      	bcs.n	80080a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008090:	f005 fcbc 	bl	800da0c <__errno>
 8008094:	4603      	mov	r3, r0
 8008096:	220c      	movs	r2, #12
 8008098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800809a:	f04f 33ff 	mov.w	r3, #4294967295
 800809e:	e009      	b.n	80080b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80080a0:	4b08      	ldr	r3, [pc, #32]	@ (80080c4 <_sbrk+0x64>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80080a6:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <_sbrk+0x64>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	4a05      	ldr	r2, [pc, #20]	@ (80080c4 <_sbrk+0x64>)
 80080b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80080b2:	68fb      	ldr	r3, [r7, #12]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20020000 	.word	0x20020000
 80080c0:	00000400 	.word	0x00000400
 80080c4:	20001628 	.word	0x20001628
 80080c8:	20001798 	.word	0x20001798

080080cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80080d0:	4b06      	ldr	r3, [pc, #24]	@ (80080ec <SystemInit+0x20>)
 80080d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d6:	4a05      	ldr	r2, [pc, #20]	@ (80080ec <SystemInit+0x20>)
 80080d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80080e0:	bf00      	nop
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	e000ed00 	.word	0xe000ed00

080080f0 <SpiTransfer>:
static uint8_t SpiTransfer(uint8_t byte);
static bool GetPointRaw(uint16_t* x, uint16_t* y);
static bool GetPointRaw(uint16_t* x, uint16_t* y);

static uint8_t SpiTransfer(uint8_t byte)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af02      	add	r7, sp, #8
 80080f6:	4603      	mov	r3, r0
 80080f8:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	(void)HAL_SPI_TransmitReceive(&hspi2, &byte, &result, 1U, 1000U);
 80080fa:	f107 020f 	add.w	r2, r7, #15
 80080fe:	1df9      	adds	r1, r7, #7
 8008100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	2301      	movs	r3, #1
 8008108:	4803      	ldr	r0, [pc, #12]	@ (8008118 <SpiTransfer+0x28>)
 800810a:	f002 f934 	bl	800a376 <HAL_SPI_TransmitReceive>

	return (result);
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20001480 	.word	0x20001480

0800811c <GetPointRaw>:
//    lcdSetCursor(50,150);
//	lcdPrintf("Touch centre of cross");
//}

static bool GetPointRaw(uint16_t* x, uint16_t* y)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b090      	sub	sp, #64	@ 0x40
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	uint16_t x_raw;
	uint16_t y_raw;
	uint16_t databuffer[2][MW_HAL_TOUCH_READ_POINTS_COUNT];
	uint8_t touch_count;

	if (!TouchIsTouched())
 8008126:	f000 f921 	bl	800836c <TouchIsTouched>
 800812a:	4603      	mov	r3, r0
 800812c:	f083 0301 	eor.w	r3, r3, #1
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <GetPointRaw+0x1e>
	{
		return false;
 8008136:	2300      	movs	r3, #0
 8008138:	e111      	b.n	800835e <GetPointRaw+0x242>
	}

	// get set of readings
	CS_ON;
 800813a:	2200      	movs	r2, #0
 800813c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008140:	4889      	ldr	r0, [pc, #548]	@ (8008368 <GetPointRaw+0x24c>)
 8008142:	f001 f8e1 	bl	8009308 <HAL_GPIO_WritePin>
	touch_count = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	do
	{
		SpiTransfer(COMMAND_READ_X);
 800814c:	20d0      	movs	r0, #208	@ 0xd0
 800814e:	f7ff ffcf 	bl	80080f0 <SpiTransfer>
		x_raw = (uint16_t)SpiTransfer(0U) << 8;
 8008152:	2000      	movs	r0, #0
 8008154:	f7ff ffcc 	bl	80080f0 <SpiTransfer>
 8008158:	4603      	mov	r3, r0
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	877b      	strh	r3, [r7, #58]	@ 0x3a
		x_raw |= (uint16_t)SpiTransfer(0U);
 800815e:	2000      	movs	r0, #0
 8008160:	f7ff ffc6 	bl	80080f0 <SpiTransfer>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800816a:	4313      	orrs	r3, r2
 800816c:	877b      	strh	r3, [r7, #58]	@ 0x3a
		x_raw >>= 3;
 800816e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008170:	08db      	lsrs	r3, r3, #3
 8008172:	877b      	strh	r3, [r7, #58]	@ 0x3a

		SpiTransfer(COMMAND_READ_Y);
 8008174:	2090      	movs	r0, #144	@ 0x90
 8008176:	f7ff ffbb 	bl	80080f0 <SpiTransfer>
		y_raw = (uint16_t)SpiTransfer(0U) << 8;
 800817a:	2000      	movs	r0, #0
 800817c:	f7ff ffb8 	bl	80080f0 <SpiTransfer>
 8008180:	4603      	mov	r3, r0
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	873b      	strh	r3, [r7, #56]	@ 0x38
		y_raw |= (uint16_t)SpiTransfer(0U);
 8008186:	2000      	movs	r0, #0
 8008188:	f7ff ffb2 	bl	80080f0 <SpiTransfer>
 800818c:	4603      	mov	r3, r0
 800818e:	461a      	mov	r2, r3
 8008190:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008192:	4313      	orrs	r3, r2
 8008194:	873b      	strh	r3, [r7, #56]	@ 0x38
		y_raw >>= 3;
 8008196:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008198:	08db      	lsrs	r3, r3, #3
 800819a:	873b      	strh	r3, [r7, #56]	@ 0x38

		databuffer[0][touch_count] = x_raw;
 800819c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	3340      	adds	r3, #64	@ 0x40
 80081a4:	443b      	add	r3, r7
 80081a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80081a8:	f823 2c34 	strh.w	r2, [r3, #-52]
		databuffer[1][touch_count] = y_raw;
 80081ac:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80081b0:	330a      	adds	r3, #10
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	3340      	adds	r3, #64	@ 0x40
 80081b6:	443b      	add	r3, r7
 80081b8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80081ba:	f823 2c34 	strh.w	r2, [r3, #-52]
		touch_count++;
 80081be:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80081c2:	3301      	adds	r3, #1
 80081c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	}
	while (TouchIsTouched() == true && touch_count < MW_HAL_TOUCH_READ_POINTS_COUNT);
 80081c8:	f000 f8d0 	bl	800836c <TouchIsTouched>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <GetPointRaw+0xbe>
 80081d2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80081d6:	2b09      	cmp	r3, #9
 80081d8:	d9b8      	bls.n	800814c <GetPointRaw+0x30>
	CS_OFF;
 80081da:	2201      	movs	r2, #1
 80081dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80081e0:	4861      	ldr	r0, [pc, #388]	@ (8008368 <GetPointRaw+0x24c>)
 80081e2:	f001 f891 	bl	8009308 <HAL_GPIO_WritePin>

	// check that the touch was held down during all the readings
	if (touch_count != MW_HAL_TOUCH_READ_POINTS_COUNT)
 80081e6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80081ea:	2b0a      	cmp	r3, #10
 80081ec:	d001      	beq.n	80081f2 <GetPointRaw+0xd6>
	{
		return (false);
 80081ee:	2300      	movs	r3, #0
 80081f0:	e0b5      	b.n	800835e <GetPointRaw+0x242>
	}

	// sort the x readings
	do
	{
		sorted = true;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 80081f8:	2300      	movs	r3, #0
 80081fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80081fe:	e039      	b.n	8008274 <GetPointRaw+0x158>
		{
			if(databuffer[0][i] > databuffer[0][i + 1U])
 8008200:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	3340      	adds	r3, #64	@ 0x40
 8008208:	443b      	add	r3, r7
 800820a:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 800820e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008212:	3301      	adds	r3, #1
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	3340      	adds	r3, #64	@ 0x40
 8008218:	443b      	add	r3, r7
 800821a:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800821e:	429a      	cmp	r2, r3
 8008220:	d923      	bls.n	800826a <GetPointRaw+0x14e>
			{
				swap_value = databuffer[0][i + 1U];
 8008222:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008226:	3301      	adds	r3, #1
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	3340      	adds	r3, #64	@ 0x40
 800822c:	443b      	add	r3, r7
 800822e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8008232:	86fb      	strh	r3, [r7, #54]	@ 0x36
				databuffer[0][i + 1U] = databuffer[0][i];
 8008234:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008238:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800823c:	3201      	adds	r2, #1
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	3340      	adds	r3, #64	@ 0x40
 8008242:	443b      	add	r3, r7
 8008244:	f833 1c34 	ldrh.w	r1, [r3, #-52]
 8008248:	0053      	lsls	r3, r2, #1
 800824a:	3340      	adds	r3, #64	@ 0x40
 800824c:	443b      	add	r3, r7
 800824e:	460a      	mov	r2, r1
 8008250:	f823 2c34 	strh.w	r2, [r3, #-52]
				databuffer[0][i] = swap_value;
 8008254:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	3340      	adds	r3, #64	@ 0x40
 800825c:	443b      	add	r3, r7
 800825e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008260:	f823 2c34 	strh.w	r2, [r3, #-52]
				sorted = false;
 8008264:	2300      	movs	r3, #0
 8008266:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 800826a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800826e:	3301      	adds	r3, #1
 8008270:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008274:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008278:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800827c:	3b01      	subs	r3, #1
 800827e:	429a      	cmp	r2, r3
 8008280:	d3be      	bcc.n	8008200 <GetPointRaw+0xe4>
			}
		}
	}
	while (!sorted);
 8008282:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008286:	f083 0301 	eor.w	r3, r3, #1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1b0      	bne.n	80081f2 <GetPointRaw+0xd6>

	// sort the y readings
	do
	{
		sorted = true;
 8008290:	2301      	movs	r3, #1
 8008292:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8008296:	2300      	movs	r3, #0
 8008298:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800829c:	e040      	b.n	8008320 <GetPointRaw+0x204>
		{
			if (databuffer[1][i] > databuffer[1][i + 1U])
 800829e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082a2:	330a      	adds	r3, #10
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	3340      	adds	r3, #64	@ 0x40
 80082a8:	443b      	add	r3, r7
 80082aa:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 80082ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082b2:	3301      	adds	r3, #1
 80082b4:	330a      	adds	r3, #10
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	3340      	adds	r3, #64	@ 0x40
 80082ba:	443b      	add	r3, r7
 80082bc:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d928      	bls.n	8008316 <GetPointRaw+0x1fa>
			{
				swap_value = databuffer[1][i + 1U];
 80082c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082c8:	3301      	adds	r3, #1
 80082ca:	330a      	adds	r3, #10
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	3340      	adds	r3, #64	@ 0x40
 80082d0:	443b      	add	r3, r7
 80082d2:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80082d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
				databuffer[1][i + 1U] = databuffer[1][i];
 80082d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082dc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80082e0:	3201      	adds	r2, #1
 80082e2:	330a      	adds	r3, #10
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	3340      	adds	r3, #64	@ 0x40
 80082e8:	443b      	add	r3, r7
 80082ea:	f833 1c34 	ldrh.w	r1, [r3, #-52]
 80082ee:	f102 030a 	add.w	r3, r2, #10
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	3340      	adds	r3, #64	@ 0x40
 80082f6:	443b      	add	r3, r7
 80082f8:	460a      	mov	r2, r1
 80082fa:	f823 2c34 	strh.w	r2, [r3, #-52]
				databuffer[1][i] = swap_value;
 80082fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008302:	330a      	adds	r3, #10
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	3340      	adds	r3, #64	@ 0x40
 8008308:	443b      	add	r3, r7
 800830a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800830c:	f823 2c34 	strh.w	r2, [r3, #-52]
				sorted = false;
 8008310:	2300      	movs	r3, #0
 8008312:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8008316:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800831a:	3301      	adds	r3, #1
 800831c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008320:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008324:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008328:	3b01      	subs	r3, #1
 800832a:	429a      	cmp	r2, r3
 800832c:	d3b7      	bcc.n	800829e <GetPointRaw+0x182>
			}
		}
	}
	while (!sorted);
 800832e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008332:	f083 0301 	eor.w	r3, r3, #1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1a9      	bne.n	8008290 <GetPointRaw+0x174>

	// take averaged middle 2 readings
	*x = (databuffer[0][4] + databuffer[0][5]) / 2U;
 800833c:	8abb      	ldrh	r3, [r7, #20]
 800833e:	461a      	mov	r2, r3
 8008340:	8afb      	ldrh	r3, [r7, #22]
 8008342:	4413      	add	r3, r2
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	b29a      	uxth	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	801a      	strh	r2, [r3, #0]
	*y = (databuffer[1][4] + databuffer[1][5]) / 2U;
 800834c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800834e:	461a      	mov	r2, r3
 8008350:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008352:	4413      	add	r3, r2
 8008354:	085b      	lsrs	r3, r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	801a      	strh	r2, [r3, #0]

	return (true);
 800835c:	2301      	movs	r3, #1
}
 800835e:	4618      	mov	r0, r3
 8008360:	3740      	adds	r7, #64	@ 0x40
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40020400 	.word	0x40020400

0800836c <TouchIsTouched>:

bool TouchIsTouched(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
	GPIO_PinState pin_state = HAL_GPIO_ReadPin(TOUCH_IRQ_PORT, TOUCH_IRQ_PIN);
 8008372:	2120      	movs	r1, #32
 8008374:	4807      	ldr	r0, [pc, #28]	@ (8008394 <TouchIsTouched+0x28>)
 8008376:	f000 ffaf 	bl	80092d8 <HAL_GPIO_ReadPin>
 800837a:	4603      	mov	r3, r0
 800837c:	71fb      	strb	r3, [r7, #7]
	return pin_state == GPIO_PIN_RESET;
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	2b00      	cmp	r3, #0
 8008382:	bf0c      	ite	eq
 8008384:	2301      	moveq	r3, #1
 8008386:	2300      	movne	r3, #0
 8008388:	b2db      	uxtb	r3, r3
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40020800 	.word	0x40020800

08008398 <TouchGetCalibratedPoint>:

bool TouchGetCalibratedPoint(int16_t* x, int16_t* y)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
	POINT_T display_point;
	uint16_t raw_x;
	uint16_t raw_y;

	// get raw reading
	if (GetPointRaw(&raw_x, &raw_y) == false)
 80083a2:	f107 020c 	add.w	r2, r7, #12
 80083a6:	f107 030e 	add.w	r3, r7, #14
 80083aa:	4611      	mov	r1, r2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff feb5 	bl	800811c <GetPointRaw>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f083 0301 	eor.w	r3, r3, #1
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <TouchGetCalibratedPoint+0x2a>
	{
		return false;
 80083be:	2300      	movs	r3, #0
 80083c0:	e02a      	b.n	8008418 <TouchGetCalibratedPoint+0x80>
	}

	raw_point.x = (INT_32)raw_x;
 80083c2:	89fb      	ldrh	r3, [r7, #14]
 80083c4:	61bb      	str	r3, [r7, #24]
	raw_point.y = (INT_32)raw_y;
 80083c6:	89bb      	ldrh	r3, [r7, #12]
 80083c8:	61fb      	str	r3, [r7, #28]

	// apply calibration matrix
	(void)getDisplayPoint(&display_point, &raw_point, &matrix);
 80083ca:	f107 0118 	add.w	r1, r7, #24
 80083ce:	f107 0310 	add.w	r3, r7, #16
 80083d2:	4a13      	ldr	r2, [pc, #76]	@ (8008420 <TouchGetCalibratedPoint+0x88>)
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fb fbbf 	bl	8003b58 <getDisplayPoint>

	// range check results
	if (display_point.x > 239)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2bef      	cmp	r3, #239	@ 0xef
 80083de:	dd01      	ble.n	80083e4 <TouchGetCalibratedPoint+0x4c>
	{
		display_point.x = 239;
 80083e0:	23ef      	movs	r3, #239	@ 0xef
 80083e2:	613b      	str	r3, [r7, #16]
	}
	if (display_point.y > 319)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80083ea:	db02      	blt.n	80083f2 <TouchGetCalibratedPoint+0x5a>
	{
		display_point.y = 319;
 80083ec:	f240 133f 	movw	r3, #319	@ 0x13f
 80083f0:	617b      	str	r3, [r7, #20]
	}

	if (display_point.x < 0)
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da01      	bge.n	80083fc <TouchGetCalibratedPoint+0x64>
	{
		display_point.x = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
	}
	if (display_point.y < 0)
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da01      	bge.n	8008406 <TouchGetCalibratedPoint+0x6e>
	{
		display_point.y = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]
	}

	*x = (int16_t)display_point.x;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	b21a      	sxth	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)display_point.y;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	b21a      	sxth	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	801a      	strh	r2, [r3, #0]

	return true;
 8008416:	2301      	movs	r3, #1
}
 8008418:	4618      	mov	r0, r3
 800841a:	3720      	adds	r7, #32
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	2000162c 	.word	0x2000162c

08008424 <TouchCalibrate>:

void TouchCalibrate(void)
{
 8008424:	b5b0      	push	{r4, r5, r7, lr}
 8008426:	b08c      	sub	sp, #48	@ 0x30
 8008428:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;
	POINT_T raw_points[3];
	POINT_T display_points[3] = {{40, 40}, {200, 40}, {200, 280}};
 800842a:	4b13      	ldr	r3, [pc, #76]	@ (8008478 <TouchCalibrate+0x54>)
 800842c:	463c      	mov	r4, r7
 800842e:	461d      	mov	r5, r3
 8008430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008434:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008438:	e884 0003 	stmia.w	r4, {r0, r1}

	raw_points[0].x = 2970;
 800843c:	f640 339a 	movw	r3, #2970	@ 0xb9a
 8008440:	61bb      	str	r3, [r7, #24]
	raw_points[0].y = 670;
 8008442:	f240 239e 	movw	r3, #670	@ 0x29e
 8008446:	61fb      	str	r3, [r7, #28]



    /* second point */

	raw_points[1].x = 865;
 8008448:	f240 3361 	movw	r3, #865	@ 0x361
 800844c:	623b      	str	r3, [r7, #32]
	raw_points[1].y = 711;
 800844e:	f240 23c7 	movw	r3, #711	@ 0x2c7
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24




	raw_points[2].x = 789;
 8008454:	f240 3315 	movw	r3, #789	@ 0x315
 8008458:	62bb      	str	r3, [r7, #40]	@ 0x28
	raw_points[2].y = 3239;
 800845a:	f640 43a7 	movw	r3, #3239	@ 0xca7
 800845e:	62fb      	str	r3, [r7, #44]	@ 0x2c



	(void)setCalibrationMatrix(display_points, raw_points, &matrix);
 8008460:	f107 0118 	add.w	r1, r7, #24
 8008464:	463b      	mov	r3, r7
 8008466:	4a05      	ldr	r2, [pc, #20]	@ (800847c <TouchCalibrate+0x58>)
 8008468:	4618      	mov	r0, r3
 800846a:	f7fb fa37 	bl	80038dc <setCalibrationMatrix>
}
 800846e:	bf00      	nop
 8008470:	3730      	adds	r7, #48	@ 0x30
 8008472:	46bd      	mov	sp, r7
 8008474:	bdb0      	pop	{r4, r5, r7, pc}
 8008476:	bf00      	nop
 8008478:	080107a8 	.word	0x080107a8
 800847c:	2000162c 	.word	0x2000162c

08008480 <checkXY>:


bool checkXY( uint16_t xicon, uint16_t yicon, uint16_t ngang, uint16_t doc )
{
 8008480:	b590      	push	{r4, r7, lr}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	4611      	mov	r1, r2
 800848c:	461a      	mov	r2, r3
 800848e:	4623      	mov	r3, r4
 8008490:	80fb      	strh	r3, [r7, #6]
 8008492:	4603      	mov	r3, r0
 8008494:	80bb      	strh	r3, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	807b      	strh	r3, [r7, #2]
 800849a:	4613      	mov	r3, r2
 800849c:	803b      	strh	r3, [r7, #0]

	int16_t x,y;
	  if (TouchGetCalibratedPoint(&x, &y))
 800849e:	f107 020c 	add.w	r2, r7, #12
 80084a2:	f107 030e 	add.w	r3, r7, #14
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff ff75 	bl	8008398 <TouchGetCalibratedPoint>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d021      	beq.n	80084f8 <checkXY+0x78>
	  {
		  if(xicon <=  x && x <= xicon + ngang && yicon <= y && y <= yicon + doc )
 80084b4:	88fb      	ldrh	r3, [r7, #6]
 80084b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80084ba:	4293      	cmp	r3, r2
 80084bc:	dc1a      	bgt.n	80084f4 <checkXY+0x74>
 80084be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084c2:	4619      	mov	r1, r3
 80084c4:	88fa      	ldrh	r2, [r7, #6]
 80084c6:	887b      	ldrh	r3, [r7, #2]
 80084c8:	4413      	add	r3, r2
 80084ca:	4299      	cmp	r1, r3
 80084cc:	dc12      	bgt.n	80084f4 <checkXY+0x74>
 80084ce:	88bb      	ldrh	r3, [r7, #4]
 80084d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	dc0d      	bgt.n	80084f4 <checkXY+0x74>
 80084d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80084dc:	4619      	mov	r1, r3
 80084de:	88ba      	ldrh	r2, [r7, #4]
 80084e0:	883b      	ldrh	r3, [r7, #0]
 80084e2:	4413      	add	r3, r2
 80084e4:	4299      	cmp	r1, r3
 80084e6:	dc05      	bgt.n	80084f4 <checkXY+0x74>
		  {
			  x = 0; y = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	81fb      	strh	r3, [r7, #14]
 80084ec:	2300      	movs	r3, #0
 80084ee:	81bb      	strh	r3, [r7, #12]
			  return 1;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e002      	b.n	80084fa <checkXY+0x7a>
		  }
		  else{return 0;}
 80084f4:	2300      	movs	r3, #0
 80084f6:	e000      	b.n	80084fa <checkXY+0x7a>
	  }
	else
		{
			return 0;
 80084f8:	2300      	movs	r3, #0
		}
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd90      	pop	{r4, r7, pc}
	...

08008504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800853c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008508:	f7ff fde0 	bl	80080cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800850c:	480c      	ldr	r0, [pc, #48]	@ (8008540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800850e:	490d      	ldr	r1, [pc, #52]	@ (8008544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008510:	4a0d      	ldr	r2, [pc, #52]	@ (8008548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008514:	e002      	b.n	800851c <LoopCopyDataInit>

08008516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800851a:	3304      	adds	r3, #4

0800851c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800851c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800851e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008520:	d3f9      	bcc.n	8008516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008522:	4a0a      	ldr	r2, [pc, #40]	@ (800854c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008524:	4c0a      	ldr	r4, [pc, #40]	@ (8008550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008528:	e001      	b.n	800852e <LoopFillZerobss>

0800852a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800852a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800852c:	3204      	adds	r2, #4

0800852e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800852e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008530:	d3fb      	bcc.n	800852a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008532:	f005 fa71 	bl	800da18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008536:	f7fe f9d3 	bl	80068e0 <main>
  bx  lr    
 800853a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800853c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008544:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8008548:	080624fc 	.word	0x080624fc
  ldr r2, =_sbss
 800854c:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8008550:	20001798 	.word	0x20001798

08008554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008554:	e7fe      	b.n	8008554 <ADC_IRQHandler>
	...

08008558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800855c:	4b0e      	ldr	r3, [pc, #56]	@ (8008598 <HAL_Init+0x40>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a0d      	ldr	r2, [pc, #52]	@ (8008598 <HAL_Init+0x40>)
 8008562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008568:	4b0b      	ldr	r3, [pc, #44]	@ (8008598 <HAL_Init+0x40>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a0a      	ldr	r2, [pc, #40]	@ (8008598 <HAL_Init+0x40>)
 800856e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008574:	4b08      	ldr	r3, [pc, #32]	@ (8008598 <HAL_Init+0x40>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a07      	ldr	r2, [pc, #28]	@ (8008598 <HAL_Init+0x40>)
 800857a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800857e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008580:	2003      	movs	r0, #3
 8008582:	f000 f94f 	bl	8008824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008586:	200f      	movs	r0, #15
 8008588:	f000 f808 	bl	800859c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800858c:	f7ff fa66 	bl	8007a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	40023c00 	.word	0x40023c00

0800859c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80085a4:	4b12      	ldr	r3, [pc, #72]	@ (80085f0 <HAL_InitTick+0x54>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	4b12      	ldr	r3, [pc, #72]	@ (80085f4 <HAL_InitTick+0x58>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4619      	mov	r1, r3
 80085ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80085b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80085b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f967 	bl	800888e <HAL_SYSTICK_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e00e      	b.n	80085e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b0f      	cmp	r3, #15
 80085ce:	d80a      	bhi.n	80085e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085d0:	2200      	movs	r2, #0
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	f000 f92f 	bl	800883a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80085dc:	4a06      	ldr	r2, [pc, #24]	@ (80085f8 <HAL_InitTick+0x5c>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e000      	b.n	80085e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20000060 	.word	0x20000060
 80085f4:	20000068 	.word	0x20000068
 80085f8:	20000064 	.word	0x20000064

080085fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008600:	4b06      	ldr	r3, [pc, #24]	@ (800861c <HAL_IncTick+0x20>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <HAL_IncTick+0x24>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4413      	add	r3, r2
 800860c:	4a04      	ldr	r2, [pc, #16]	@ (8008620 <HAL_IncTick+0x24>)
 800860e:	6013      	str	r3, [r2, #0]
}
 8008610:	bf00      	nop
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	20000068 	.word	0x20000068
 8008620:	20001648 	.word	0x20001648

08008624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  return uwTick;
 8008628:	4b03      	ldr	r3, [pc, #12]	@ (8008638 <HAL_GetTick+0x14>)
 800862a:	681b      	ldr	r3, [r3, #0]
}
 800862c:	4618      	mov	r0, r3
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20001648 	.word	0x20001648

0800863c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008644:	f7ff ffee 	bl	8008624 <HAL_GetTick>
 8008648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d005      	beq.n	8008662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008656:	4b0a      	ldr	r3, [pc, #40]	@ (8008680 <HAL_Delay+0x44>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008662:	bf00      	nop
 8008664:	f7ff ffde 	bl	8008624 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	429a      	cmp	r2, r3
 8008672:	d8f7      	bhi.n	8008664 <HAL_Delay+0x28>
  {
  }
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000068 	.word	0x20000068

08008684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008694:	4b0c      	ldr	r3, [pc, #48]	@ (80086c8 <__NVIC_SetPriorityGrouping+0x44>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80086a0:	4013      	ands	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80086b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086b6:	4a04      	ldr	r2, [pc, #16]	@ (80086c8 <__NVIC_SetPriorityGrouping+0x44>)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	60d3      	str	r3, [r2, #12]
}
 80086bc:	bf00      	nop
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	e000ed00 	.word	0xe000ed00

080086cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086d0:	4b04      	ldr	r3, [pc, #16]	@ (80086e4 <__NVIC_GetPriorityGrouping+0x18>)
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	0a1b      	lsrs	r3, r3, #8
 80086d6:	f003 0307 	and.w	r3, r3, #7
}
 80086da:	4618      	mov	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	e000ed00 	.word	0xe000ed00

080086e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	db0b      	blt.n	8008712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	f003 021f 	and.w	r2, r3, #31
 8008700:	4907      	ldr	r1, [pc, #28]	@ (8008720 <__NVIC_EnableIRQ+0x38>)
 8008702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008706:	095b      	lsrs	r3, r3, #5
 8008708:	2001      	movs	r0, #1
 800870a:	fa00 f202 	lsl.w	r2, r0, r2
 800870e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	e000e100 	.word	0xe000e100

08008724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	6039      	str	r1, [r7, #0]
 800872e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008734:	2b00      	cmp	r3, #0
 8008736:	db0a      	blt.n	800874e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	490c      	ldr	r1, [pc, #48]	@ (8008770 <__NVIC_SetPriority+0x4c>)
 800873e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008742:	0112      	lsls	r2, r2, #4
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	440b      	add	r3, r1
 8008748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800874c:	e00a      	b.n	8008764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	4908      	ldr	r1, [pc, #32]	@ (8008774 <__NVIC_SetPriority+0x50>)
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	f003 030f 	and.w	r3, r3, #15
 800875a:	3b04      	subs	r3, #4
 800875c:	0112      	lsls	r2, r2, #4
 800875e:	b2d2      	uxtb	r2, r2
 8008760:	440b      	add	r3, r1
 8008762:	761a      	strb	r2, [r3, #24]
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	e000e100 	.word	0xe000e100
 8008774:	e000ed00 	.word	0xe000ed00

08008778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008778:	b480      	push	{r7}
 800877a:	b089      	sub	sp, #36	@ 0x24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	f1c3 0307 	rsb	r3, r3, #7
 8008792:	2b04      	cmp	r3, #4
 8008794:	bf28      	it	cs
 8008796:	2304      	movcs	r3, #4
 8008798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	3304      	adds	r3, #4
 800879e:	2b06      	cmp	r3, #6
 80087a0:	d902      	bls.n	80087a8 <NVIC_EncodePriority+0x30>
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	3b03      	subs	r3, #3
 80087a6:	e000      	b.n	80087aa <NVIC_EncodePriority+0x32>
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087ac:	f04f 32ff 	mov.w	r2, #4294967295
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	fa02 f303 	lsl.w	r3, r2, r3
 80087b6:	43da      	mvns	r2, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	401a      	ands	r2, r3
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087c0:	f04f 31ff 	mov.w	r1, #4294967295
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	fa01 f303 	lsl.w	r3, r1, r3
 80087ca:	43d9      	mvns	r1, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087d0:	4313      	orrs	r3, r2
         );
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3724      	adds	r7, #36	@ 0x24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087f0:	d301      	bcc.n	80087f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80087f2:	2301      	movs	r3, #1
 80087f4:	e00f      	b.n	8008816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80087f6:	4a0a      	ldr	r2, [pc, #40]	@ (8008820 <SysTick_Config+0x40>)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087fe:	210f      	movs	r1, #15
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	f7ff ff8e 	bl	8008724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008808:	4b05      	ldr	r3, [pc, #20]	@ (8008820 <SysTick_Config+0x40>)
 800880a:	2200      	movs	r2, #0
 800880c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800880e:	4b04      	ldr	r3, [pc, #16]	@ (8008820 <SysTick_Config+0x40>)
 8008810:	2207      	movs	r2, #7
 8008812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	e000e010 	.word	0xe000e010

08008824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ff29 	bl	8008684 <__NVIC_SetPriorityGrouping>
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af00      	add	r7, sp, #0
 8008840:	4603      	mov	r3, r0
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	607a      	str	r2, [r7, #4]
 8008846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008848:	2300      	movs	r3, #0
 800884a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800884c:	f7ff ff3e 	bl	80086cc <__NVIC_GetPriorityGrouping>
 8008850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	6978      	ldr	r0, [r7, #20]
 8008858:	f7ff ff8e 	bl	8008778 <NVIC_EncodePriority>
 800885c:	4602      	mov	r2, r0
 800885e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008862:	4611      	mov	r1, r2
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff ff5d 	bl	8008724 <__NVIC_SetPriority>
}
 800886a:	bf00      	nop
 800886c:	3718      	adds	r7, #24
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	4603      	mov	r3, r0
 800887a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800887c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff ff31 	bl	80086e8 <__NVIC_EnableIRQ>
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff ffa2 	bl	80087e0 <SysTick_Config>
 800889c:	4603      	mov	r3, r0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80088b4:	f7ff feb6 	bl	8008624 <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e099      	b.n	80089f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0201 	bic.w	r2, r2, #1
 80088e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088e4:	e00f      	b.n	8008906 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80088e6:	f7ff fe9d 	bl	8008624 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	2b05      	cmp	r3, #5
 80088f2:	d908      	bls.n	8008906 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2203      	movs	r2, #3
 80088fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e078      	b.n	80089f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e8      	bne.n	80088e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4b38      	ldr	r3, [pc, #224]	@ (8008a00 <HAL_DMA_Init+0x158>)
 8008920:	4013      	ands	r3, r2
 8008922:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008932:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800893e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800894a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	2b04      	cmp	r3, #4
 800895e:	d107      	bne.n	8008970 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008968:	4313      	orrs	r3, r2
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f023 0307 	bic.w	r3, r3, #7
 8008986:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008996:	2b04      	cmp	r3, #4
 8008998:	d117      	bne.n	80089ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fa7b 	bl	8008ea8 <DMA_CheckFifoParam>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2240      	movs	r2, #64	@ 0x40
 80089bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80089c6:	2301      	movs	r3, #1
 80089c8:	e016      	b.n	80089f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa32 	bl	8008e3c <DMA_CalcBaseAndBitshift>
 80089d8:	4603      	mov	r3, r0
 80089da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089e0:	223f      	movs	r2, #63	@ 0x3f
 80089e2:	409a      	lsls	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	f010803f 	.word	0xf010803f

08008a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008a12:	f7ff fe07 	bl	8008624 <HAL_GetTick>
 8008a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d008      	beq.n	8008a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2280      	movs	r2, #128	@ 0x80
 8008a28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e052      	b.n	8008adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 0216 	bic.w	r2, r2, #22
 8008a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	695a      	ldr	r2, [r3, #20]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <HAL_DMA_Abort+0x62>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0208 	bic.w	r2, r2, #8
 8008a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0201 	bic.w	r2, r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a86:	e013      	b.n	8008ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a88:	f7ff fdcc 	bl	8008624 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d90c      	bls.n	8008ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e015      	b.n	8008adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e4      	bne.n	8008a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ac2:	223f      	movs	r2, #63	@ 0x3f
 8008ac4:	409a      	lsls	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d004      	beq.n	8008b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2280      	movs	r2, #128	@ 0x80
 8008afc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e00c      	b.n	8008b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2205      	movs	r2, #5
 8008b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0201 	bic.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b34:	4b8e      	ldr	r3, [pc, #568]	@ (8008d70 <HAL_DMA_IRQHandler+0x248>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a8e      	ldr	r2, [pc, #568]	@ (8008d74 <HAL_DMA_IRQHandler+0x24c>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	0a9b      	lsrs	r3, r3, #10
 8008b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b52:	2208      	movs	r2, #8
 8008b54:	409a      	lsls	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d01a      	beq.n	8008b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d013      	beq.n	8008b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0204 	bic.w	r2, r2, #4
 8008b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b80:	2208      	movs	r2, #8
 8008b82:	409a      	lsls	r2, r3
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b8c:	f043 0201 	orr.w	r2, r3, #1
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b98:	2201      	movs	r2, #1
 8008b9a:	409a      	lsls	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d012      	beq.n	8008bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	409a      	lsls	r2, r3
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc2:	f043 0202 	orr.w	r2, r3, #2
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bce:	2204      	movs	r2, #4
 8008bd0:	409a      	lsls	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d012      	beq.n	8008c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bec:	2204      	movs	r2, #4
 8008bee:	409a      	lsls	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf8:	f043 0204 	orr.w	r2, r3, #4
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c04:	2210      	movs	r2, #16
 8008c06:	409a      	lsls	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d043      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d03c      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c22:	2210      	movs	r2, #16
 8008c24:	409a      	lsls	r2, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d018      	beq.n	8008c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d108      	bne.n	8008c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d024      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	4798      	blx	r3
 8008c56:	e01f      	b.n	8008c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01b      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4798      	blx	r3
 8008c68:	e016      	b.n	8008c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d107      	bne.n	8008c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0208 	bic.w	r2, r2, #8
 8008c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	409a      	lsls	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 808f 	beq.w	8008dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0310 	and.w	r3, r3, #16
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8087 	beq.w	8008dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	409a      	lsls	r2, r3
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d136      	bne.n	8008d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0216 	bic.w	r2, r2, #22
 8008ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	695a      	ldr	r2, [r3, #20]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d103      	bne.n	8008d02 <HAL_DMA_IRQHandler+0x1da>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f022 0208 	bic.w	r2, r2, #8
 8008d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d16:	223f      	movs	r2, #63	@ 0x3f
 8008d18:	409a      	lsls	r2, r3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d07e      	beq.n	8008e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
        }
        return;
 8008d3e:	e079      	b.n	8008e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01d      	beq.n	8008d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10d      	bne.n	8008d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d031      	beq.n	8008dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
 8008d6c:	e02c      	b.n	8008dc8 <HAL_DMA_IRQHandler+0x2a0>
 8008d6e:	bf00      	nop
 8008d70:	20000060 	.word	0x20000060
 8008d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d023      	beq.n	8008dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
 8008d88:	e01e      	b.n	8008dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10f      	bne.n	8008db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 0210 	bic.w	r2, r2, #16
 8008da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d032      	beq.n	8008e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d022      	beq.n	8008e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2205      	movs	r2, #5
 8008de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 0201 	bic.w	r2, r2, #1
 8008df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3301      	adds	r3, #1
 8008df8:	60bb      	str	r3, [r7, #8]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d307      	bcc.n	8008e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1f2      	bne.n	8008df4 <HAL_DMA_IRQHandler+0x2cc>
 8008e0e:	e000      	b.n	8008e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d005      	beq.n	8008e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
 8008e32:	e000      	b.n	8008e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008e34:	bf00      	nop
    }
  }
}
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	3b10      	subs	r3, #16
 8008e4c:	4a14      	ldr	r2, [pc, #80]	@ (8008ea0 <DMA_CalcBaseAndBitshift+0x64>)
 8008e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e52:	091b      	lsrs	r3, r3, #4
 8008e54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008e56:	4a13      	ldr	r2, [pc, #76]	@ (8008ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d909      	bls.n	8008e7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008e72:	f023 0303 	bic.w	r3, r3, #3
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8008e7c:	e007      	b.n	8008e8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008e86:	f023 0303 	bic.w	r3, r3, #3
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	aaaaaaab 	.word	0xaaaaaaab
 8008ea4:	0806210c 	.word	0x0806210c

08008ea8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d11f      	bne.n	8008f02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d856      	bhi.n	8008f76 <DMA_CheckFifoParam+0xce>
 8008ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed0 <DMA_CheckFifoParam+0x28>)
 8008eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ece:	bf00      	nop
 8008ed0:	08008ee1 	.word	0x08008ee1
 8008ed4:	08008ef3 	.word	0x08008ef3
 8008ed8:	08008ee1 	.word	0x08008ee1
 8008edc:	08008f77 	.word	0x08008f77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d046      	beq.n	8008f7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ef0:	e043      	b.n	8008f7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008efa:	d140      	bne.n	8008f7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f00:	e03d      	b.n	8008f7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f0a:	d121      	bne.n	8008f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d837      	bhi.n	8008f82 <DMA_CheckFifoParam+0xda>
 8008f12:	a201      	add	r2, pc, #4	@ (adr r2, 8008f18 <DMA_CheckFifoParam+0x70>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008f29 	.word	0x08008f29
 8008f1c:	08008f2f 	.word	0x08008f2f
 8008f20:	08008f29 	.word	0x08008f29
 8008f24:	08008f41 	.word	0x08008f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2c:	e030      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d025      	beq.n	8008f86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f3e:	e022      	b.n	8008f86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008f48:	d11f      	bne.n	8008f8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008f4e:	e01c      	b.n	8008f8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d903      	bls.n	8008f5e <DMA_CheckFifoParam+0xb6>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d003      	beq.n	8008f64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008f5c:	e018      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	73fb      	strb	r3, [r7, #15]
      break;
 8008f62:	e015      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00e      	beq.n	8008f8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	73fb      	strb	r3, [r7, #15]
      break;
 8008f74:	e00b      	b.n	8008f8e <DMA_CheckFifoParam+0xe6>
      break;
 8008f76:	bf00      	nop
 8008f78:	e00a      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
      break;
 8008f7a:	bf00      	nop
 8008f7c:	e008      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
      break;
 8008f7e:	bf00      	nop
 8008f80:	e006      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
      break;
 8008f82:	bf00      	nop
 8008f84:	e004      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
      break;
 8008f86:	bf00      	nop
 8008f88:	e002      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
      break;   
 8008f8a:	bf00      	nop
 8008f8c:	e000      	b.n	8008f90 <DMA_CheckFifoParam+0xe8>
      break;
 8008f8e:	bf00      	nop
    }
  } 
  
  return status; 
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop

08008fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b089      	sub	sp, #36	@ 0x24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61fb      	str	r3, [r7, #28]
 8008fba:	e16b      	b.n	8009294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	f040 815a 	bne.w	800928e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d005      	beq.n	8008ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d130      	bne.n	8009054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8009002:	43db      	mvns	r3, r3
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	4013      	ands	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	fa02 f303 	lsl.w	r3, r2, r3
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	4313      	orrs	r3, r2
 800901a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009028:	2201      	movs	r2, #1
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	fa02 f303 	lsl.w	r3, r2, r3
 8009030:	43db      	mvns	r3, r3
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	4013      	ands	r3, r2
 8009036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	091b      	lsrs	r3, r3, #4
 800903e:	f003 0201 	and.w	r2, r3, #1
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	fa02 f303 	lsl.w	r3, r2, r3
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	4313      	orrs	r3, r2
 800904c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	2b03      	cmp	r3, #3
 800905e:	d017      	beq.n	8009090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	2203      	movs	r2, #3
 800906c:	fa02 f303 	lsl.w	r3, r2, r3
 8009070:	43db      	mvns	r3, r3
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	4013      	ands	r3, r2
 8009076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	4313      	orrs	r3, r2
 8009088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f003 0303 	and.w	r3, r3, #3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d123      	bne.n	80090e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	08da      	lsrs	r2, r3, #3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3208      	adds	r2, #8
 80090a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	220f      	movs	r2, #15
 80090b4:	fa02 f303 	lsl.w	r3, r2, r3
 80090b8:	43db      	mvns	r3, r3
 80090ba:	69ba      	ldr	r2, [r7, #24]
 80090bc:	4013      	ands	r3, r2
 80090be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	08da      	lsrs	r2, r3, #3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3208      	adds	r2, #8
 80090de:	69b9      	ldr	r1, [r7, #24]
 80090e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	2203      	movs	r2, #3
 80090f0:	fa02 f303 	lsl.w	r3, r2, r3
 80090f4:	43db      	mvns	r3, r3
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	4013      	ands	r3, r2
 80090fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f003 0203 	and.w	r2, r3, #3
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	4313      	orrs	r3, r2
 8009110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 80b4 	beq.w	800928e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
 800912a:	4b60      	ldr	r3, [pc, #384]	@ (80092ac <HAL_GPIO_Init+0x30c>)
 800912c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800912e:	4a5f      	ldr	r2, [pc, #380]	@ (80092ac <HAL_GPIO_Init+0x30c>)
 8009130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009134:	6453      	str	r3, [r2, #68]	@ 0x44
 8009136:	4b5d      	ldr	r3, [pc, #372]	@ (80092ac <HAL_GPIO_Init+0x30c>)
 8009138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800913a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009142:	4a5b      	ldr	r2, [pc, #364]	@ (80092b0 <HAL_GPIO_Init+0x310>)
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	089b      	lsrs	r3, r3, #2
 8009148:	3302      	adds	r3, #2
 800914a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800914e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	220f      	movs	r2, #15
 800915a:	fa02 f303 	lsl.w	r3, r2, r3
 800915e:	43db      	mvns	r3, r3
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	4013      	ands	r3, r2
 8009164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a52      	ldr	r2, [pc, #328]	@ (80092b4 <HAL_GPIO_Init+0x314>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d02b      	beq.n	80091c6 <HAL_GPIO_Init+0x226>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a51      	ldr	r2, [pc, #324]	@ (80092b8 <HAL_GPIO_Init+0x318>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d025      	beq.n	80091c2 <HAL_GPIO_Init+0x222>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a50      	ldr	r2, [pc, #320]	@ (80092bc <HAL_GPIO_Init+0x31c>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d01f      	beq.n	80091be <HAL_GPIO_Init+0x21e>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a4f      	ldr	r2, [pc, #316]	@ (80092c0 <HAL_GPIO_Init+0x320>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d019      	beq.n	80091ba <HAL_GPIO_Init+0x21a>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a4e      	ldr	r2, [pc, #312]	@ (80092c4 <HAL_GPIO_Init+0x324>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d013      	beq.n	80091b6 <HAL_GPIO_Init+0x216>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a4d      	ldr	r2, [pc, #308]	@ (80092c8 <HAL_GPIO_Init+0x328>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d00d      	beq.n	80091b2 <HAL_GPIO_Init+0x212>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a4c      	ldr	r2, [pc, #304]	@ (80092cc <HAL_GPIO_Init+0x32c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d007      	beq.n	80091ae <HAL_GPIO_Init+0x20e>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a4b      	ldr	r2, [pc, #300]	@ (80092d0 <HAL_GPIO_Init+0x330>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d101      	bne.n	80091aa <HAL_GPIO_Init+0x20a>
 80091a6:	2307      	movs	r3, #7
 80091a8:	e00e      	b.n	80091c8 <HAL_GPIO_Init+0x228>
 80091aa:	2308      	movs	r3, #8
 80091ac:	e00c      	b.n	80091c8 <HAL_GPIO_Init+0x228>
 80091ae:	2306      	movs	r3, #6
 80091b0:	e00a      	b.n	80091c8 <HAL_GPIO_Init+0x228>
 80091b2:	2305      	movs	r3, #5
 80091b4:	e008      	b.n	80091c8 <HAL_GPIO_Init+0x228>
 80091b6:	2304      	movs	r3, #4
 80091b8:	e006      	b.n	80091c8 <HAL_GPIO_Init+0x228>
 80091ba:	2303      	movs	r3, #3
 80091bc:	e004      	b.n	80091c8 <HAL_GPIO_Init+0x228>
 80091be:	2302      	movs	r3, #2
 80091c0:	e002      	b.n	80091c8 <HAL_GPIO_Init+0x228>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e000      	b.n	80091c8 <HAL_GPIO_Init+0x228>
 80091c6:	2300      	movs	r3, #0
 80091c8:	69fa      	ldr	r2, [r7, #28]
 80091ca:	f002 0203 	and.w	r2, r2, #3
 80091ce:	0092      	lsls	r2, r2, #2
 80091d0:	4093      	lsls	r3, r2
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091d8:	4935      	ldr	r1, [pc, #212]	@ (80092b0 <HAL_GPIO_Init+0x310>)
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	089b      	lsrs	r3, r3, #2
 80091de:	3302      	adds	r3, #2
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80091e6:	4b3b      	ldr	r3, [pc, #236]	@ (80092d4 <HAL_GPIO_Init+0x334>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	43db      	mvns	r3, r3
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	4013      	ands	r3, r2
 80091f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800920a:	4a32      	ldr	r2, [pc, #200]	@ (80092d4 <HAL_GPIO_Init+0x334>)
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009210:	4b30      	ldr	r3, [pc, #192]	@ (80092d4 <HAL_GPIO_Init+0x334>)
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	43db      	mvns	r3, r3
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	4013      	ands	r3, r2
 800921e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	4313      	orrs	r3, r2
 8009232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009234:	4a27      	ldr	r2, [pc, #156]	@ (80092d4 <HAL_GPIO_Init+0x334>)
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800923a:	4b26      	ldr	r3, [pc, #152]	@ (80092d4 <HAL_GPIO_Init+0x334>)
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	43db      	mvns	r3, r3
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	4013      	ands	r3, r2
 8009248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800925e:	4a1d      	ldr	r2, [pc, #116]	@ (80092d4 <HAL_GPIO_Init+0x334>)
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009264:	4b1b      	ldr	r3, [pc, #108]	@ (80092d4 <HAL_GPIO_Init+0x334>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	43db      	mvns	r3, r3
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	4013      	ands	r3, r2
 8009272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	4313      	orrs	r3, r2
 8009286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009288:	4a12      	ldr	r2, [pc, #72]	@ (80092d4 <HAL_GPIO_Init+0x334>)
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	3301      	adds	r3, #1
 8009292:	61fb      	str	r3, [r7, #28]
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	2b0f      	cmp	r3, #15
 8009298:	f67f ae90 	bls.w	8008fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3724      	adds	r7, #36	@ 0x24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	40023800 	.word	0x40023800
 80092b0:	40013800 	.word	0x40013800
 80092b4:	40020000 	.word	0x40020000
 80092b8:	40020400 	.word	0x40020400
 80092bc:	40020800 	.word	0x40020800
 80092c0:	40020c00 	.word	0x40020c00
 80092c4:	40021000 	.word	0x40021000
 80092c8:	40021400 	.word	0x40021400
 80092cc:	40021800 	.word	0x40021800
 80092d0:	40021c00 	.word	0x40021c00
 80092d4:	40013c00 	.word	0x40013c00

080092d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	691a      	ldr	r2, [r3, #16]
 80092e8:	887b      	ldrh	r3, [r7, #2]
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
 80092f4:	e001      	b.n	80092fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	807b      	strh	r3, [r7, #2]
 8009314:	4613      	mov	r3, r2
 8009316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009318:	787b      	ldrb	r3, [r7, #1]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800931e:	887a      	ldrh	r2, [r7, #2]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009324:	e003      	b.n	800932e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009326:	887b      	ldrh	r3, [r7, #2]
 8009328:	041a      	lsls	r2, r3, #16
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	619a      	str	r2, [r3, #24]
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009346:	4b08      	ldr	r3, [pc, #32]	@ (8009368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009348:	695a      	ldr	r2, [r3, #20]
 800934a:	88fb      	ldrh	r3, [r7, #6]
 800934c:	4013      	ands	r3, r2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d006      	beq.n	8009360 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009352:	4a05      	ldr	r2, [pc, #20]	@ (8009368 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	4618      	mov	r0, r3
 800935c:	f7fd fe72 	bl	8007044 <HAL_GPIO_EXTI_Callback>
  }
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	40013c00 	.word	0x40013c00

0800936c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e267      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d075      	beq.n	8009476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800938a:	4b88      	ldr	r3, [pc, #544]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 030c 	and.w	r3, r3, #12
 8009392:	2b04      	cmp	r3, #4
 8009394:	d00c      	beq.n	80093b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009396:	4b85      	ldr	r3, [pc, #532]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d112      	bne.n	80093c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093a2:	4b82      	ldr	r3, [pc, #520]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093ae:	d10b      	bne.n	80093c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093b0:	4b7e      	ldr	r3, [pc, #504]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d05b      	beq.n	8009474 <HAL_RCC_OscConfig+0x108>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d157      	bne.n	8009474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e242      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093d0:	d106      	bne.n	80093e0 <HAL_RCC_OscConfig+0x74>
 80093d2:	4b76      	ldr	r3, [pc, #472]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a75      	ldr	r2, [pc, #468]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80093d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	e01d      	b.n	800941c <HAL_RCC_OscConfig+0xb0>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093e8:	d10c      	bne.n	8009404 <HAL_RCC_OscConfig+0x98>
 80093ea:	4b70      	ldr	r3, [pc, #448]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a6f      	ldr	r2, [pc, #444]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80093f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	4b6d      	ldr	r3, [pc, #436]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a6c      	ldr	r2, [pc, #432]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80093fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009400:	6013      	str	r3, [r2, #0]
 8009402:	e00b      	b.n	800941c <HAL_RCC_OscConfig+0xb0>
 8009404:	4b69      	ldr	r3, [pc, #420]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a68      	ldr	r2, [pc, #416]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 800940a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	4b66      	ldr	r3, [pc, #408]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a65      	ldr	r2, [pc, #404]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800941a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d013      	beq.n	800944c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009424:	f7ff f8fe 	bl	8008624 <HAL_GetTick>
 8009428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800942a:	e008      	b.n	800943e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800942c:	f7ff f8fa 	bl	8008624 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b64      	cmp	r3, #100	@ 0x64
 8009438:	d901      	bls.n	800943e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e207      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800943e:	4b5b      	ldr	r3, [pc, #364]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0f0      	beq.n	800942c <HAL_RCC_OscConfig+0xc0>
 800944a:	e014      	b.n	8009476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800944c:	f7ff f8ea 	bl	8008624 <HAL_GetTick>
 8009450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009454:	f7ff f8e6 	bl	8008624 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b64      	cmp	r3, #100	@ 0x64
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e1f3      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009466:	4b51      	ldr	r3, [pc, #324]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f0      	bne.n	8009454 <HAL_RCC_OscConfig+0xe8>
 8009472:	e000      	b.n	8009476 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b00      	cmp	r3, #0
 8009480:	d063      	beq.n	800954a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009482:	4b4a      	ldr	r3, [pc, #296]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f003 030c 	and.w	r3, r3, #12
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00b      	beq.n	80094a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800948e:	4b47      	ldr	r3, [pc, #284]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009496:	2b08      	cmp	r3, #8
 8009498:	d11c      	bne.n	80094d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800949a:	4b44      	ldr	r3, [pc, #272]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d116      	bne.n	80094d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094a6:	4b41      	ldr	r3, [pc, #260]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <HAL_RCC_OscConfig+0x152>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d001      	beq.n	80094be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e1c7      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094be:	4b3b      	ldr	r3, [pc, #236]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	4937      	ldr	r1, [pc, #220]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094d2:	e03a      	b.n	800954a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d020      	beq.n	800951e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094dc:	4b34      	ldr	r3, [pc, #208]	@ (80095b0 <HAL_RCC_OscConfig+0x244>)
 80094de:	2201      	movs	r2, #1
 80094e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e2:	f7ff f89f 	bl	8008624 <HAL_GetTick>
 80094e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094e8:	e008      	b.n	80094fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094ea:	f7ff f89b 	bl	8008624 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d901      	bls.n	80094fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e1a8      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094fc:	4b2b      	ldr	r3, [pc, #172]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0f0      	beq.n	80094ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009508:	4b28      	ldr	r3, [pc, #160]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	4925      	ldr	r1, [pc, #148]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009518:	4313      	orrs	r3, r2
 800951a:	600b      	str	r3, [r1, #0]
 800951c:	e015      	b.n	800954a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800951e:	4b24      	ldr	r3, [pc, #144]	@ (80095b0 <HAL_RCC_OscConfig+0x244>)
 8009520:	2200      	movs	r2, #0
 8009522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009524:	f7ff f87e 	bl	8008624 <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800952c:	f7ff f87a 	bl	8008624 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e187      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800953e:	4b1b      	ldr	r3, [pc, #108]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1f0      	bne.n	800952c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d036      	beq.n	80095c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d016      	beq.n	800958c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800955e:	4b15      	ldr	r3, [pc, #84]	@ (80095b4 <HAL_RCC_OscConfig+0x248>)
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009564:	f7ff f85e 	bl	8008624 <HAL_GetTick>
 8009568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800956a:	e008      	b.n	800957e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800956c:	f7ff f85a 	bl	8008624 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d901      	bls.n	800957e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e167      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800957e:	4b0b      	ldr	r3, [pc, #44]	@ (80095ac <HAL_RCC_OscConfig+0x240>)
 8009580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009582:	f003 0302 	and.w	r3, r3, #2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0f0      	beq.n	800956c <HAL_RCC_OscConfig+0x200>
 800958a:	e01b      	b.n	80095c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800958c:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <HAL_RCC_OscConfig+0x248>)
 800958e:	2200      	movs	r2, #0
 8009590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009592:	f7ff f847 	bl	8008624 <HAL_GetTick>
 8009596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009598:	e00e      	b.n	80095b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800959a:	f7ff f843 	bl	8008624 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d907      	bls.n	80095b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e150      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
 80095ac:	40023800 	.word	0x40023800
 80095b0:	42470000 	.word	0x42470000
 80095b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095b8:	4b88      	ldr	r3, [pc, #544]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80095ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095bc:	f003 0302 	and.w	r3, r3, #2
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1ea      	bne.n	800959a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 8097 	beq.w	8009700 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095d2:	2300      	movs	r3, #0
 80095d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095d6:	4b81      	ldr	r3, [pc, #516]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80095d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10f      	bne.n	8009602 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095e2:	2300      	movs	r3, #0
 80095e4:	60bb      	str	r3, [r7, #8]
 80095e6:	4b7d      	ldr	r3, [pc, #500]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80095e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ea:	4a7c      	ldr	r2, [pc, #496]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80095ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80095f2:	4b7a      	ldr	r3, [pc, #488]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80095f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095fa:	60bb      	str	r3, [r7, #8]
 80095fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095fe:	2301      	movs	r3, #1
 8009600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009602:	4b77      	ldr	r3, [pc, #476]	@ (80097e0 <HAL_RCC_OscConfig+0x474>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800960a:	2b00      	cmp	r3, #0
 800960c:	d118      	bne.n	8009640 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800960e:	4b74      	ldr	r3, [pc, #464]	@ (80097e0 <HAL_RCC_OscConfig+0x474>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a73      	ldr	r2, [pc, #460]	@ (80097e0 <HAL_RCC_OscConfig+0x474>)
 8009614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800961a:	f7ff f803 	bl	8008624 <HAL_GetTick>
 800961e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009620:	e008      	b.n	8009634 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009622:	f7fe ffff 	bl	8008624 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e10c      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009634:	4b6a      	ldr	r3, [pc, #424]	@ (80097e0 <HAL_RCC_OscConfig+0x474>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0f0      	beq.n	8009622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d106      	bne.n	8009656 <HAL_RCC_OscConfig+0x2ea>
 8009648:	4b64      	ldr	r3, [pc, #400]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 800964a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964c:	4a63      	ldr	r2, [pc, #396]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	6713      	str	r3, [r2, #112]	@ 0x70
 8009654:	e01c      	b.n	8009690 <HAL_RCC_OscConfig+0x324>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b05      	cmp	r3, #5
 800965c:	d10c      	bne.n	8009678 <HAL_RCC_OscConfig+0x30c>
 800965e:	4b5f      	ldr	r3, [pc, #380]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 8009660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009662:	4a5e      	ldr	r2, [pc, #376]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 8009664:	f043 0304 	orr.w	r3, r3, #4
 8009668:	6713      	str	r3, [r2, #112]	@ 0x70
 800966a:	4b5c      	ldr	r3, [pc, #368]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 800966c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800966e:	4a5b      	ldr	r2, [pc, #364]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 8009670:	f043 0301 	orr.w	r3, r3, #1
 8009674:	6713      	str	r3, [r2, #112]	@ 0x70
 8009676:	e00b      	b.n	8009690 <HAL_RCC_OscConfig+0x324>
 8009678:	4b58      	ldr	r3, [pc, #352]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 800967a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800967c:	4a57      	ldr	r2, [pc, #348]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 800967e:	f023 0301 	bic.w	r3, r3, #1
 8009682:	6713      	str	r3, [r2, #112]	@ 0x70
 8009684:	4b55      	ldr	r3, [pc, #340]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 8009686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009688:	4a54      	ldr	r2, [pc, #336]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 800968a:	f023 0304 	bic.w	r3, r3, #4
 800968e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d015      	beq.n	80096c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009698:	f7fe ffc4 	bl	8008624 <HAL_GetTick>
 800969c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800969e:	e00a      	b.n	80096b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096a0:	f7fe ffc0 	bl	8008624 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e0cb      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096b6:	4b49      	ldr	r3, [pc, #292]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80096b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0ee      	beq.n	80096a0 <HAL_RCC_OscConfig+0x334>
 80096c2:	e014      	b.n	80096ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096c4:	f7fe ffae 	bl	8008624 <HAL_GetTick>
 80096c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096ca:	e00a      	b.n	80096e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096cc:	f7fe ffaa 	bl	8008624 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096da:	4293      	cmp	r3, r2
 80096dc:	d901      	bls.n	80096e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e0b5      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096e2:	4b3e      	ldr	r3, [pc, #248]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80096e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1ee      	bne.n	80096cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d105      	bne.n	8009700 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096f4:	4b39      	ldr	r3, [pc, #228]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80096f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f8:	4a38      	ldr	r2, [pc, #224]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80096fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 80a1 	beq.w	800984c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800970a:	4b34      	ldr	r3, [pc, #208]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f003 030c 	and.w	r3, r3, #12
 8009712:	2b08      	cmp	r3, #8
 8009714:	d05c      	beq.n	80097d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d141      	bne.n	80097a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800971e:	4b31      	ldr	r3, [pc, #196]	@ (80097e4 <HAL_RCC_OscConfig+0x478>)
 8009720:	2200      	movs	r2, #0
 8009722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009724:	f7fe ff7e 	bl	8008624 <HAL_GetTick>
 8009728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800972a:	e008      	b.n	800973e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800972c:	f7fe ff7a 	bl	8008624 <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	2b02      	cmp	r3, #2
 8009738:	d901      	bls.n	800973e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e087      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800973e:	4b27      	ldr	r3, [pc, #156]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1f0      	bne.n	800972c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69da      	ldr	r2, [r3, #28]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009758:	019b      	lsls	r3, r3, #6
 800975a:	431a      	orrs	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009760:	085b      	lsrs	r3, r3, #1
 8009762:	3b01      	subs	r3, #1
 8009764:	041b      	lsls	r3, r3, #16
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	491b      	ldr	r1, [pc, #108]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 8009770:	4313      	orrs	r3, r2
 8009772:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009774:	4b1b      	ldr	r3, [pc, #108]	@ (80097e4 <HAL_RCC_OscConfig+0x478>)
 8009776:	2201      	movs	r2, #1
 8009778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800977a:	f7fe ff53 	bl	8008624 <HAL_GetTick>
 800977e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009780:	e008      	b.n	8009794 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009782:	f7fe ff4f 	bl	8008624 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	2b02      	cmp	r3, #2
 800978e:	d901      	bls.n	8009794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e05c      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009794:	4b11      	ldr	r3, [pc, #68]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0f0      	beq.n	8009782 <HAL_RCC_OscConfig+0x416>
 80097a0:	e054      	b.n	800984c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097a2:	4b10      	ldr	r3, [pc, #64]	@ (80097e4 <HAL_RCC_OscConfig+0x478>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097a8:	f7fe ff3c 	bl	8008624 <HAL_GetTick>
 80097ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097ae:	e008      	b.n	80097c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097b0:	f7fe ff38 	bl	8008624 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d901      	bls.n	80097c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e045      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097c2:	4b06      	ldr	r3, [pc, #24]	@ (80097dc <HAL_RCC_OscConfig+0x470>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f0      	bne.n	80097b0 <HAL_RCC_OscConfig+0x444>
 80097ce:	e03d      	b.n	800984c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d107      	bne.n	80097e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e038      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
 80097dc:	40023800 	.word	0x40023800
 80097e0:	40007000 	.word	0x40007000
 80097e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80097e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009858 <HAL_RCC_OscConfig+0x4ec>)
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d028      	beq.n	8009848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009800:	429a      	cmp	r2, r3
 8009802:	d121      	bne.n	8009848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800980e:	429a      	cmp	r2, r3
 8009810:	d11a      	bne.n	8009848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009818:	4013      	ands	r3, r2
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800981e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009820:	4293      	cmp	r3, r2
 8009822:	d111      	bne.n	8009848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	3b01      	subs	r3, #1
 8009832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009834:	429a      	cmp	r2, r3
 8009836:	d107      	bne.n	8009848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009844:	429a      	cmp	r2, r3
 8009846:	d001      	beq.n	800984c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e000      	b.n	800984e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	40023800 	.word	0x40023800

0800985c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e0cc      	b.n	8009a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009870:	4b68      	ldr	r3, [pc, #416]	@ (8009a14 <HAL_RCC_ClockConfig+0x1b8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0307 	and.w	r3, r3, #7
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d90c      	bls.n	8009898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800987e:	4b65      	ldr	r3, [pc, #404]	@ (8009a14 <HAL_RCC_ClockConfig+0x1b8>)
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009886:	4b63      	ldr	r3, [pc, #396]	@ (8009a14 <HAL_RCC_ClockConfig+0x1b8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0307 	and.w	r3, r3, #7
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d001      	beq.n	8009898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e0b8      	b.n	8009a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d020      	beq.n	80098e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d005      	beq.n	80098bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098b0:	4b59      	ldr	r3, [pc, #356]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	4a58      	ldr	r2, [pc, #352]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80098b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80098ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0308 	and.w	r3, r3, #8
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d005      	beq.n	80098d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80098c8:	4b53      	ldr	r3, [pc, #332]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	4a52      	ldr	r2, [pc, #328]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80098ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80098d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098d4:	4b50      	ldr	r3, [pc, #320]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	494d      	ldr	r1, [pc, #308]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d044      	beq.n	800997c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d107      	bne.n	800990a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098fa:	4b47      	ldr	r3, [pc, #284]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d119      	bne.n	800993a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e07f      	b.n	8009a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2b02      	cmp	r3, #2
 8009910:	d003      	beq.n	800991a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009916:	2b03      	cmp	r3, #3
 8009918:	d107      	bne.n	800992a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800991a:	4b3f      	ldr	r3, [pc, #252]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d109      	bne.n	800993a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e06f      	b.n	8009a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800992a:	4b3b      	ldr	r3, [pc, #236]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e067      	b.n	8009a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800993a:	4b37      	ldr	r3, [pc, #220]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f023 0203 	bic.w	r2, r3, #3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	4934      	ldr	r1, [pc, #208]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 8009948:	4313      	orrs	r3, r2
 800994a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800994c:	f7fe fe6a 	bl	8008624 <HAL_GetTick>
 8009950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009952:	e00a      	b.n	800996a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009954:	f7fe fe66 	bl	8008624 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009962:	4293      	cmp	r3, r2
 8009964:	d901      	bls.n	800996a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	e04f      	b.n	8009a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800996a:	4b2b      	ldr	r3, [pc, #172]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f003 020c 	and.w	r2, r3, #12
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	429a      	cmp	r2, r3
 800997a:	d1eb      	bne.n	8009954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800997c:	4b25      	ldr	r3, [pc, #148]	@ (8009a14 <HAL_RCC_ClockConfig+0x1b8>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d20c      	bcs.n	80099a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800998a:	4b22      	ldr	r3, [pc, #136]	@ (8009a14 <HAL_RCC_ClockConfig+0x1b8>)
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009992:	4b20      	ldr	r3, [pc, #128]	@ (8009a14 <HAL_RCC_ClockConfig+0x1b8>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	429a      	cmp	r2, r3
 800999e:	d001      	beq.n	80099a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e032      	b.n	8009a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d008      	beq.n	80099c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099b0:	4b19      	ldr	r3, [pc, #100]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	4916      	ldr	r1, [pc, #88]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0308 	and.w	r3, r3, #8
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d009      	beq.n	80099e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099ce:	4b12      	ldr	r3, [pc, #72]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	490e      	ldr	r1, [pc, #56]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80099e2:	f000 f821 	bl	8009a28 <HAL_RCC_GetSysClockFreq>
 80099e6:	4602      	mov	r2, r0
 80099e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009a18 <HAL_RCC_ClockConfig+0x1bc>)
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	091b      	lsrs	r3, r3, #4
 80099ee:	f003 030f 	and.w	r3, r3, #15
 80099f2:	490a      	ldr	r1, [pc, #40]	@ (8009a1c <HAL_RCC_ClockConfig+0x1c0>)
 80099f4:	5ccb      	ldrb	r3, [r1, r3]
 80099f6:	fa22 f303 	lsr.w	r3, r2, r3
 80099fa:	4a09      	ldr	r2, [pc, #36]	@ (8009a20 <HAL_RCC_ClockConfig+0x1c4>)
 80099fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80099fe:	4b09      	ldr	r3, [pc, #36]	@ (8009a24 <HAL_RCC_ClockConfig+0x1c8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fdca 	bl	800859c <HAL_InitTick>

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	40023c00 	.word	0x40023c00
 8009a18:	40023800 	.word	0x40023800
 8009a1c:	080144a8 	.word	0x080144a8
 8009a20:	20000060 	.word	0x20000060
 8009a24:	20000064 	.word	0x20000064

08009a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a2c:	b090      	sub	sp, #64	@ 0x40
 8009a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a40:	4b59      	ldr	r3, [pc, #356]	@ (8009ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 030c 	and.w	r3, r3, #12
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d00d      	beq.n	8009a68 <HAL_RCC_GetSysClockFreq+0x40>
 8009a4c:	2b08      	cmp	r3, #8
 8009a4e:	f200 80a1 	bhi.w	8009b94 <HAL_RCC_GetSysClockFreq+0x16c>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <HAL_RCC_GetSysClockFreq+0x34>
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	d003      	beq.n	8009a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8009a5a:	e09b      	b.n	8009b94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a5c:	4b53      	ldr	r3, [pc, #332]	@ (8009bac <HAL_RCC_GetSysClockFreq+0x184>)
 8009a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009a60:	e09b      	b.n	8009b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a62:	4b53      	ldr	r3, [pc, #332]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009a64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009a66:	e098      	b.n	8009b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a68:	4b4f      	ldr	r3, [pc, #316]	@ (8009ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a72:	4b4d      	ldr	r3, [pc, #308]	@ (8009ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d028      	beq.n	8009ad0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8009ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	099b      	lsrs	r3, r3, #6
 8009a84:	2200      	movs	r2, #0
 8009a86:	623b      	str	r3, [r7, #32]
 8009a88:	627a      	str	r2, [r7, #36]	@ 0x24
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009a90:	2100      	movs	r1, #0
 8009a92:	4b47      	ldr	r3, [pc, #284]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009a94:	fb03 f201 	mul.w	r2, r3, r1
 8009a98:	2300      	movs	r3, #0
 8009a9a:	fb00 f303 	mul.w	r3, r0, r3
 8009a9e:	4413      	add	r3, r2
 8009aa0:	4a43      	ldr	r2, [pc, #268]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009aa2:	fba0 1202 	umull	r1, r2, r0, r2
 8009aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aa8:	460a      	mov	r2, r1
 8009aaa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009aac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aae:	4413      	add	r3, r2
 8009ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	61bb      	str	r3, [r7, #24]
 8009ab8:	61fa      	str	r2, [r7, #28]
 8009aba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009abe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009ac2:	f7f7 f8cb 	bl	8000c5c <__aeabi_uldivmod>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4613      	mov	r3, r2
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ace:	e053      	b.n	8009b78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ad0:	4b35      	ldr	r3, [pc, #212]	@ (8009ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	099b      	lsrs	r3, r3, #6
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	613b      	str	r3, [r7, #16]
 8009ada:	617a      	str	r2, [r7, #20]
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009ae2:	f04f 0b00 	mov.w	fp, #0
 8009ae6:	4652      	mov	r2, sl
 8009ae8:	465b      	mov	r3, fp
 8009aea:	f04f 0000 	mov.w	r0, #0
 8009aee:	f04f 0100 	mov.w	r1, #0
 8009af2:	0159      	lsls	r1, r3, #5
 8009af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009af8:	0150      	lsls	r0, r2, #5
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	ebb2 080a 	subs.w	r8, r2, sl
 8009b02:	eb63 090b 	sbc.w	r9, r3, fp
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	f04f 0300 	mov.w	r3, #0
 8009b0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009b12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009b16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009b1a:	ebb2 0408 	subs.w	r4, r2, r8
 8009b1e:	eb63 0509 	sbc.w	r5, r3, r9
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	f04f 0300 	mov.w	r3, #0
 8009b2a:	00eb      	lsls	r3, r5, #3
 8009b2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b30:	00e2      	lsls	r2, r4, #3
 8009b32:	4614      	mov	r4, r2
 8009b34:	461d      	mov	r5, r3
 8009b36:	eb14 030a 	adds.w	r3, r4, sl
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	eb45 030b 	adc.w	r3, r5, fp
 8009b40:	607b      	str	r3, [r7, #4]
 8009b42:	f04f 0200 	mov.w	r2, #0
 8009b46:	f04f 0300 	mov.w	r3, #0
 8009b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009b4e:	4629      	mov	r1, r5
 8009b50:	028b      	lsls	r3, r1, #10
 8009b52:	4621      	mov	r1, r4
 8009b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009b58:	4621      	mov	r1, r4
 8009b5a:	028a      	lsls	r2, r1, #10
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b62:	2200      	movs	r2, #0
 8009b64:	60bb      	str	r3, [r7, #8]
 8009b66:	60fa      	str	r2, [r7, #12]
 8009b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b6c:	f7f7 f876 	bl	8000c5c <__aeabi_uldivmod>
 8009b70:	4602      	mov	r2, r0
 8009b72:	460b      	mov	r3, r1
 8009b74:	4613      	mov	r3, r2
 8009b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009b78:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	0c1b      	lsrs	r3, r3, #16
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	3301      	adds	r3, #1
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009b88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009b92:	e002      	b.n	8009b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b94:	4b05      	ldr	r3, [pc, #20]	@ (8009bac <HAL_RCC_GetSysClockFreq+0x184>)
 8009b96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3740      	adds	r7, #64	@ 0x40
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40023800 	.word	0x40023800
 8009bac:	00f42400 	.word	0x00f42400
 8009bb0:	017d7840 	.word	0x017d7840

08009bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bb8:	4b03      	ldr	r3, [pc, #12]	@ (8009bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009bba:	681b      	ldr	r3, [r3, #0]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	20000060 	.word	0x20000060

08009bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009bd0:	f7ff fff0 	bl	8009bb4 <HAL_RCC_GetHCLKFreq>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	0a9b      	lsrs	r3, r3, #10
 8009bdc:	f003 0307 	and.w	r3, r3, #7
 8009be0:	4903      	ldr	r1, [pc, #12]	@ (8009bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009be2:	5ccb      	ldrb	r3, [r1, r3]
 8009be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	40023800 	.word	0x40023800
 8009bf0:	080144b8 	.word	0x080144b8

08009bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009bf8:	f7ff ffdc 	bl	8009bb4 <HAL_RCC_GetHCLKFreq>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	4b05      	ldr	r3, [pc, #20]	@ (8009c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	0b5b      	lsrs	r3, r3, #13
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	4903      	ldr	r1, [pc, #12]	@ (8009c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c0a:	5ccb      	ldrb	r3, [r1, r3]
 8009c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	40023800 	.word	0x40023800
 8009c18:	080144b8 	.word	0x080144b8

08009c1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d105      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d035      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009c44:	4b62      	ldr	r3, [pc, #392]	@ (8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c4a:	f7fe fceb 	bl	8008624 <HAL_GetTick>
 8009c4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c50:	e008      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c52:	f7fe fce7 	bl	8008624 <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d901      	bls.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e0b0      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c64:	4b5b      	ldr	r3, [pc, #364]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1f0      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	019a      	lsls	r2, r3, #6
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	071b      	lsls	r3, r3, #28
 8009c7c:	4955      	ldr	r1, [pc, #340]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009c84:	4b52      	ldr	r3, [pc, #328]	@ (8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009c86:	2201      	movs	r2, #1
 8009c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c8a:	f7fe fccb 	bl	8008624 <HAL_GetTick>
 8009c8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c90:	e008      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c92:	f7fe fcc7 	bl	8008624 <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d901      	bls.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e090      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0f0      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 8083 	beq.w	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	4b44      	ldr	r3, [pc, #272]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc6:	4a43      	ldr	r2, [pc, #268]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8009cce:	4b41      	ldr	r3, [pc, #260]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009cda:	4b3f      	ldr	r3, [pc, #252]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a3e      	ldr	r2, [pc, #248]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ce4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ce6:	f7fe fc9d 	bl	8008624 <HAL_GetTick>
 8009cea:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009cec:	e008      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cee:	f7fe fc99 	bl	8008624 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d901      	bls.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e062      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009d00:	4b35      	ldr	r3, [pc, #212]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0f0      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009d0c:	4b31      	ldr	r3, [pc, #196]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d14:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d02f      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d028      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d34:	4b29      	ldr	r3, [pc, #164]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009d36:	2201      	movs	r2, #1
 8009d38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009d3a:	4b28      	ldr	r3, [pc, #160]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009d40:	4a24      	ldr	r2, [pc, #144]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009d46:	4b23      	ldr	r3, [pc, #140]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d114      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009d52:	f7fe fc67 	bl	8008624 <HAL_GetTick>
 8009d56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d58:	e00a      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d5a:	f7fe fc63 	bl	8008624 <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d901      	bls.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e02a      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d70:	4b18      	ldr	r3, [pc, #96]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d74:	f003 0302 	and.w	r3, r3, #2
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0ee      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d88:	d10d      	bne.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009d8a:	4b12      	ldr	r3, [pc, #72]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d9e:	490d      	ldr	r1, [pc, #52]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	608b      	str	r3, [r1, #8]
 8009da4:	e005      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009da6:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	4a0a      	ldr	r2, [pc, #40]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009dac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009db0:	6093      	str	r3, [r2, #8]
 8009db2:	4b08      	ldr	r3, [pc, #32]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009db4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dbe:	4905      	ldr	r1, [pc, #20]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	42470068 	.word	0x42470068
 8009dd4:	40023800 	.word	0x40023800
 8009dd8:	40007000 	.word	0x40007000
 8009ddc:	42470e40 	.word	0x42470e40

08009de0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e073      	b.n	8009ede <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7f5b      	ldrb	r3, [r3, #29]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d105      	bne.n	8009e0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7fd fe50 	bl	8007aac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f003 0310 	and.w	r3, r3, #16
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	d055      	beq.n	8009ecc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	22ca      	movs	r2, #202	@ 0xca
 8009e26:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2253      	movs	r2, #83	@ 0x53
 8009e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f99d 	bl	800a170 <RTC_EnterInitMode>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d12c      	bne.n	8009e9a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6812      	ldr	r2, [r2, #0]
 8009e4a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e52:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6899      	ldr	r1, [r3, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	431a      	orrs	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	68d2      	ldr	r2, [r2, #12]
 8009e7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6919      	ldr	r1, [r3, #16]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	041a      	lsls	r2, r3, #16
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f9a4 	bl	800a1de <RTC_ExitInitMode>
 8009e96:	4603      	mov	r3, r0
 8009e98:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d110      	bne.n	8009ec2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009eae:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699a      	ldr	r2, [r3, #24]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	22ff      	movs	r2, #255	@ 0xff
 8009ec8:	625a      	str	r2, [r3, #36]	@ 0x24
 8009eca:	e001      	b.n	8009ed0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d102      	bne.n	8009edc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009ee6:	b590      	push	{r4, r7, lr}
 8009ee8:	b087      	sub	sp, #28
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	7f1b      	ldrb	r3, [r3, #28]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d101      	bne.n	8009f02 <HAL_RTC_SetTime+0x1c>
 8009efe:	2302      	movs	r3, #2
 8009f00:	e087      	b.n	800a012 <HAL_RTC_SetTime+0x12c>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d126      	bne.n	8009f62 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d102      	bne.n	8009f28 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2200      	movs	r2, #0
 8009f26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 f97b 	bl	800a228 <RTC_ByteToBcd2>
 8009f32:	4603      	mov	r3, r0
 8009f34:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 f974 	bl	800a228 <RTC_ByteToBcd2>
 8009f40:	4603      	mov	r3, r0
 8009f42:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009f44:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	789b      	ldrb	r3, [r3, #2]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 f96c 	bl	800a228 <RTC_ByteToBcd2>
 8009f50:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009f52:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	78db      	ldrb	r3, [r3, #3]
 8009f5a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	e018      	b.n	8009f94 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d102      	bne.n	8009f76 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2200      	movs	r2, #0
 8009f74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f82:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009f88:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	78db      	ldrb	r3, [r3, #3]
 8009f8e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f90:	4313      	orrs	r3, r2
 8009f92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	22ca      	movs	r2, #202	@ 0xca
 8009f9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2253      	movs	r2, #83	@ 0x53
 8009fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 f8e3 	bl	800a170 <RTC_EnterInitMode>
 8009faa:	4603      	mov	r3, r0
 8009fac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009fae:	7cfb      	ldrb	r3, [r7, #19]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d120      	bne.n	8009ff6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009fbe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009fc2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009fd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6899      	ldr	r1, [r3, #8]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	68da      	ldr	r2, [r3, #12]
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 f8f6 	bl	800a1de <RTC_ExitInitMode>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009ff6:	7cfb      	ldrb	r3, [r7, #19]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d102      	bne.n	800a002 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2201      	movs	r2, #1
 800a000:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	22ff      	movs	r2, #255	@ 0xff
 800a008:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	771a      	strb	r2, [r3, #28]

  return status;
 800a010:	7cfb      	ldrb	r3, [r7, #19]
}
 800a012:	4618      	mov	r0, r3
 800a014:	371c      	adds	r7, #28
 800a016:	46bd      	mov	sp, r7
 800a018:	bd90      	pop	{r4, r7, pc}

0800a01a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a01a:	b590      	push	{r4, r7, lr}
 800a01c:	b087      	sub	sp, #28
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	7f1b      	ldrb	r3, [r3, #28]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d101      	bne.n	800a036 <HAL_RTC_SetDate+0x1c>
 800a032:	2302      	movs	r3, #2
 800a034:	e071      	b.n	800a11a <HAL_RTC_SetDate+0x100>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2201      	movs	r2, #1
 800a03a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2202      	movs	r2, #2
 800a040:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10e      	bne.n	800a066 <HAL_RTC_SetDate+0x4c>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	785b      	ldrb	r3, [r3, #1]
 800a04c:	f003 0310 	and.w	r3, r3, #16
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	785b      	ldrb	r3, [r3, #1]
 800a058:	f023 0310 	bic.w	r3, r3, #16
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	330a      	adds	r3, #10
 800a060:	b2da      	uxtb	r2, r3
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d11c      	bne.n	800a0a6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	78db      	ldrb	r3, [r3, #3]
 800a070:	4618      	mov	r0, r3
 800a072:	f000 f8d9 	bl	800a228 <RTC_ByteToBcd2>
 800a076:	4603      	mov	r3, r0
 800a078:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	785b      	ldrb	r3, [r3, #1]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 f8d2 	bl	800a228 <RTC_ByteToBcd2>
 800a084:	4603      	mov	r3, r0
 800a086:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a088:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	789b      	ldrb	r3, [r3, #2]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 f8ca 	bl	800a228 <RTC_ByteToBcd2>
 800a094:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a096:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e00e      	b.n	800a0c4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	78db      	ldrb	r3, [r3, #3]
 800a0aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	785b      	ldrb	r3, [r3, #1]
 800a0b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a0b2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a0b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	22ca      	movs	r2, #202	@ 0xca
 800a0ca:	625a      	str	r2, [r3, #36]	@ 0x24
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2253      	movs	r2, #83	@ 0x53
 800a0d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f84b 	bl	800a170 <RTC_EnterInitMode>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a0de:	7cfb      	ldrb	r3, [r7, #19]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10c      	bne.n	800a0fe <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a0ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a0f2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f000 f872 	bl	800a1de <RTC_ExitInitMode>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a0fe:	7cfb      	ldrb	r3, [r7, #19]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d102      	bne.n	800a10a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2201      	movs	r2, #1
 800a108:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	22ff      	movs	r2, #255	@ 0xff
 800a110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	771a      	strb	r2, [r3, #28]

  return status;
 800a118:	7cfb      	ldrb	r3, [r7, #19]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd90      	pop	{r4, r7, pc}
	...

0800a124 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a0d      	ldr	r2, [pc, #52]	@ (800a16c <HAL_RTC_WaitForSynchro+0x48>)
 800a136:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a138:	f7fe fa74 	bl	8008624 <HAL_GetTick>
 800a13c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a13e:	e009      	b.n	800a154 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a140:	f7fe fa70 	bl	8008624 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a14e:	d901      	bls.n	800a154 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e007      	b.n	800a164 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0ee      	beq.n	800a140 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	00017f5f 	.word	0x00017f5f

0800a170 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d122      	bne.n	800a1d4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a19c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a19e:	f7fe fa41 	bl	8008624 <HAL_GetTick>
 800a1a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a1a4:	e00c      	b.n	800a1c0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1a6:	f7fe fa3d 	bl	8008624 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a1b4:	d904      	bls.n	800a1c0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2204      	movs	r2, #4
 800a1ba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d102      	bne.n	800a1d4 <RTC_EnterInitMode+0x64>
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d1e8      	bne.n	800a1a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a1f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff ff8b 	bl	800a124 <HAL_RTC_WaitForSynchro>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d004      	beq.n	800a21e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2204      	movs	r2, #4
 800a218:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a236:	e005      	b.n	800a244 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	3b0a      	subs	r3, #10
 800a242:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	2b09      	cmp	r3, #9
 800a248:	d8f6      	bhi.n	800a238 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	b2da      	uxtb	r2, r3
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	4313      	orrs	r3, r2
 800a256:	b2db      	uxtb	r3, r3
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e07b      	b.n	800a36e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d108      	bne.n	800a290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a286:	d009      	beq.n	800a29c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	61da      	str	r2, [r3, #28]
 800a28e:	e005      	b.n	800a29c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7fd fc22 	bl	8007b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a2e4:	431a      	orrs	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a316:	431a      	orrs	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a320:	ea42 0103 	orr.w	r1, r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a328:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	0c1b      	lsrs	r3, r3, #16
 800a33a:	f003 0104 	and.w	r1, r3, #4
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a342:	f003 0210 	and.w	r2, r3, #16
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	69da      	ldr	r2, [r3, #28]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a35c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b08a      	sub	sp, #40	@ 0x28
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	60b9      	str	r1, [r7, #8]
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a384:	2301      	movs	r3, #1
 800a386:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a388:	f7fe f94c 	bl	8008624 <HAL_GetTick>
 800a38c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a394:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a39c:	887b      	ldrh	r3, [r7, #2]
 800a39e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a3a0:	7ffb      	ldrb	r3, [r7, #31]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d00c      	beq.n	800a3c0 <HAL_SPI_TransmitReceive+0x4a>
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3ac:	d106      	bne.n	800a3bc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d102      	bne.n	800a3bc <HAL_SPI_TransmitReceive+0x46>
 800a3b6:	7ffb      	ldrb	r3, [r7, #31]
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d001      	beq.n	800a3c0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e17f      	b.n	800a6c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d005      	beq.n	800a3d2 <HAL_SPI_TransmitReceive+0x5c>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <HAL_SPI_TransmitReceive+0x5c>
 800a3cc:	887b      	ldrh	r3, [r7, #2]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d101      	bne.n	800a3d6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e174      	b.n	800a6c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d101      	bne.n	800a3e4 <HAL_SPI_TransmitReceive+0x6e>
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e16d      	b.n	800a6c0 <HAL_SPI_TransmitReceive+0x34a>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d003      	beq.n	800a400 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	887a      	ldrh	r2, [r7, #2]
 800a410:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	887a      	ldrh	r2, [r7, #2]
 800a416:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	887a      	ldrh	r2, [r7, #2]
 800a422:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	887a      	ldrh	r2, [r7, #2]
 800a428:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a440:	2b40      	cmp	r3, #64	@ 0x40
 800a442:	d007      	beq.n	800a454 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a45c:	d17e      	bne.n	800a55c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <HAL_SPI_TransmitReceive+0xf6>
 800a466:	8afb      	ldrh	r3, [r7, #22]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d16c      	bne.n	800a546 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a470:	881a      	ldrh	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a47c:	1c9a      	adds	r2, r3, #2
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a486:	b29b      	uxth	r3, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a490:	e059      	b.n	800a546 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d11b      	bne.n	800a4d8 <HAL_SPI_TransmitReceive+0x162>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d016      	beq.n	800a4d8 <HAL_SPI_TransmitReceive+0x162>
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d113      	bne.n	800a4d8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b4:	881a      	ldrh	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c0:	1c9a      	adds	r2, r3, #2
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d119      	bne.n	800a51a <HAL_SPI_TransmitReceive+0x1a4>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d014      	beq.n	800a51a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4fa:	b292      	uxth	r2, r2
 800a4fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a502:	1c9a      	adds	r2, r3, #2
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a516:	2301      	movs	r3, #1
 800a518:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a51a:	f7fe f883 	bl	8008624 <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a526:	429a      	cmp	r2, r3
 800a528:	d80d      	bhi.n	800a546 <HAL_SPI_TransmitReceive+0x1d0>
 800a52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a530:	d009      	beq.n	800a546 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e0bc      	b.n	800a6c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1a0      	bne.n	800a492 <HAL_SPI_TransmitReceive+0x11c>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a554:	b29b      	uxth	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d19b      	bne.n	800a492 <HAL_SPI_TransmitReceive+0x11c>
 800a55a:	e082      	b.n	800a662 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <HAL_SPI_TransmitReceive+0x1f4>
 800a564:	8afb      	ldrh	r3, [r7, #22]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d171      	bne.n	800a64e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	330c      	adds	r3, #12
 800a574:	7812      	ldrb	r2, [r2, #0]
 800a576:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a586:	b29b      	uxth	r3, r3
 800a588:	3b01      	subs	r3, #1
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a590:	e05d      	b.n	800a64e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f003 0302 	and.w	r3, r3, #2
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d11c      	bne.n	800a5da <HAL_SPI_TransmitReceive+0x264>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d017      	beq.n	800a5da <HAL_SPI_TransmitReceive+0x264>
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d114      	bne.n	800a5da <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	330c      	adds	r3, #12
 800a5ba:	7812      	ldrb	r2, [r2, #0]
 800a5bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d119      	bne.n	800a61c <HAL_SPI_TransmitReceive+0x2a6>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d014      	beq.n	800a61c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5fc:	b2d2      	uxtb	r2, r2
 800a5fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a60e:	b29b      	uxth	r3, r3
 800a610:	3b01      	subs	r3, #1
 800a612:	b29a      	uxth	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a618:	2301      	movs	r3, #1
 800a61a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a61c:	f7fe f802 	bl	8008624 <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a628:	429a      	cmp	r2, r3
 800a62a:	d803      	bhi.n	800a634 <HAL_SPI_TransmitReceive+0x2be>
 800a62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d102      	bne.n	800a63a <HAL_SPI_TransmitReceive+0x2c4>
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e038      	b.n	800a6c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a652:	b29b      	uxth	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d19c      	bne.n	800a592 <HAL_SPI_TransmitReceive+0x21c>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d197      	bne.n	800a592 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a662:	6a3a      	ldr	r2, [r7, #32]
 800a664:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 f8b6 	bl	800a7d8 <SPI_EndRxTxTransaction>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d008      	beq.n	800a684 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e01d      	b.n	800a6c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10a      	bne.n	800a6a2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	613b      	str	r3, [r7, #16]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e000      	b.n	800a6c0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800a6be:	2300      	movs	r3, #0
  }
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3728      	adds	r7, #40	@ 0x28
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a6d8:	f7fd ffa4 	bl	8008624 <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e0:	1a9b      	subs	r3, r3, r2
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a6e8:	f7fd ff9c 	bl	8008624 <HAL_GetTick>
 800a6ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6ee:	4b39      	ldr	r3, [pc, #228]	@ (800a7d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	015b      	lsls	r3, r3, #5
 800a6f4:	0d1b      	lsrs	r3, r3, #20
 800a6f6:	69fa      	ldr	r2, [r7, #28]
 800a6f8:	fb02 f303 	mul.w	r3, r2, r3
 800a6fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6fe:	e054      	b.n	800a7aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a706:	d050      	beq.n	800a7aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a708:	f7fd ff8c 	bl	8008624 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	69fa      	ldr	r2, [r7, #28]
 800a714:	429a      	cmp	r2, r3
 800a716:	d902      	bls.n	800a71e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d13d      	bne.n	800a79a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a72c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a736:	d111      	bne.n	800a75c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a740:	d004      	beq.n	800a74c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a74a:	d107      	bne.n	800a75c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a75a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a764:	d10f      	bne.n	800a786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a774:	601a      	str	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e017      	b.n	800a7ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689a      	ldr	r2, [r3, #8]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	bf0c      	ite	eq
 800a7ba:	2301      	moveq	r3, #1
 800a7bc:	2300      	movne	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d19b      	bne.n	800a700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20000060 	.word	0x20000060

0800a7d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af02      	add	r7, sp, #8
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	2102      	movs	r1, #2
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7ff ff6a 	bl	800a6c8 <SPI_WaitFlagStateUntilTimeout>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d007      	beq.n	800a80a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7fe:	f043 0220 	orr.w	r2, r3, #32
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	e032      	b.n	800a870 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a80a:	4b1b      	ldr	r3, [pc, #108]	@ (800a878 <SPI_EndRxTxTransaction+0xa0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a1b      	ldr	r2, [pc, #108]	@ (800a87c <SPI_EndRxTxTransaction+0xa4>)
 800a810:	fba2 2303 	umull	r2, r3, r2, r3
 800a814:	0d5b      	lsrs	r3, r3, #21
 800a816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a81a:	fb02 f303 	mul.w	r3, r2, r3
 800a81e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a828:	d112      	bne.n	800a850 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2200      	movs	r2, #0
 800a832:	2180      	movs	r1, #128	@ 0x80
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f7ff ff47 	bl	800a6c8 <SPI_WaitFlagStateUntilTimeout>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d016      	beq.n	800a86e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a844:	f043 0220 	orr.w	r2, r3, #32
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e00f      	b.n	800a870 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	3b01      	subs	r3, #1
 800a85a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a866:	2b80      	cmp	r3, #128	@ 0x80
 800a868:	d0f2      	beq.n	800a850 <SPI_EndRxTxTransaction+0x78>
 800a86a:	e000      	b.n	800a86e <SPI_EndRxTxTransaction+0x96>
        break;
 800a86c:	bf00      	nop
  }

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	20000060 	.word	0x20000060
 800a87c:	165e9f81 	.word	0x165e9f81

0800a880 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e038      	b.n	800a908 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7fd fad8 	bl	8007e60 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	f001 fdc4 	bl	800c448 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	68b9      	ldr	r1, [r7, #8]
 800a8cc:	f001 fe26 	bl	800c51c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6858      	ldr	r0, [r3, #4]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8dc:	6879      	ldr	r1, [r7, #4]
 800a8de:	f001 fe53 	bl	800c588 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	6892      	ldr	r2, [r2, #8]
 800a8ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	6892      	ldr	r2, [r2, #8]
 800a8f6:	f041 0101 	orr.w	r1, r1, #1
 800a8fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e041      	b.n	800a9a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7fd f9b0 	bl	8007c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2202      	movs	r2, #2
 800a940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f000 faac 	bl	800aeac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d001      	beq.n	800a9c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e04e      	b.n	800aa66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f042 0201 	orr.w	r2, r2, #1
 800a9de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a23      	ldr	r2, [pc, #140]	@ (800aa74 <HAL_TIM_Base_Start_IT+0xc4>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d022      	beq.n	800aa30 <HAL_TIM_Base_Start_IT+0x80>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9f2:	d01d      	beq.n	800aa30 <HAL_TIM_Base_Start_IT+0x80>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a1f      	ldr	r2, [pc, #124]	@ (800aa78 <HAL_TIM_Base_Start_IT+0xc8>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d018      	beq.n	800aa30 <HAL_TIM_Base_Start_IT+0x80>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a1e      	ldr	r2, [pc, #120]	@ (800aa7c <HAL_TIM_Base_Start_IT+0xcc>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d013      	beq.n	800aa30 <HAL_TIM_Base_Start_IT+0x80>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a1c      	ldr	r2, [pc, #112]	@ (800aa80 <HAL_TIM_Base_Start_IT+0xd0>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d00e      	beq.n	800aa30 <HAL_TIM_Base_Start_IT+0x80>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a1b      	ldr	r2, [pc, #108]	@ (800aa84 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d009      	beq.n	800aa30 <HAL_TIM_Base_Start_IT+0x80>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a19      	ldr	r2, [pc, #100]	@ (800aa88 <HAL_TIM_Base_Start_IT+0xd8>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d004      	beq.n	800aa30 <HAL_TIM_Base_Start_IT+0x80>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a18      	ldr	r2, [pc, #96]	@ (800aa8c <HAL_TIM_Base_Start_IT+0xdc>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d111      	bne.n	800aa54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b06      	cmp	r3, #6
 800aa40:	d010      	beq.n	800aa64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0201 	orr.w	r2, r2, #1
 800aa50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa52:	e007      	b.n	800aa64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0201 	orr.w	r2, r2, #1
 800aa62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	40010000 	.word	0x40010000
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	40000800 	.word	0x40000800
 800aa80:	40000c00 	.word	0x40000c00
 800aa84:	40010400 	.word	0x40010400
 800aa88:	40014000 	.word	0x40014000
 800aa8c:	40001800 	.word	0x40001800

0800aa90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68da      	ldr	r2, [r3, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f022 0201 	bic.w	r2, r2, #1
 800aaa6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6a1a      	ldr	r2, [r3, #32]
 800aaae:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aab2:	4013      	ands	r3, r2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10f      	bne.n	800aad8 <HAL_TIM_Base_Stop_IT+0x48>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6a1a      	ldr	r2, [r3, #32]
 800aabe:	f240 4344 	movw	r3, #1092	@ 0x444
 800aac2:	4013      	ands	r3, r2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d107      	bne.n	800aad8 <HAL_TIM_Base_Stop_IT+0x48>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f022 0201 	bic.w	r2, r2, #1
 800aad6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f003 0302 	and.w	r3, r3, #2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d020      	beq.n	800ab52 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d01b      	beq.n	800ab52 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f06f 0202 	mvn.w	r2, #2
 800ab22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	f003 0303 	and.w	r3, r3, #3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f999 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800ab3e:	e005      	b.n	800ab4c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f98b 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f99c 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	f003 0304 	and.w	r3, r3, #4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d020      	beq.n	800ab9e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f003 0304 	and.w	r3, r3, #4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d01b      	beq.n	800ab9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f06f 0204 	mvn.w	r2, #4
 800ab6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f973 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800ab8a:	e005      	b.n	800ab98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f965 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f976 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f003 0308 	and.w	r3, r3, #8
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d020      	beq.n	800abea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d01b      	beq.n	800abea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f06f 0208 	mvn.w	r2, #8
 800abba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2204      	movs	r2, #4
 800abc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	f003 0303 	and.w	r3, r3, #3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f94d 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800abd6:	e005      	b.n	800abe4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f93f 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f950 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f003 0310 	and.w	r3, r3, #16
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d020      	beq.n	800ac36 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f003 0310 	and.w	r3, r3, #16
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d01b      	beq.n	800ac36 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f06f 0210 	mvn.w	r2, #16
 800ac06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2208      	movs	r2, #8
 800ac0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f927 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800ac22:	e005      	b.n	800ac30 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f919 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f92a 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00c      	beq.n	800ac5a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f06f 0201 	mvn.w	r2, #1
 800ac52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7fc f9b5 	bl	8006fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00c      	beq.n	800ac7e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ac76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fae3 	bl	800b244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00c      	beq.n	800aca2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d007      	beq.n	800aca2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ac9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f8fb 	bl	800ae98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00c      	beq.n	800acc6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d007      	beq.n	800acc6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f06f 0220 	mvn.w	r2, #32
 800acbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fab5 	bl	800b230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d101      	bne.n	800acea <HAL_TIM_ConfigClockSource+0x1c>
 800ace6:	2302      	movs	r3, #2
 800ace8:	e0b4      	b.n	800ae54 <HAL_TIM_ConfigClockSource+0x186>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2202      	movs	r2, #2
 800acf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ad08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad22:	d03e      	beq.n	800ada2 <HAL_TIM_ConfigClockSource+0xd4>
 800ad24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad28:	f200 8087 	bhi.w	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
 800ad2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad30:	f000 8086 	beq.w	800ae40 <HAL_TIM_ConfigClockSource+0x172>
 800ad34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad38:	d87f      	bhi.n	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
 800ad3a:	2b70      	cmp	r3, #112	@ 0x70
 800ad3c:	d01a      	beq.n	800ad74 <HAL_TIM_ConfigClockSource+0xa6>
 800ad3e:	2b70      	cmp	r3, #112	@ 0x70
 800ad40:	d87b      	bhi.n	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
 800ad42:	2b60      	cmp	r3, #96	@ 0x60
 800ad44:	d050      	beq.n	800ade8 <HAL_TIM_ConfigClockSource+0x11a>
 800ad46:	2b60      	cmp	r3, #96	@ 0x60
 800ad48:	d877      	bhi.n	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
 800ad4a:	2b50      	cmp	r3, #80	@ 0x50
 800ad4c:	d03c      	beq.n	800adc8 <HAL_TIM_ConfigClockSource+0xfa>
 800ad4e:	2b50      	cmp	r3, #80	@ 0x50
 800ad50:	d873      	bhi.n	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
 800ad52:	2b40      	cmp	r3, #64	@ 0x40
 800ad54:	d058      	beq.n	800ae08 <HAL_TIM_ConfigClockSource+0x13a>
 800ad56:	2b40      	cmp	r3, #64	@ 0x40
 800ad58:	d86f      	bhi.n	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
 800ad5a:	2b30      	cmp	r3, #48	@ 0x30
 800ad5c:	d064      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x15a>
 800ad5e:	2b30      	cmp	r3, #48	@ 0x30
 800ad60:	d86b      	bhi.n	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
 800ad62:	2b20      	cmp	r3, #32
 800ad64:	d060      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x15a>
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d867      	bhi.n	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d05c      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x15a>
 800ad6e:	2b10      	cmp	r3, #16
 800ad70:	d05a      	beq.n	800ae28 <HAL_TIM_ConfigClockSource+0x15a>
 800ad72:	e062      	b.n	800ae3a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad84:	f000 f9b8 	bl	800b0f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ad96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	609a      	str	r2, [r3, #8]
      break;
 800ada0:	e04f      	b.n	800ae42 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800adb2:	f000 f9a1 	bl	800b0f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800adc4:	609a      	str	r2, [r3, #8]
      break;
 800adc6:	e03c      	b.n	800ae42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800add4:	461a      	mov	r2, r3
 800add6:	f000 f915 	bl	800b004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2150      	movs	r1, #80	@ 0x50
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 f96e 	bl	800b0c2 <TIM_ITRx_SetConfig>
      break;
 800ade6:	e02c      	b.n	800ae42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800adf4:	461a      	mov	r2, r3
 800adf6:	f000 f934 	bl	800b062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2160      	movs	r1, #96	@ 0x60
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 f95e 	bl	800b0c2 <TIM_ITRx_SetConfig>
      break;
 800ae06:	e01c      	b.n	800ae42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae14:	461a      	mov	r2, r3
 800ae16:	f000 f8f5 	bl	800b004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2140      	movs	r1, #64	@ 0x40
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f94e 	bl	800b0c2 <TIM_ITRx_SetConfig>
      break;
 800ae26:	e00c      	b.n	800ae42 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f000 f945 	bl	800b0c2 <TIM_ITRx_SetConfig>
      break;
 800ae38:	e003      	b.n	800ae42 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3e:	e000      	b.n	800ae42 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a46      	ldr	r2, [pc, #280]	@ (800afd8 <TIM_Base_SetConfig+0x12c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d013      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeca:	d00f      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a43      	ldr	r2, [pc, #268]	@ (800afdc <TIM_Base_SetConfig+0x130>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d00b      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a42      	ldr	r2, [pc, #264]	@ (800afe0 <TIM_Base_SetConfig+0x134>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d007      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a41      	ldr	r2, [pc, #260]	@ (800afe4 <TIM_Base_SetConfig+0x138>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d003      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a40      	ldr	r2, [pc, #256]	@ (800afe8 <TIM_Base_SetConfig+0x13c>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d108      	bne.n	800aefe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a35      	ldr	r2, [pc, #212]	@ (800afd8 <TIM_Base_SetConfig+0x12c>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d02b      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af0c:	d027      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a32      	ldr	r2, [pc, #200]	@ (800afdc <TIM_Base_SetConfig+0x130>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d023      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a31      	ldr	r2, [pc, #196]	@ (800afe0 <TIM_Base_SetConfig+0x134>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d01f      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a30      	ldr	r2, [pc, #192]	@ (800afe4 <TIM_Base_SetConfig+0x138>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d01b      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a2f      	ldr	r2, [pc, #188]	@ (800afe8 <TIM_Base_SetConfig+0x13c>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d017      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a2e      	ldr	r2, [pc, #184]	@ (800afec <TIM_Base_SetConfig+0x140>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d013      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a2d      	ldr	r2, [pc, #180]	@ (800aff0 <TIM_Base_SetConfig+0x144>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d00f      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a2c      	ldr	r2, [pc, #176]	@ (800aff4 <TIM_Base_SetConfig+0x148>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d00b      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a2b      	ldr	r2, [pc, #172]	@ (800aff8 <TIM_Base_SetConfig+0x14c>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d007      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a2a      	ldr	r2, [pc, #168]	@ (800affc <TIM_Base_SetConfig+0x150>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d003      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a29      	ldr	r2, [pc, #164]	@ (800b000 <TIM_Base_SetConfig+0x154>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d108      	bne.n	800af70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	689a      	ldr	r2, [r3, #8]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a10      	ldr	r2, [pc, #64]	@ (800afd8 <TIM_Base_SetConfig+0x12c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d003      	beq.n	800afa4 <TIM_Base_SetConfig+0xf8>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a12      	ldr	r2, [pc, #72]	@ (800afe8 <TIM_Base_SetConfig+0x13c>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d103      	bne.n	800afac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d105      	bne.n	800afca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f023 0201 	bic.w	r2, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	611a      	str	r2, [r3, #16]
  }
}
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	40010000 	.word	0x40010000
 800afdc:	40000400 	.word	0x40000400
 800afe0:	40000800 	.word	0x40000800
 800afe4:	40000c00 	.word	0x40000c00
 800afe8:	40010400 	.word	0x40010400
 800afec:	40014000 	.word	0x40014000
 800aff0:	40014400 	.word	0x40014400
 800aff4:	40014800 	.word	0x40014800
 800aff8:	40001800 	.word	0x40001800
 800affc:	40001c00 	.word	0x40001c00
 800b000:	40002000 	.word	0x40002000

0800b004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6a1b      	ldr	r3, [r3, #32]
 800b014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	f023 0201 	bic.w	r2, r3, #1
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b02e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	011b      	lsls	r3, r3, #4
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	4313      	orrs	r3, r2
 800b038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f023 030a 	bic.w	r3, r3, #10
 800b040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	4313      	orrs	r3, r2
 800b048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	621a      	str	r2, [r3, #32]
}
 800b056:	bf00      	nop
 800b058:	371c      	adds	r7, #28
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b062:	b480      	push	{r7}
 800b064:	b087      	sub	sp, #28
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	f023 0210 	bic.w	r2, r3, #16
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b08c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	031b      	lsls	r3, r3, #12
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	4313      	orrs	r3, r2
 800b096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b09e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	011b      	lsls	r3, r3, #4
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	621a      	str	r2, [r3, #32]
}
 800b0b6:	bf00      	nop
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b085      	sub	sp, #20
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	f043 0307 	orr.w	r3, r3, #7
 800b0e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	609a      	str	r2, [r3, #8]
}
 800b0ec:	bf00      	nop
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	021a      	lsls	r2, r3, #8
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	431a      	orrs	r2, r3
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	4313      	orrs	r3, r2
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	4313      	orrs	r3, r2
 800b124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	609a      	str	r2, [r3, #8]
}
 800b12c:	bf00      	nop
 800b12e:	371c      	adds	r7, #28
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d101      	bne.n	800b150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b14c:	2302      	movs	r3, #2
 800b14e:	e05a      	b.n	800b206 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	4313      	orrs	r3, r2
 800b180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a21      	ldr	r2, [pc, #132]	@ (800b214 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d022      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b19c:	d01d      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a1d      	ldr	r2, [pc, #116]	@ (800b218 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d018      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a1b      	ldr	r2, [pc, #108]	@ (800b21c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d013      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a1a      	ldr	r2, [pc, #104]	@ (800b220 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00e      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a18      	ldr	r2, [pc, #96]	@ (800b224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d009      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a17      	ldr	r2, [pc, #92]	@ (800b228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d004      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a15      	ldr	r2, [pc, #84]	@ (800b22c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d10c      	bne.n	800b1f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	40010000 	.word	0x40010000
 800b218:	40000400 	.word	0x40000400
 800b21c:	40000800 	.word	0x40000800
 800b220:	40000c00 	.word	0x40000c00
 800b224:	40010400 	.word	0x40010400
 800b228:	40014000 	.word	0x40014000
 800b22c:	40001800 	.word	0x40001800

0800b230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e042      	b.n	800b2f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2b00      	cmp	r3, #0
 800b274:	d106      	bne.n	800b284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7fc fd52 	bl	8007d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2224      	movs	r2, #36	@ 0x24
 800b288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68da      	ldr	r2, [r3, #12]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b29a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fe5f 	bl	800bf60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	691a      	ldr	r2, [r3, #16]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b2b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	695a      	ldr	r2, [r3, #20]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b2c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68da      	ldr	r2, [r3, #12]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b2d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2220      	movs	r2, #32
 800b2dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08a      	sub	sp, #40	@ 0x28
 800b2fc:	af02      	add	r7, sp, #8
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	4613      	mov	r3, r2
 800b306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b308:	2300      	movs	r3, #0
 800b30a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b20      	cmp	r3, #32
 800b316:	d175      	bne.n	800b404 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <HAL_UART_Transmit+0x2c>
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e06e      	b.n	800b406 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2221      	movs	r2, #33	@ 0x21
 800b332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b336:	f7fd f975 	bl	8008624 <HAL_GetTick>
 800b33a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	88fa      	ldrh	r2, [r7, #6]
 800b340:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	88fa      	ldrh	r2, [r7, #6]
 800b346:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b350:	d108      	bne.n	800b364 <HAL_UART_Transmit+0x6c>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d104      	bne.n	800b364 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	61bb      	str	r3, [r7, #24]
 800b362:	e003      	b.n	800b36c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b36c:	e02e      	b.n	800b3cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2200      	movs	r2, #0
 800b376:	2180      	movs	r1, #128	@ 0x80
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f000 fbc1 	bl	800bb00 <UART_WaitOnFlagUntilTimeout>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2220      	movs	r2, #32
 800b388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e03a      	b.n	800b406 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10b      	bne.n	800b3ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	3302      	adds	r3, #2
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	e007      	b.n	800b3be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1cb      	bne.n	800b36e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2140      	movs	r1, #64	@ 0x40
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 fb8d 	bl	800bb00 <UART_WaitOnFlagUntilTimeout>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d005      	beq.n	800b3f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2220      	movs	r2, #32
 800b3f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e006      	b.n	800b406 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	e000      	b.n	800b406 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b404:	2302      	movs	r3, #2
  }
}
 800b406:	4618      	mov	r0, r3
 800b408:	3720      	adds	r7, #32
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b08a      	sub	sp, #40	@ 0x28
 800b412:	af02      	add	r7, sp, #8
 800b414:	60f8      	str	r0, [r7, #12]
 800b416:	60b9      	str	r1, [r7, #8]
 800b418:	603b      	str	r3, [r7, #0]
 800b41a:	4613      	mov	r3, r2
 800b41c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b20      	cmp	r3, #32
 800b42c:	f040 8081 	bne.w	800b532 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <HAL_UART_Receive+0x2e>
 800b436:	88fb      	ldrh	r3, [r7, #6]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e079      	b.n	800b534 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2222      	movs	r2, #34	@ 0x22
 800b44a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b454:	f7fd f8e6 	bl	8008624 <HAL_GetTick>
 800b458:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	88fa      	ldrh	r2, [r7, #6]
 800b45e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	88fa      	ldrh	r2, [r7, #6]
 800b464:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b46e:	d108      	bne.n	800b482 <HAL_UART_Receive+0x74>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d104      	bne.n	800b482 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800b478:	2300      	movs	r3, #0
 800b47a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	61bb      	str	r3, [r7, #24]
 800b480:	e003      	b.n	800b48a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b486:	2300      	movs	r3, #0
 800b488:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b48a:	e047      	b.n	800b51c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2200      	movs	r2, #0
 800b494:	2120      	movs	r1, #32
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 fb32 	bl	800bb00 <UART_WaitOnFlagUntilTimeout>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d005      	beq.n	800b4ae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e042      	b.n	800b534 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10c      	bne.n	800b4ce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	3302      	adds	r3, #2
 800b4ca:	61bb      	str	r3, [r7, #24]
 800b4cc:	e01f      	b.n	800b50e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4d6:	d007      	beq.n	800b4e8 <HAL_UART_Receive+0xda>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <HAL_UART_Receive+0xe8>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d106      	bne.n	800b4f6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	701a      	strb	r2, [r3, #0]
 800b4f4:	e008      	b.n	800b508 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b502:	b2da      	uxtb	r2, r3
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	3301      	adds	r3, #1
 800b50c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b512:	b29b      	uxth	r3, r3
 800b514:	3b01      	subs	r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b520:	b29b      	uxth	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1b2      	bne.n	800b48c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2220      	movs	r2, #32
 800b52a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	e000      	b.n	800b534 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b532:	2302      	movs	r3, #2
  }
}
 800b534:	4618      	mov	r0, r3
 800b536:	3720      	adds	r7, #32
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b550:	b2db      	uxtb	r3, r3
 800b552:	2b20      	cmp	r3, #32
 800b554:	d112      	bne.n	800b57c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <HAL_UART_Receive_IT+0x26>
 800b55c:	88fb      	ldrh	r3, [r7, #6]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e00b      	b.n	800b57e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b56c:	88fb      	ldrh	r3, [r7, #6]
 800b56e:	461a      	mov	r2, r3
 800b570:	68b9      	ldr	r1, [r7, #8]
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 fb1d 	bl	800bbb2 <UART_Start_Receive_IT>
 800b578:	4603      	mov	r3, r0
 800b57a:	e000      	b.n	800b57e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b57c:	2302      	movs	r3, #2
  }
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b0ba      	sub	sp, #232	@ 0xe8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5be:	f003 030f 	and.w	r3, r3, #15
 800b5c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b5c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10f      	bne.n	800b5ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5d2:	f003 0320 	and.w	r3, r3, #32
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d009      	beq.n	800b5ee <HAL_UART_IRQHandler+0x66>
 800b5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5de:	f003 0320 	and.w	r3, r3, #32
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fbfc 	bl	800bde4 <UART_Receive_IT>
      return;
 800b5ec:	e25b      	b.n	800baa6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b5ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 80de 	beq.w	800b7b4 <HAL_UART_IRQHandler+0x22c>
 800b5f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d106      	bne.n	800b612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b608:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 80d1 	beq.w	800b7b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <HAL_UART_IRQHandler+0xae>
 800b61e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b626:	2b00      	cmp	r3, #0
 800b628:	d005      	beq.n	800b636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b62e:	f043 0201 	orr.w	r2, r3, #1
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63a:	f003 0304 	and.w	r3, r3, #4
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00b      	beq.n	800b65a <HAL_UART_IRQHandler+0xd2>
 800b642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d005      	beq.n	800b65a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b652:	f043 0202 	orr.w	r2, r3, #2
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00b      	beq.n	800b67e <HAL_UART_IRQHandler+0xf6>
 800b666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d005      	beq.n	800b67e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b676:	f043 0204 	orr.w	r2, r3, #4
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b682:	f003 0308 	and.w	r3, r3, #8
 800b686:	2b00      	cmp	r3, #0
 800b688:	d011      	beq.n	800b6ae <HAL_UART_IRQHandler+0x126>
 800b68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b68e:	f003 0320 	and.w	r3, r3, #32
 800b692:	2b00      	cmp	r3, #0
 800b694:	d105      	bne.n	800b6a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d005      	beq.n	800b6ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6a6:	f043 0208 	orr.w	r2, r3, #8
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 81f2 	beq.w	800ba9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6bc:	f003 0320 	and.w	r3, r3, #32
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d008      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x14e>
 800b6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6c8:	f003 0320 	and.w	r3, r3, #32
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 fb87 	bl	800bde4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e0:	2b40      	cmp	r3, #64	@ 0x40
 800b6e2:	bf0c      	ite	eq
 800b6e4:	2301      	moveq	r3, #1
 800b6e6:	2300      	movne	r3, #0
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6f2:	f003 0308 	and.w	r3, r3, #8
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d103      	bne.n	800b702 <HAL_UART_IRQHandler+0x17a>
 800b6fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d04f      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fa8f 	bl	800bc26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b712:	2b40      	cmp	r3, #64	@ 0x40
 800b714:	d141      	bne.n	800b79a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3314      	adds	r3, #20
 800b71c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b724:	e853 3f00 	ldrex	r3, [r3]
 800b728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b72c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b730:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b734:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3314      	adds	r3, #20
 800b73e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b742:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b74e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b752:	e841 2300 	strex	r3, r2, [r1]
 800b756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b75a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1d9      	bne.n	800b716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d013      	beq.n	800b792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b76e:	4a7e      	ldr	r2, [pc, #504]	@ (800b968 <HAL_UART_IRQHandler+0x3e0>)
 800b770:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b776:	4618      	mov	r0, r3
 800b778:	f7fd f9b4 	bl	8008ae4 <HAL_DMA_Abort_IT>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d016      	beq.n	800b7b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b78c:	4610      	mov	r0, r2
 800b78e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b790:	e00e      	b.n	800b7b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f99e 	bl	800bad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b798:	e00a      	b.n	800b7b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f99a 	bl	800bad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7a0:	e006      	b.n	800b7b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f996 	bl	800bad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b7ae:	e175      	b.n	800ba9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b0:	bf00      	nop
    return;
 800b7b2:	e173      	b.n	800ba9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	f040 814f 	bne.w	800ba5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7c2:	f003 0310 	and.w	r3, r3, #16
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8148 	beq.w	800ba5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7d0:	f003 0310 	and.w	r3, r3, #16
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 8141 	beq.w	800ba5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60bb      	str	r3, [r7, #8]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	60bb      	str	r3, [r7, #8]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	60bb      	str	r3, [r7, #8]
 800b7ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7fa:	2b40      	cmp	r3, #64	@ 0x40
 800b7fc:	f040 80b6 	bne.w	800b96c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b80c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 8145 	beq.w	800baa0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b81a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b81e:	429a      	cmp	r2, r3
 800b820:	f080 813e 	bcs.w	800baa0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b82a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b836:	f000 8088 	beq.w	800b94a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	330c      	adds	r3, #12
 800b840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b844:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b848:	e853 3f00 	ldrex	r3, [r3]
 800b84c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b858:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	330c      	adds	r3, #12
 800b862:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b866:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b86a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b872:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b876:	e841 2300 	strex	r3, r2, [r1]
 800b87a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1d9      	bne.n	800b83a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3314      	adds	r3, #20
 800b88c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b890:	e853 3f00 	ldrex	r3, [r3]
 800b894:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b896:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b898:	f023 0301 	bic.w	r3, r3, #1
 800b89c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3314      	adds	r3, #20
 800b8a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b8aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b8ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b8b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b8bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e1      	bne.n	800b886 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3314      	adds	r3, #20
 800b8c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8cc:	e853 3f00 	ldrex	r3, [r3]
 800b8d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b8d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3314      	adds	r3, #20
 800b8e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b8e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b8e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b8ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b8ee:	e841 2300 	strex	r3, r2, [r1]
 800b8f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b8f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e3      	bne.n	800b8c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2220      	movs	r2, #32
 800b8fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	330c      	adds	r3, #12
 800b90e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b912:	e853 3f00 	ldrex	r3, [r3]
 800b916:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b91a:	f023 0310 	bic.w	r3, r3, #16
 800b91e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	330c      	adds	r3, #12
 800b928:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b92c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b92e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b932:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b93a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e3      	bne.n	800b908 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b944:	4618      	mov	r0, r3
 800b946:	f7fd f85d 	bl	8008a04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2202      	movs	r2, #2
 800b94e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b958:	b29b      	uxth	r3, r3
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f8c1 	bl	800bae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b966:	e09b      	b.n	800baa0 <HAL_UART_IRQHandler+0x518>
 800b968:	0800bced 	.word	0x0800bced
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b974:	b29b      	uxth	r3, r3
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b980:	b29b      	uxth	r3, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 808e 	beq.w	800baa4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f000 8089 	beq.w	800baa4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	330c      	adds	r3, #12
 800b998:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	330c      	adds	r3, #12
 800b9b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b9b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800b9b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9be:	e841 2300 	strex	r3, r2, [r1]
 800b9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1e3      	bne.n	800b992 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	3314      	adds	r3, #20
 800b9d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d4:	e853 3f00 	ldrex	r3, [r3]
 800b9d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	f023 0301 	bic.w	r3, r3, #1
 800b9e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3314      	adds	r3, #20
 800b9ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b9ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9f6:	e841 2300 	strex	r3, r2, [r1]
 800b9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e3      	bne.n	800b9ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2220      	movs	r2, #32
 800ba06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	330c      	adds	r3, #12
 800ba16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f023 0310 	bic.w	r3, r3, #16
 800ba26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	330c      	adds	r3, #12
 800ba30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ba34:	61fa      	str	r2, [r7, #28]
 800ba36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba38:	69b9      	ldr	r1, [r7, #24]
 800ba3a:	69fa      	ldr	r2, [r7, #28]
 800ba3c:	e841 2300 	strex	r3, r2, [r1]
 800ba40:	617b      	str	r3, [r7, #20]
   return(result);
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1e3      	bne.n	800ba10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba52:	4619      	mov	r1, r3
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f847 	bl	800bae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba5a:	e023      	b.n	800baa4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <HAL_UART_IRQHandler+0x4f4>
 800ba68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f94d 	bl	800bd14 <UART_Transmit_IT>
    return;
 800ba7a:	e014      	b.n	800baa6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00e      	beq.n	800baa6 <HAL_UART_IRQHandler+0x51e>
 800ba88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f98d 	bl	800bdb4 <UART_EndTransmit_IT>
    return;
 800ba9a:	e004      	b.n	800baa6 <HAL_UART_IRQHandler+0x51e>
    return;
 800ba9c:	bf00      	nop
 800ba9e:	e002      	b.n	800baa6 <HAL_UART_IRQHandler+0x51e>
      return;
 800baa0:	bf00      	nop
 800baa2:	e000      	b.n	800baa6 <HAL_UART_IRQHandler+0x51e>
      return;
 800baa4:	bf00      	nop
  }
}
 800baa6:	37e8      	adds	r7, #232	@ 0xe8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bac8:	bf00      	nop
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800baf4:	bf00      	nop
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	603b      	str	r3, [r7, #0]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb10:	e03b      	b.n	800bb8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb18:	d037      	beq.n	800bb8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb1a:	f7fc fd83 	bl	8008624 <HAL_GetTick>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	6a3a      	ldr	r2, [r7, #32]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d302      	bcc.n	800bb30 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb2a:	6a3b      	ldr	r3, [r7, #32]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e03a      	b.n	800bbaa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	f003 0304 	and.w	r3, r3, #4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d023      	beq.n	800bb8a <UART_WaitOnFlagUntilTimeout+0x8a>
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2b80      	cmp	r3, #128	@ 0x80
 800bb46:	d020      	beq.n	800bb8a <UART_WaitOnFlagUntilTimeout+0x8a>
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	2b40      	cmp	r3, #64	@ 0x40
 800bb4c:	d01d      	beq.n	800bb8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f003 0308 	and.w	r3, r3, #8
 800bb58:	2b08      	cmp	r3, #8
 800bb5a:	d116      	bne.n	800bb8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	617b      	str	r3, [r7, #20]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	617b      	str	r3, [r7, #20]
 800bb70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 f857 	bl	800bc26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2208      	movs	r2, #8
 800bb7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e00f      	b.n	800bbaa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4013      	ands	r3, r2
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	bf0c      	ite	eq
 800bb9a:	2301      	moveq	r3, #1
 800bb9c:	2300      	movne	r3, #0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d0b4      	beq.n	800bb12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b085      	sub	sp, #20
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	88fa      	ldrh	r2, [r7, #6]
 800bbca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	88fa      	ldrh	r2, [r7, #6]
 800bbd0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2222      	movs	r2, #34	@ 0x22
 800bbdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d007      	beq.n	800bbf8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68da      	ldr	r2, [r3, #12]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbf6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	695a      	ldr	r2, [r3, #20]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f042 0201 	orr.w	r2, r2, #1
 800bc06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68da      	ldr	r2, [r3, #12]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f042 0220 	orr.w	r2, r2, #32
 800bc16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b095      	sub	sp, #84	@ 0x54
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	330c      	adds	r3, #12
 800bc34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc38:	e853 3f00 	ldrex	r3, [r3]
 800bc3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	330c      	adds	r3, #12
 800bc4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc4e:	643a      	str	r2, [r7, #64]	@ 0x40
 800bc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc56:	e841 2300 	strex	r3, r2, [r1]
 800bc5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1e5      	bne.n	800bc2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3314      	adds	r3, #20
 800bc68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6a:	6a3b      	ldr	r3, [r7, #32]
 800bc6c:	e853 3f00 	ldrex	r3, [r3]
 800bc70:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	f023 0301 	bic.w	r3, r3, #1
 800bc78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3314      	adds	r3, #20
 800bc80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc8a:	e841 2300 	strex	r3, r2, [r1]
 800bc8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1e5      	bne.n	800bc62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d119      	bne.n	800bcd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	330c      	adds	r3, #12
 800bca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	e853 3f00 	ldrex	r3, [r3]
 800bcac:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f023 0310 	bic.w	r3, r3, #16
 800bcb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	330c      	adds	r3, #12
 800bcbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcbe:	61ba      	str	r2, [r7, #24]
 800bcc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc2:	6979      	ldr	r1, [r7, #20]
 800bcc4:	69ba      	ldr	r2, [r7, #24]
 800bcc6:	e841 2300 	strex	r3, r2, [r1]
 800bcca:	613b      	str	r3, [r7, #16]
   return(result);
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e5      	bne.n	800bc9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bce0:	bf00      	nop
 800bce2:	3754      	adds	r7, #84	@ 0x54
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f7ff fee4 	bl	800bad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd0c:	bf00      	nop
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	2b21      	cmp	r3, #33	@ 0x21
 800bd26:	d13e      	bne.n	800bda6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd30:	d114      	bne.n	800bd5c <UART_Transmit_IT+0x48>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d110      	bne.n	800bd5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	461a      	mov	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	1c9a      	adds	r2, r3, #2
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	621a      	str	r2, [r3, #32]
 800bd5a:	e008      	b.n	800bd6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a1b      	ldr	r3, [r3, #32]
 800bd60:	1c59      	adds	r1, r3, #1
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	6211      	str	r1, [r2, #32]
 800bd66:	781a      	ldrb	r2, [r3, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	3b01      	subs	r3, #1
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10f      	bne.n	800bda2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bda0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bda2:	2300      	movs	r3, #0
 800bda4:	e000      	b.n	800bda8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bda6:	2302      	movs	r3, #2
  }
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68da      	ldr	r2, [r3, #12]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bdca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2220      	movs	r2, #32
 800bdd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7ff fe69 	bl	800baac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08c      	sub	sp, #48	@ 0x30
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b22      	cmp	r3, #34	@ 0x22
 800bdf6:	f040 80ae 	bne.w	800bf56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be02:	d117      	bne.n	800be34 <UART_Receive_IT+0x50>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d113      	bne.n	800be34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be0c:	2300      	movs	r3, #0
 800be0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be22:	b29a      	uxth	r2, r3
 800be24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be2c:	1c9a      	adds	r2, r3, #2
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	629a      	str	r2, [r3, #40]	@ 0x28
 800be32:	e026      	b.n	800be82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be46:	d007      	beq.n	800be58 <UART_Receive_IT+0x74>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10a      	bne.n	800be66 <UART_Receive_IT+0x82>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d106      	bne.n	800be66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be62:	701a      	strb	r2, [r3, #0]
 800be64:	e008      	b.n	800be78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be72:	b2da      	uxtb	r2, r3
 800be74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be86:	b29b      	uxth	r3, r3
 800be88:	3b01      	subs	r3, #1
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	4619      	mov	r1, r3
 800be90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800be92:	2b00      	cmp	r3, #0
 800be94:	d15d      	bne.n	800bf52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68da      	ldr	r2, [r3, #12]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f022 0220 	bic.w	r2, r2, #32
 800bea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68da      	ldr	r2, [r3, #12]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800beb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	695a      	ldr	r2, [r3, #20]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 0201 	bic.w	r2, r2, #1
 800bec4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2220      	movs	r2, #32
 800beca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d135      	bne.n	800bf48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	330c      	adds	r3, #12
 800bee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	e853 3f00 	ldrex	r3, [r3]
 800bef0:	613b      	str	r3, [r7, #16]
   return(result);
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	f023 0310 	bic.w	r3, r3, #16
 800bef8:	627b      	str	r3, [r7, #36]	@ 0x24
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	330c      	adds	r3, #12
 800bf00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf02:	623a      	str	r2, [r7, #32]
 800bf04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf06:	69f9      	ldr	r1, [r7, #28]
 800bf08:	6a3a      	ldr	r2, [r7, #32]
 800bf0a:	e841 2300 	strex	r3, r2, [r1]
 800bf0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1e5      	bne.n	800bee2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 0310 	and.w	r3, r3, #16
 800bf20:	2b10      	cmp	r3, #16
 800bf22:	d10a      	bne.n	800bf3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf24:	2300      	movs	r3, #0
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	60fb      	str	r3, [r7, #12]
 800bf38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff fdd1 	bl	800bae8 <HAL_UARTEx_RxEventCallback>
 800bf46:	e002      	b.n	800bf4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff fdb9 	bl	800bac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e002      	b.n	800bf58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	e000      	b.n	800bf58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bf56:	2302      	movs	r3, #2
  }
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3730      	adds	r7, #48	@ 0x30
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf64:	b0c0      	sub	sp, #256	@ 0x100
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bf78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf7c:	68d9      	ldr	r1, [r3, #12]
 800bf7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	ea40 0301 	orr.w	r3, r0, r1
 800bf88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bf8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	431a      	orrs	r2, r3
 800bf98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	431a      	orrs	r2, r3
 800bfa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfa4:	69db      	ldr	r3, [r3, #28]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bfb8:	f021 010c 	bic.w	r1, r1, #12
 800bfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bfca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bfd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfda:	6999      	ldr	r1, [r3, #24]
 800bfdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	ea40 0301 	orr.w	r3, r0, r1
 800bfe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bfe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	4b8f      	ldr	r3, [pc, #572]	@ (800c22c <UART_SetConfig+0x2cc>)
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d005      	beq.n	800c000 <UART_SetConfig+0xa0>
 800bff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	4b8d      	ldr	r3, [pc, #564]	@ (800c230 <UART_SetConfig+0x2d0>)
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d104      	bne.n	800c00a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c000:	f7fd fdf8 	bl	8009bf4 <HAL_RCC_GetPCLK2Freq>
 800c004:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c008:	e003      	b.n	800c012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c00a:	f7fd fddf 	bl	8009bcc <HAL_RCC_GetPCLK1Freq>
 800c00e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c016:	69db      	ldr	r3, [r3, #28]
 800c018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c01c:	f040 810c 	bne.w	800c238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c024:	2200      	movs	r2, #0
 800c026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c02a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c02e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c032:	4622      	mov	r2, r4
 800c034:	462b      	mov	r3, r5
 800c036:	1891      	adds	r1, r2, r2
 800c038:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c03a:	415b      	adcs	r3, r3
 800c03c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c03e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c042:	4621      	mov	r1, r4
 800c044:	eb12 0801 	adds.w	r8, r2, r1
 800c048:	4629      	mov	r1, r5
 800c04a:	eb43 0901 	adc.w	r9, r3, r1
 800c04e:	f04f 0200 	mov.w	r2, #0
 800c052:	f04f 0300 	mov.w	r3, #0
 800c056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c05a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c05e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c062:	4690      	mov	r8, r2
 800c064:	4699      	mov	r9, r3
 800c066:	4623      	mov	r3, r4
 800c068:	eb18 0303 	adds.w	r3, r8, r3
 800c06c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c070:	462b      	mov	r3, r5
 800c072:	eb49 0303 	adc.w	r3, r9, r3
 800c076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c086:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c08a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c08e:	460b      	mov	r3, r1
 800c090:	18db      	adds	r3, r3, r3
 800c092:	653b      	str	r3, [r7, #80]	@ 0x50
 800c094:	4613      	mov	r3, r2
 800c096:	eb42 0303 	adc.w	r3, r2, r3
 800c09a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c09c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c0a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c0a4:	f7f4 fdda 	bl	8000c5c <__aeabi_uldivmod>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4b61      	ldr	r3, [pc, #388]	@ (800c234 <UART_SetConfig+0x2d4>)
 800c0ae:	fba3 2302 	umull	r2, r3, r3, r2
 800c0b2:	095b      	lsrs	r3, r3, #5
 800c0b4:	011c      	lsls	r4, r3, #4
 800c0b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c0c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c0c8:	4642      	mov	r2, r8
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	1891      	adds	r1, r2, r2
 800c0ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c0d0:	415b      	adcs	r3, r3
 800c0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c0d8:	4641      	mov	r1, r8
 800c0da:	eb12 0a01 	adds.w	sl, r2, r1
 800c0de:	4649      	mov	r1, r9
 800c0e0:	eb43 0b01 	adc.w	fp, r3, r1
 800c0e4:	f04f 0200 	mov.w	r2, #0
 800c0e8:	f04f 0300 	mov.w	r3, #0
 800c0ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c0f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c0f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c0f8:	4692      	mov	sl, r2
 800c0fa:	469b      	mov	fp, r3
 800c0fc:	4643      	mov	r3, r8
 800c0fe:	eb1a 0303 	adds.w	r3, sl, r3
 800c102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c106:	464b      	mov	r3, r9
 800c108:	eb4b 0303 	adc.w	r3, fp, r3
 800c10c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c11c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c124:	460b      	mov	r3, r1
 800c126:	18db      	adds	r3, r3, r3
 800c128:	643b      	str	r3, [r7, #64]	@ 0x40
 800c12a:	4613      	mov	r3, r2
 800c12c:	eb42 0303 	adc.w	r3, r2, r3
 800c130:	647b      	str	r3, [r7, #68]	@ 0x44
 800c132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c13a:	f7f4 fd8f 	bl	8000c5c <__aeabi_uldivmod>
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	4611      	mov	r1, r2
 800c144:	4b3b      	ldr	r3, [pc, #236]	@ (800c234 <UART_SetConfig+0x2d4>)
 800c146:	fba3 2301 	umull	r2, r3, r3, r1
 800c14a:	095b      	lsrs	r3, r3, #5
 800c14c:	2264      	movs	r2, #100	@ 0x64
 800c14e:	fb02 f303 	mul.w	r3, r2, r3
 800c152:	1acb      	subs	r3, r1, r3
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c15a:	4b36      	ldr	r3, [pc, #216]	@ (800c234 <UART_SetConfig+0x2d4>)
 800c15c:	fba3 2302 	umull	r2, r3, r3, r2
 800c160:	095b      	lsrs	r3, r3, #5
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c168:	441c      	add	r4, r3
 800c16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c16e:	2200      	movs	r2, #0
 800c170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c174:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c17c:	4642      	mov	r2, r8
 800c17e:	464b      	mov	r3, r9
 800c180:	1891      	adds	r1, r2, r2
 800c182:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c184:	415b      	adcs	r3, r3
 800c186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c18c:	4641      	mov	r1, r8
 800c18e:	1851      	adds	r1, r2, r1
 800c190:	6339      	str	r1, [r7, #48]	@ 0x30
 800c192:	4649      	mov	r1, r9
 800c194:	414b      	adcs	r3, r1
 800c196:	637b      	str	r3, [r7, #52]	@ 0x34
 800c198:	f04f 0200 	mov.w	r2, #0
 800c19c:	f04f 0300 	mov.w	r3, #0
 800c1a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c1a4:	4659      	mov	r1, fp
 800c1a6:	00cb      	lsls	r3, r1, #3
 800c1a8:	4651      	mov	r1, sl
 800c1aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1ae:	4651      	mov	r1, sl
 800c1b0:	00ca      	lsls	r2, r1, #3
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	4642      	mov	r2, r8
 800c1ba:	189b      	adds	r3, r3, r2
 800c1bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c1c0:	464b      	mov	r3, r9
 800c1c2:	460a      	mov	r2, r1
 800c1c4:	eb42 0303 	adc.w	r3, r2, r3
 800c1c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c1dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	18db      	adds	r3, r3, r3
 800c1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	eb42 0303 	adc.w	r3, r2, r3
 800c1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c1f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c1f6:	f7f4 fd31 	bl	8000c5c <__aeabi_uldivmod>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c234 <UART_SetConfig+0x2d4>)
 800c200:	fba3 1302 	umull	r1, r3, r3, r2
 800c204:	095b      	lsrs	r3, r3, #5
 800c206:	2164      	movs	r1, #100	@ 0x64
 800c208:	fb01 f303 	mul.w	r3, r1, r3
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	3332      	adds	r3, #50	@ 0x32
 800c212:	4a08      	ldr	r2, [pc, #32]	@ (800c234 <UART_SetConfig+0x2d4>)
 800c214:	fba2 2303 	umull	r2, r3, r2, r3
 800c218:	095b      	lsrs	r3, r3, #5
 800c21a:	f003 0207 	and.w	r2, r3, #7
 800c21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4422      	add	r2, r4
 800c226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c228:	e106      	b.n	800c438 <UART_SetConfig+0x4d8>
 800c22a:	bf00      	nop
 800c22c:	40011000 	.word	0x40011000
 800c230:	40011400 	.word	0x40011400
 800c234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c23c:	2200      	movs	r2, #0
 800c23e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c242:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c24a:	4642      	mov	r2, r8
 800c24c:	464b      	mov	r3, r9
 800c24e:	1891      	adds	r1, r2, r2
 800c250:	6239      	str	r1, [r7, #32]
 800c252:	415b      	adcs	r3, r3
 800c254:	627b      	str	r3, [r7, #36]	@ 0x24
 800c256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c25a:	4641      	mov	r1, r8
 800c25c:	1854      	adds	r4, r2, r1
 800c25e:	4649      	mov	r1, r9
 800c260:	eb43 0501 	adc.w	r5, r3, r1
 800c264:	f04f 0200 	mov.w	r2, #0
 800c268:	f04f 0300 	mov.w	r3, #0
 800c26c:	00eb      	lsls	r3, r5, #3
 800c26e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c272:	00e2      	lsls	r2, r4, #3
 800c274:	4614      	mov	r4, r2
 800c276:	461d      	mov	r5, r3
 800c278:	4643      	mov	r3, r8
 800c27a:	18e3      	adds	r3, r4, r3
 800c27c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c280:	464b      	mov	r3, r9
 800c282:	eb45 0303 	adc.w	r3, r5, r3
 800c286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c28a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c29a:	f04f 0200 	mov.w	r2, #0
 800c29e:	f04f 0300 	mov.w	r3, #0
 800c2a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	008b      	lsls	r3, r1, #2
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	008a      	lsls	r2, r1, #2
 800c2b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c2b8:	f7f4 fcd0 	bl	8000c5c <__aeabi_uldivmod>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4b60      	ldr	r3, [pc, #384]	@ (800c444 <UART_SetConfig+0x4e4>)
 800c2c2:	fba3 2302 	umull	r2, r3, r3, r2
 800c2c6:	095b      	lsrs	r3, r3, #5
 800c2c8:	011c      	lsls	r4, r3, #4
 800c2ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c2d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c2d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c2dc:	4642      	mov	r2, r8
 800c2de:	464b      	mov	r3, r9
 800c2e0:	1891      	adds	r1, r2, r2
 800c2e2:	61b9      	str	r1, [r7, #24]
 800c2e4:	415b      	adcs	r3, r3
 800c2e6:	61fb      	str	r3, [r7, #28]
 800c2e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c2ec:	4641      	mov	r1, r8
 800c2ee:	1851      	adds	r1, r2, r1
 800c2f0:	6139      	str	r1, [r7, #16]
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	414b      	adcs	r3, r1
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	f04f 0200 	mov.w	r2, #0
 800c2fc:	f04f 0300 	mov.w	r3, #0
 800c300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c304:	4659      	mov	r1, fp
 800c306:	00cb      	lsls	r3, r1, #3
 800c308:	4651      	mov	r1, sl
 800c30a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c30e:	4651      	mov	r1, sl
 800c310:	00ca      	lsls	r2, r1, #3
 800c312:	4610      	mov	r0, r2
 800c314:	4619      	mov	r1, r3
 800c316:	4603      	mov	r3, r0
 800c318:	4642      	mov	r2, r8
 800c31a:	189b      	adds	r3, r3, r2
 800c31c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c320:	464b      	mov	r3, r9
 800c322:	460a      	mov	r2, r1
 800c324:	eb42 0303 	adc.w	r3, r2, r3
 800c328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c336:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c338:	f04f 0200 	mov.w	r2, #0
 800c33c:	f04f 0300 	mov.w	r3, #0
 800c340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c344:	4649      	mov	r1, r9
 800c346:	008b      	lsls	r3, r1, #2
 800c348:	4641      	mov	r1, r8
 800c34a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c34e:	4641      	mov	r1, r8
 800c350:	008a      	lsls	r2, r1, #2
 800c352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c356:	f7f4 fc81 	bl	8000c5c <__aeabi_uldivmod>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4611      	mov	r1, r2
 800c360:	4b38      	ldr	r3, [pc, #224]	@ (800c444 <UART_SetConfig+0x4e4>)
 800c362:	fba3 2301 	umull	r2, r3, r3, r1
 800c366:	095b      	lsrs	r3, r3, #5
 800c368:	2264      	movs	r2, #100	@ 0x64
 800c36a:	fb02 f303 	mul.w	r3, r2, r3
 800c36e:	1acb      	subs	r3, r1, r3
 800c370:	011b      	lsls	r3, r3, #4
 800c372:	3332      	adds	r3, #50	@ 0x32
 800c374:	4a33      	ldr	r2, [pc, #204]	@ (800c444 <UART_SetConfig+0x4e4>)
 800c376:	fba2 2303 	umull	r2, r3, r2, r3
 800c37a:	095b      	lsrs	r3, r3, #5
 800c37c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c380:	441c      	add	r4, r3
 800c382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c386:	2200      	movs	r2, #0
 800c388:	673b      	str	r3, [r7, #112]	@ 0x70
 800c38a:	677a      	str	r2, [r7, #116]	@ 0x74
 800c38c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c390:	4642      	mov	r2, r8
 800c392:	464b      	mov	r3, r9
 800c394:	1891      	adds	r1, r2, r2
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	415b      	adcs	r3, r3
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3a0:	4641      	mov	r1, r8
 800c3a2:	1851      	adds	r1, r2, r1
 800c3a4:	6039      	str	r1, [r7, #0]
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	414b      	adcs	r3, r1
 800c3aa:	607b      	str	r3, [r7, #4]
 800c3ac:	f04f 0200 	mov.w	r2, #0
 800c3b0:	f04f 0300 	mov.w	r3, #0
 800c3b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c3b8:	4659      	mov	r1, fp
 800c3ba:	00cb      	lsls	r3, r1, #3
 800c3bc:	4651      	mov	r1, sl
 800c3be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3c2:	4651      	mov	r1, sl
 800c3c4:	00ca      	lsls	r2, r1, #3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4642      	mov	r2, r8
 800c3ce:	189b      	adds	r3, r3, r2
 800c3d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3d2:	464b      	mov	r3, r9
 800c3d4:	460a      	mov	r2, r1
 800c3d6:	eb42 0303 	adc.w	r3, r2, r3
 800c3da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c3e6:	667a      	str	r2, [r7, #100]	@ 0x64
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	f04f 0300 	mov.w	r3, #0
 800c3f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c3f4:	4649      	mov	r1, r9
 800c3f6:	008b      	lsls	r3, r1, #2
 800c3f8:	4641      	mov	r1, r8
 800c3fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3fe:	4641      	mov	r1, r8
 800c400:	008a      	lsls	r2, r1, #2
 800c402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c406:	f7f4 fc29 	bl	8000c5c <__aeabi_uldivmod>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4b0d      	ldr	r3, [pc, #52]	@ (800c444 <UART_SetConfig+0x4e4>)
 800c410:	fba3 1302 	umull	r1, r3, r3, r2
 800c414:	095b      	lsrs	r3, r3, #5
 800c416:	2164      	movs	r1, #100	@ 0x64
 800c418:	fb01 f303 	mul.w	r3, r1, r3
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	011b      	lsls	r3, r3, #4
 800c420:	3332      	adds	r3, #50	@ 0x32
 800c422:	4a08      	ldr	r2, [pc, #32]	@ (800c444 <UART_SetConfig+0x4e4>)
 800c424:	fba2 2303 	umull	r2, r3, r2, r3
 800c428:	095b      	lsrs	r3, r3, #5
 800c42a:	f003 020f 	and.w	r2, r3, #15
 800c42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4422      	add	r2, r4
 800c436:	609a      	str	r2, [r3, #8]
}
 800c438:	bf00      	nop
 800c43a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c43e:	46bd      	mov	sp, r7
 800c440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c444:	51eb851f 	.word	0x51eb851f

0800c448 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800c448:	b480      	push	{r7}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	6812      	ldr	r2, [r2, #0]
 800c460:	f023 0101 	bic.w	r1, r3, #1
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	2b08      	cmp	r3, #8
 800c470:	d102      	bne.n	800c478 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c472:	2340      	movs	r3, #64	@ 0x40
 800c474:	617b      	str	r3, [r7, #20]
 800c476:	e001      	b.n	800c47c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c478:	2300      	movs	r3, #0
 800c47a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800c488:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800c48e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800c494:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800c49a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800c4a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800c4a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800c4ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800c4b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800c4b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	699b      	ldr	r3, [r3, #24]
 800c4c6:	693a      	ldr	r2, [r7, #16]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800c4d6:	4b10      	ldr	r3, [pc, #64]	@ (800c518 <FSMC_NORSRAM_Init+0xd0>)
 800c4d8:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c4e0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800c4e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	43db      	mvns	r3, r3
 800c4f8:	ea02 0103 	and.w	r1, r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	4319      	orrs	r1, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	371c      	adds	r7, #28
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr
 800c518:	0008fb7f 	.word	0x0008fb7f

0800c51c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c532:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	011b      	lsls	r3, r3, #4
 800c540:	431a      	orrs	r2, r3
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	021b      	lsls	r3, r3, #8
 800c548:	431a      	orrs	r2, r3
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	041b      	lsls	r3, r3, #16
 800c550:	431a      	orrs	r2, r3
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	3b01      	subs	r3, #1
 800c558:	051b      	lsls	r3, r3, #20
 800c55a:	431a      	orrs	r2, r3
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	695b      	ldr	r3, [r3, #20]
 800c560:	3b02      	subs	r3, #2
 800c562:	061b      	lsls	r3, r3, #24
 800c564:	431a      	orrs	r2, r3
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	3201      	adds	r2, #1
 800c570:	4319      	orrs	r1, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
	...

0800c588 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c59c:	d11d      	bne.n	800c5da <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c5a6:	4b13      	ldr	r3, [pc, #76]	@ (800c5f4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	6811      	ldr	r1, [r2, #0]
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	6852      	ldr	r2, [r2, #4]
 800c5b2:	0112      	lsls	r2, r2, #4
 800c5b4:	4311      	orrs	r1, r2
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	6892      	ldr	r2, [r2, #8]
 800c5ba:	0212      	lsls	r2, r2, #8
 800c5bc:	4311      	orrs	r1, r2
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	6992      	ldr	r2, [r2, #24]
 800c5c2:	4311      	orrs	r1, r2
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	68d2      	ldr	r2, [r2, #12]
 800c5c8:	0412      	lsls	r2, r2, #16
 800c5ca:	430a      	orrs	r2, r1
 800c5cc:	ea43 0102 	orr.w	r1, r3, r2
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c5d8:	e005      	b.n	800c5e6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800c5e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	cff00000 	.word	0xcff00000

0800c5f8 <sqrtf>:
 800c5f8:	b508      	push	{r3, lr}
 800c5fa:	ed2d 8b02 	vpush	{d8}
 800c5fe:	eeb0 8a40 	vmov.f32	s16, s0
 800c602:	f000 f817 	bl	800c634 <__ieee754_sqrtf>
 800c606:	eeb4 8a48 	vcmp.f32	s16, s16
 800c60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60e:	d60c      	bvs.n	800c62a <sqrtf+0x32>
 800c610:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c630 <sqrtf+0x38>
 800c614:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c61c:	d505      	bpl.n	800c62a <sqrtf+0x32>
 800c61e:	f001 f9f5 	bl	800da0c <__errno>
 800c622:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c626:	2321      	movs	r3, #33	@ 0x21
 800c628:	6003      	str	r3, [r0, #0]
 800c62a:	ecbd 8b02 	vpop	{d8}
 800c62e:	bd08      	pop	{r3, pc}
 800c630:	00000000 	.word	0x00000000

0800c634 <__ieee754_sqrtf>:
 800c634:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c638:	4770      	bx	lr
	...

0800c63c <round>:
 800c63c:	ec51 0b10 	vmov	r0, r1, d0
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800c646:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800c64a:	2a13      	cmp	r2, #19
 800c64c:	460b      	mov	r3, r1
 800c64e:	4605      	mov	r5, r0
 800c650:	dc1b      	bgt.n	800c68a <round+0x4e>
 800c652:	2a00      	cmp	r2, #0
 800c654:	da0b      	bge.n	800c66e <round+0x32>
 800c656:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800c65a:	3201      	adds	r2, #1
 800c65c:	bf04      	itt	eq
 800c65e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c662:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c666:	2200      	movs	r2, #0
 800c668:	4619      	mov	r1, r3
 800c66a:	4610      	mov	r0, r2
 800c66c:	e015      	b.n	800c69a <round+0x5e>
 800c66e:	4c15      	ldr	r4, [pc, #84]	@ (800c6c4 <round+0x88>)
 800c670:	4114      	asrs	r4, r2
 800c672:	ea04 0601 	and.w	r6, r4, r1
 800c676:	4306      	orrs	r6, r0
 800c678:	d00f      	beq.n	800c69a <round+0x5e>
 800c67a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c67e:	fa41 f202 	asr.w	r2, r1, r2
 800c682:	4413      	add	r3, r2
 800c684:	ea23 0304 	bic.w	r3, r3, r4
 800c688:	e7ed      	b.n	800c666 <round+0x2a>
 800c68a:	2a33      	cmp	r2, #51	@ 0x33
 800c68c:	dd08      	ble.n	800c6a0 <round+0x64>
 800c68e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c692:	d102      	bne.n	800c69a <round+0x5e>
 800c694:	4602      	mov	r2, r0
 800c696:	f7f3 fdf9 	bl	800028c <__adddf3>
 800c69a:	ec41 0b10 	vmov	d0, r0, r1
 800c69e:	bd70      	pop	{r4, r5, r6, pc}
 800c6a0:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800c6a4:	f04f 34ff 	mov.w	r4, #4294967295
 800c6a8:	40f4      	lsrs	r4, r6
 800c6aa:	4204      	tst	r4, r0
 800c6ac:	d0f5      	beq.n	800c69a <round+0x5e>
 800c6ae:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	408a      	lsls	r2, r1
 800c6b6:	1952      	adds	r2, r2, r5
 800c6b8:	bf28      	it	cs
 800c6ba:	3301      	addcs	r3, #1
 800c6bc:	ea22 0204 	bic.w	r2, r2, r4
 800c6c0:	e7d2      	b.n	800c668 <round+0x2c>
 800c6c2:	bf00      	nop
 800c6c4:	000fffff 	.word	0x000fffff

0800c6c8 <atof>:
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	f000 bef5 	b.w	800d4b8 <strtod>

0800c6ce <atoi>:
 800c6ce:	220a      	movs	r2, #10
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	f000 bf79 	b.w	800d5c8 <strtol>
	...

0800c6d8 <malloc>:
 800c6d8:	4b02      	ldr	r3, [pc, #8]	@ (800c6e4 <malloc+0xc>)
 800c6da:	4601      	mov	r1, r0
 800c6dc:	6818      	ldr	r0, [r3, #0]
 800c6de:	f000 b825 	b.w	800c72c <_malloc_r>
 800c6e2:	bf00      	nop
 800c6e4:	200001e4 	.word	0x200001e4

0800c6e8 <sbrk_aligned>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	4e0f      	ldr	r6, [pc, #60]	@ (800c728 <sbrk_aligned+0x40>)
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	6831      	ldr	r1, [r6, #0]
 800c6f0:	4605      	mov	r5, r0
 800c6f2:	b911      	cbnz	r1, 800c6fa <sbrk_aligned+0x12>
 800c6f4:	f001 f968 	bl	800d9c8 <_sbrk_r>
 800c6f8:	6030      	str	r0, [r6, #0]
 800c6fa:	4621      	mov	r1, r4
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	f001 f963 	bl	800d9c8 <_sbrk_r>
 800c702:	1c43      	adds	r3, r0, #1
 800c704:	d103      	bne.n	800c70e <sbrk_aligned+0x26>
 800c706:	f04f 34ff 	mov.w	r4, #4294967295
 800c70a:	4620      	mov	r0, r4
 800c70c:	bd70      	pop	{r4, r5, r6, pc}
 800c70e:	1cc4      	adds	r4, r0, #3
 800c710:	f024 0403 	bic.w	r4, r4, #3
 800c714:	42a0      	cmp	r0, r4
 800c716:	d0f8      	beq.n	800c70a <sbrk_aligned+0x22>
 800c718:	1a21      	subs	r1, r4, r0
 800c71a:	4628      	mov	r0, r5
 800c71c:	f001 f954 	bl	800d9c8 <_sbrk_r>
 800c720:	3001      	adds	r0, #1
 800c722:	d1f2      	bne.n	800c70a <sbrk_aligned+0x22>
 800c724:	e7ef      	b.n	800c706 <sbrk_aligned+0x1e>
 800c726:	bf00      	nop
 800c728:	2000164c 	.word	0x2000164c

0800c72c <_malloc_r>:
 800c72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c730:	1ccd      	adds	r5, r1, #3
 800c732:	f025 0503 	bic.w	r5, r5, #3
 800c736:	3508      	adds	r5, #8
 800c738:	2d0c      	cmp	r5, #12
 800c73a:	bf38      	it	cc
 800c73c:	250c      	movcc	r5, #12
 800c73e:	2d00      	cmp	r5, #0
 800c740:	4606      	mov	r6, r0
 800c742:	db01      	blt.n	800c748 <_malloc_r+0x1c>
 800c744:	42a9      	cmp	r1, r5
 800c746:	d904      	bls.n	800c752 <_malloc_r+0x26>
 800c748:	230c      	movs	r3, #12
 800c74a:	6033      	str	r3, [r6, #0]
 800c74c:	2000      	movs	r0, #0
 800c74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c828 <_malloc_r+0xfc>
 800c756:	f000 f869 	bl	800c82c <__malloc_lock>
 800c75a:	f8d8 3000 	ldr.w	r3, [r8]
 800c75e:	461c      	mov	r4, r3
 800c760:	bb44      	cbnz	r4, 800c7b4 <_malloc_r+0x88>
 800c762:	4629      	mov	r1, r5
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff ffbf 	bl	800c6e8 <sbrk_aligned>
 800c76a:	1c43      	adds	r3, r0, #1
 800c76c:	4604      	mov	r4, r0
 800c76e:	d158      	bne.n	800c822 <_malloc_r+0xf6>
 800c770:	f8d8 4000 	ldr.w	r4, [r8]
 800c774:	4627      	mov	r7, r4
 800c776:	2f00      	cmp	r7, #0
 800c778:	d143      	bne.n	800c802 <_malloc_r+0xd6>
 800c77a:	2c00      	cmp	r4, #0
 800c77c:	d04b      	beq.n	800c816 <_malloc_r+0xea>
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	4639      	mov	r1, r7
 800c782:	4630      	mov	r0, r6
 800c784:	eb04 0903 	add.w	r9, r4, r3
 800c788:	f001 f91e 	bl	800d9c8 <_sbrk_r>
 800c78c:	4581      	cmp	r9, r0
 800c78e:	d142      	bne.n	800c816 <_malloc_r+0xea>
 800c790:	6821      	ldr	r1, [r4, #0]
 800c792:	1a6d      	subs	r5, r5, r1
 800c794:	4629      	mov	r1, r5
 800c796:	4630      	mov	r0, r6
 800c798:	f7ff ffa6 	bl	800c6e8 <sbrk_aligned>
 800c79c:	3001      	adds	r0, #1
 800c79e:	d03a      	beq.n	800c816 <_malloc_r+0xea>
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	442b      	add	r3, r5
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c7aa:	685a      	ldr	r2, [r3, #4]
 800c7ac:	bb62      	cbnz	r2, 800c808 <_malloc_r+0xdc>
 800c7ae:	f8c8 7000 	str.w	r7, [r8]
 800c7b2:	e00f      	b.n	800c7d4 <_malloc_r+0xa8>
 800c7b4:	6822      	ldr	r2, [r4, #0]
 800c7b6:	1b52      	subs	r2, r2, r5
 800c7b8:	d420      	bmi.n	800c7fc <_malloc_r+0xd0>
 800c7ba:	2a0b      	cmp	r2, #11
 800c7bc:	d917      	bls.n	800c7ee <_malloc_r+0xc2>
 800c7be:	1961      	adds	r1, r4, r5
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	6025      	str	r5, [r4, #0]
 800c7c4:	bf18      	it	ne
 800c7c6:	6059      	strne	r1, [r3, #4]
 800c7c8:	6863      	ldr	r3, [r4, #4]
 800c7ca:	bf08      	it	eq
 800c7cc:	f8c8 1000 	streq.w	r1, [r8]
 800c7d0:	5162      	str	r2, [r4, r5]
 800c7d2:	604b      	str	r3, [r1, #4]
 800c7d4:	4630      	mov	r0, r6
 800c7d6:	f000 f82f 	bl	800c838 <__malloc_unlock>
 800c7da:	f104 000b 	add.w	r0, r4, #11
 800c7de:	1d23      	adds	r3, r4, #4
 800c7e0:	f020 0007 	bic.w	r0, r0, #7
 800c7e4:	1ac2      	subs	r2, r0, r3
 800c7e6:	bf1c      	itt	ne
 800c7e8:	1a1b      	subne	r3, r3, r0
 800c7ea:	50a3      	strne	r3, [r4, r2]
 800c7ec:	e7af      	b.n	800c74e <_malloc_r+0x22>
 800c7ee:	6862      	ldr	r2, [r4, #4]
 800c7f0:	42a3      	cmp	r3, r4
 800c7f2:	bf0c      	ite	eq
 800c7f4:	f8c8 2000 	streq.w	r2, [r8]
 800c7f8:	605a      	strne	r2, [r3, #4]
 800c7fa:	e7eb      	b.n	800c7d4 <_malloc_r+0xa8>
 800c7fc:	4623      	mov	r3, r4
 800c7fe:	6864      	ldr	r4, [r4, #4]
 800c800:	e7ae      	b.n	800c760 <_malloc_r+0x34>
 800c802:	463c      	mov	r4, r7
 800c804:	687f      	ldr	r7, [r7, #4]
 800c806:	e7b6      	b.n	800c776 <_malloc_r+0x4a>
 800c808:	461a      	mov	r2, r3
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	42a3      	cmp	r3, r4
 800c80e:	d1fb      	bne.n	800c808 <_malloc_r+0xdc>
 800c810:	2300      	movs	r3, #0
 800c812:	6053      	str	r3, [r2, #4]
 800c814:	e7de      	b.n	800c7d4 <_malloc_r+0xa8>
 800c816:	230c      	movs	r3, #12
 800c818:	6033      	str	r3, [r6, #0]
 800c81a:	4630      	mov	r0, r6
 800c81c:	f000 f80c 	bl	800c838 <__malloc_unlock>
 800c820:	e794      	b.n	800c74c <_malloc_r+0x20>
 800c822:	6005      	str	r5, [r0, #0]
 800c824:	e7d6      	b.n	800c7d4 <_malloc_r+0xa8>
 800c826:	bf00      	nop
 800c828:	20001650 	.word	0x20001650

0800c82c <__malloc_lock>:
 800c82c:	4801      	ldr	r0, [pc, #4]	@ (800c834 <__malloc_lock+0x8>)
 800c82e:	f001 b918 	b.w	800da62 <__retarget_lock_acquire_recursive>
 800c832:	bf00      	nop
 800c834:	20001794 	.word	0x20001794

0800c838 <__malloc_unlock>:
 800c838:	4801      	ldr	r0, [pc, #4]	@ (800c840 <__malloc_unlock+0x8>)
 800c83a:	f001 b913 	b.w	800da64 <__retarget_lock_release_recursive>
 800c83e:	bf00      	nop
 800c840:	20001794 	.word	0x20001794

0800c844 <realloc>:
 800c844:	4b02      	ldr	r3, [pc, #8]	@ (800c850 <realloc+0xc>)
 800c846:	460a      	mov	r2, r1
 800c848:	4601      	mov	r1, r0
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	f000 b802 	b.w	800c854 <_realloc_r>
 800c850:	200001e4 	.word	0x200001e4

0800c854 <_realloc_r>:
 800c854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c858:	4680      	mov	r8, r0
 800c85a:	4615      	mov	r5, r2
 800c85c:	460c      	mov	r4, r1
 800c85e:	b921      	cbnz	r1, 800c86a <_realloc_r+0x16>
 800c860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c864:	4611      	mov	r1, r2
 800c866:	f7ff bf61 	b.w	800c72c <_malloc_r>
 800c86a:	b92a      	cbnz	r2, 800c878 <_realloc_r+0x24>
 800c86c:	f001 f91c 	bl	800daa8 <_free_r>
 800c870:	2400      	movs	r4, #0
 800c872:	4620      	mov	r0, r4
 800c874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c878:	f002 f95e 	bl	800eb38 <_malloc_usable_size_r>
 800c87c:	4285      	cmp	r5, r0
 800c87e:	4606      	mov	r6, r0
 800c880:	d802      	bhi.n	800c888 <_realloc_r+0x34>
 800c882:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c886:	d8f4      	bhi.n	800c872 <_realloc_r+0x1e>
 800c888:	4629      	mov	r1, r5
 800c88a:	4640      	mov	r0, r8
 800c88c:	f7ff ff4e 	bl	800c72c <_malloc_r>
 800c890:	4607      	mov	r7, r0
 800c892:	2800      	cmp	r0, #0
 800c894:	d0ec      	beq.n	800c870 <_realloc_r+0x1c>
 800c896:	42b5      	cmp	r5, r6
 800c898:	462a      	mov	r2, r5
 800c89a:	4621      	mov	r1, r4
 800c89c:	bf28      	it	cs
 800c89e:	4632      	movcs	r2, r6
 800c8a0:	f001 f8e9 	bl	800da76 <memcpy>
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	f001 f8fe 	bl	800daa8 <_free_r>
 800c8ac:	463c      	mov	r4, r7
 800c8ae:	e7e0      	b.n	800c872 <_realloc_r+0x1e>

0800c8b0 <sulp>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	ec45 4b10 	vmov	d0, r4, r5
 800c8ba:	4616      	mov	r6, r2
 800c8bc:	f001 fffe 	bl	800e8bc <__ulp>
 800c8c0:	ec51 0b10 	vmov	r0, r1, d0
 800c8c4:	b17e      	cbz	r6, 800c8e6 <sulp+0x36>
 800c8c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c8ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dd09      	ble.n	800c8e6 <sulp+0x36>
 800c8d2:	051b      	lsls	r3, r3, #20
 800c8d4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c8d8:	2400      	movs	r4, #0
 800c8da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c8de:	4622      	mov	r2, r4
 800c8e0:	462b      	mov	r3, r5
 800c8e2:	f7f3 fe89 	bl	80005f8 <__aeabi_dmul>
 800c8e6:	ec41 0b10 	vmov	d0, r0, r1
 800c8ea:	bd70      	pop	{r4, r5, r6, pc}
 800c8ec:	0000      	movs	r0, r0
	...

0800c8f0 <_strtod_l>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	b09f      	sub	sp, #124	@ 0x7c
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c8fe:	9005      	str	r0, [sp, #20]
 800c900:	f04f 0a00 	mov.w	sl, #0
 800c904:	f04f 0b00 	mov.w	fp, #0
 800c908:	460a      	mov	r2, r1
 800c90a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c90c:	7811      	ldrb	r1, [r2, #0]
 800c90e:	292b      	cmp	r1, #43	@ 0x2b
 800c910:	d04a      	beq.n	800c9a8 <_strtod_l+0xb8>
 800c912:	d838      	bhi.n	800c986 <_strtod_l+0x96>
 800c914:	290d      	cmp	r1, #13
 800c916:	d832      	bhi.n	800c97e <_strtod_l+0x8e>
 800c918:	2908      	cmp	r1, #8
 800c91a:	d832      	bhi.n	800c982 <_strtod_l+0x92>
 800c91c:	2900      	cmp	r1, #0
 800c91e:	d03b      	beq.n	800c998 <_strtod_l+0xa8>
 800c920:	2200      	movs	r2, #0
 800c922:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c924:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c926:	782a      	ldrb	r2, [r5, #0]
 800c928:	2a30      	cmp	r2, #48	@ 0x30
 800c92a:	f040 80b3 	bne.w	800ca94 <_strtod_l+0x1a4>
 800c92e:	786a      	ldrb	r2, [r5, #1]
 800c930:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c934:	2a58      	cmp	r2, #88	@ 0x58
 800c936:	d16e      	bne.n	800ca16 <_strtod_l+0x126>
 800c938:	9302      	str	r3, [sp, #8]
 800c93a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	4a8e      	ldr	r2, [pc, #568]	@ (800cb7c <_strtod_l+0x28c>)
 800c944:	9805      	ldr	r0, [sp, #20]
 800c946:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c948:	a919      	add	r1, sp, #100	@ 0x64
 800c94a:	f001 f95f 	bl	800dc0c <__gethex>
 800c94e:	f010 060f 	ands.w	r6, r0, #15
 800c952:	4604      	mov	r4, r0
 800c954:	d005      	beq.n	800c962 <_strtod_l+0x72>
 800c956:	2e06      	cmp	r6, #6
 800c958:	d128      	bne.n	800c9ac <_strtod_l+0xbc>
 800c95a:	3501      	adds	r5, #1
 800c95c:	2300      	movs	r3, #0
 800c95e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c960:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c962:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c964:	2b00      	cmp	r3, #0
 800c966:	f040 858e 	bne.w	800d486 <_strtod_l+0xb96>
 800c96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c96c:	b1cb      	cbz	r3, 800c9a2 <_strtod_l+0xb2>
 800c96e:	4652      	mov	r2, sl
 800c970:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c974:	ec43 2b10 	vmov	d0, r2, r3
 800c978:	b01f      	add	sp, #124	@ 0x7c
 800c97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97e:	2920      	cmp	r1, #32
 800c980:	d1ce      	bne.n	800c920 <_strtod_l+0x30>
 800c982:	3201      	adds	r2, #1
 800c984:	e7c1      	b.n	800c90a <_strtod_l+0x1a>
 800c986:	292d      	cmp	r1, #45	@ 0x2d
 800c988:	d1ca      	bne.n	800c920 <_strtod_l+0x30>
 800c98a:	2101      	movs	r1, #1
 800c98c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c98e:	1c51      	adds	r1, r2, #1
 800c990:	9119      	str	r1, [sp, #100]	@ 0x64
 800c992:	7852      	ldrb	r2, [r2, #1]
 800c994:	2a00      	cmp	r2, #0
 800c996:	d1c5      	bne.n	800c924 <_strtod_l+0x34>
 800c998:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c99a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f040 8570 	bne.w	800d482 <_strtod_l+0xb92>
 800c9a2:	4652      	mov	r2, sl
 800c9a4:	465b      	mov	r3, fp
 800c9a6:	e7e5      	b.n	800c974 <_strtod_l+0x84>
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	e7ef      	b.n	800c98c <_strtod_l+0x9c>
 800c9ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9ae:	b13a      	cbz	r2, 800c9c0 <_strtod_l+0xd0>
 800c9b0:	2135      	movs	r1, #53	@ 0x35
 800c9b2:	a81c      	add	r0, sp, #112	@ 0x70
 800c9b4:	f002 f87c 	bl	800eab0 <__copybits>
 800c9b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9ba:	9805      	ldr	r0, [sp, #20]
 800c9bc:	f001 fc4a 	bl	800e254 <_Bfree>
 800c9c0:	3e01      	subs	r6, #1
 800c9c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c9c4:	2e04      	cmp	r6, #4
 800c9c6:	d806      	bhi.n	800c9d6 <_strtod_l+0xe6>
 800c9c8:	e8df f006 	tbb	[pc, r6]
 800c9cc:	201d0314 	.word	0x201d0314
 800c9d0:	14          	.byte	0x14
 800c9d1:	00          	.byte	0x00
 800c9d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c9d6:	05e1      	lsls	r1, r4, #23
 800c9d8:	bf48      	it	mi
 800c9da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c9de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9e2:	0d1b      	lsrs	r3, r3, #20
 800c9e4:	051b      	lsls	r3, r3, #20
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1bb      	bne.n	800c962 <_strtod_l+0x72>
 800c9ea:	f001 f80f 	bl	800da0c <__errno>
 800c9ee:	2322      	movs	r3, #34	@ 0x22
 800c9f0:	6003      	str	r3, [r0, #0]
 800c9f2:	e7b6      	b.n	800c962 <_strtod_l+0x72>
 800c9f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c9f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c9fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ca00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca04:	e7e7      	b.n	800c9d6 <_strtod_l+0xe6>
 800ca06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cb84 <_strtod_l+0x294>
 800ca0a:	e7e4      	b.n	800c9d6 <_strtod_l+0xe6>
 800ca0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca10:	f04f 3aff 	mov.w	sl, #4294967295
 800ca14:	e7df      	b.n	800c9d6 <_strtod_l+0xe6>
 800ca16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca18:	1c5a      	adds	r2, r3, #1
 800ca1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca1c:	785b      	ldrb	r3, [r3, #1]
 800ca1e:	2b30      	cmp	r3, #48	@ 0x30
 800ca20:	d0f9      	beq.n	800ca16 <_strtod_l+0x126>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d09d      	beq.n	800c962 <_strtod_l+0x72>
 800ca26:	2301      	movs	r3, #1
 800ca28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca2e:	2300      	movs	r3, #0
 800ca30:	9308      	str	r3, [sp, #32]
 800ca32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca34:	461f      	mov	r7, r3
 800ca36:	220a      	movs	r2, #10
 800ca38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ca3a:	7805      	ldrb	r5, [r0, #0]
 800ca3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ca40:	b2d9      	uxtb	r1, r3
 800ca42:	2909      	cmp	r1, #9
 800ca44:	d928      	bls.n	800ca98 <_strtod_l+0x1a8>
 800ca46:	494e      	ldr	r1, [pc, #312]	@ (800cb80 <_strtod_l+0x290>)
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f000 ff4e 	bl	800d8ea <strncmp>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d032      	beq.n	800cab8 <_strtod_l+0x1c8>
 800ca52:	2000      	movs	r0, #0
 800ca54:	462a      	mov	r2, r5
 800ca56:	4681      	mov	r9, r0
 800ca58:	463d      	mov	r5, r7
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2a65      	cmp	r2, #101	@ 0x65
 800ca5e:	d001      	beq.n	800ca64 <_strtod_l+0x174>
 800ca60:	2a45      	cmp	r2, #69	@ 0x45
 800ca62:	d114      	bne.n	800ca8e <_strtod_l+0x19e>
 800ca64:	b91d      	cbnz	r5, 800ca6e <_strtod_l+0x17e>
 800ca66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca68:	4302      	orrs	r2, r0
 800ca6a:	d095      	beq.n	800c998 <_strtod_l+0xa8>
 800ca6c:	2500      	movs	r5, #0
 800ca6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ca70:	1c62      	adds	r2, r4, #1
 800ca72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca74:	7862      	ldrb	r2, [r4, #1]
 800ca76:	2a2b      	cmp	r2, #43	@ 0x2b
 800ca78:	d077      	beq.n	800cb6a <_strtod_l+0x27a>
 800ca7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ca7c:	d07b      	beq.n	800cb76 <_strtod_l+0x286>
 800ca7e:	f04f 0c00 	mov.w	ip, #0
 800ca82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ca86:	2909      	cmp	r1, #9
 800ca88:	f240 8082 	bls.w	800cb90 <_strtod_l+0x2a0>
 800ca8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca8e:	f04f 0800 	mov.w	r8, #0
 800ca92:	e0a2      	b.n	800cbda <_strtod_l+0x2ea>
 800ca94:	2300      	movs	r3, #0
 800ca96:	e7c7      	b.n	800ca28 <_strtod_l+0x138>
 800ca98:	2f08      	cmp	r7, #8
 800ca9a:	bfd5      	itete	le
 800ca9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ca9e:	9908      	ldrgt	r1, [sp, #32]
 800caa0:	fb02 3301 	mlale	r3, r2, r1, r3
 800caa4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800caa8:	f100 0001 	add.w	r0, r0, #1
 800caac:	bfd4      	ite	le
 800caae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cab0:	9308      	strgt	r3, [sp, #32]
 800cab2:	3701      	adds	r7, #1
 800cab4:	9019      	str	r0, [sp, #100]	@ 0x64
 800cab6:	e7bf      	b.n	800ca38 <_strtod_l+0x148>
 800cab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	9219      	str	r2, [sp, #100]	@ 0x64
 800cabe:	785a      	ldrb	r2, [r3, #1]
 800cac0:	b37f      	cbz	r7, 800cb22 <_strtod_l+0x232>
 800cac2:	4681      	mov	r9, r0
 800cac4:	463d      	mov	r5, r7
 800cac6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800caca:	2b09      	cmp	r3, #9
 800cacc:	d912      	bls.n	800caf4 <_strtod_l+0x204>
 800cace:	2301      	movs	r3, #1
 800cad0:	e7c4      	b.n	800ca5c <_strtod_l+0x16c>
 800cad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cad4:	1c5a      	adds	r2, r3, #1
 800cad6:	9219      	str	r2, [sp, #100]	@ 0x64
 800cad8:	785a      	ldrb	r2, [r3, #1]
 800cada:	3001      	adds	r0, #1
 800cadc:	2a30      	cmp	r2, #48	@ 0x30
 800cade:	d0f8      	beq.n	800cad2 <_strtod_l+0x1e2>
 800cae0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cae4:	2b08      	cmp	r3, #8
 800cae6:	f200 84d3 	bhi.w	800d490 <_strtod_l+0xba0>
 800caea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caec:	930c      	str	r3, [sp, #48]	@ 0x30
 800caee:	4681      	mov	r9, r0
 800caf0:	2000      	movs	r0, #0
 800caf2:	4605      	mov	r5, r0
 800caf4:	3a30      	subs	r2, #48	@ 0x30
 800caf6:	f100 0301 	add.w	r3, r0, #1
 800cafa:	d02a      	beq.n	800cb52 <_strtod_l+0x262>
 800cafc:	4499      	add	r9, r3
 800cafe:	eb00 0c05 	add.w	ip, r0, r5
 800cb02:	462b      	mov	r3, r5
 800cb04:	210a      	movs	r1, #10
 800cb06:	4563      	cmp	r3, ip
 800cb08:	d10d      	bne.n	800cb26 <_strtod_l+0x236>
 800cb0a:	1c69      	adds	r1, r5, #1
 800cb0c:	4401      	add	r1, r0
 800cb0e:	4428      	add	r0, r5
 800cb10:	2808      	cmp	r0, #8
 800cb12:	dc16      	bgt.n	800cb42 <_strtod_l+0x252>
 800cb14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb16:	230a      	movs	r3, #10
 800cb18:	fb03 2300 	mla	r3, r3, r0, r2
 800cb1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb1e:	2300      	movs	r3, #0
 800cb20:	e018      	b.n	800cb54 <_strtod_l+0x264>
 800cb22:	4638      	mov	r0, r7
 800cb24:	e7da      	b.n	800cadc <_strtod_l+0x1ec>
 800cb26:	2b08      	cmp	r3, #8
 800cb28:	f103 0301 	add.w	r3, r3, #1
 800cb2c:	dc03      	bgt.n	800cb36 <_strtod_l+0x246>
 800cb2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cb30:	434e      	muls	r6, r1
 800cb32:	960a      	str	r6, [sp, #40]	@ 0x28
 800cb34:	e7e7      	b.n	800cb06 <_strtod_l+0x216>
 800cb36:	2b10      	cmp	r3, #16
 800cb38:	bfde      	ittt	le
 800cb3a:	9e08      	ldrle	r6, [sp, #32]
 800cb3c:	434e      	mulle	r6, r1
 800cb3e:	9608      	strle	r6, [sp, #32]
 800cb40:	e7e1      	b.n	800cb06 <_strtod_l+0x216>
 800cb42:	280f      	cmp	r0, #15
 800cb44:	dceb      	bgt.n	800cb1e <_strtod_l+0x22e>
 800cb46:	9808      	ldr	r0, [sp, #32]
 800cb48:	230a      	movs	r3, #10
 800cb4a:	fb03 2300 	mla	r3, r3, r0, r2
 800cb4e:	9308      	str	r3, [sp, #32]
 800cb50:	e7e5      	b.n	800cb1e <_strtod_l+0x22e>
 800cb52:	4629      	mov	r1, r5
 800cb54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb56:	1c50      	adds	r0, r2, #1
 800cb58:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb5a:	7852      	ldrb	r2, [r2, #1]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	460d      	mov	r5, r1
 800cb60:	e7b1      	b.n	800cac6 <_strtod_l+0x1d6>
 800cb62:	f04f 0900 	mov.w	r9, #0
 800cb66:	2301      	movs	r3, #1
 800cb68:	e77d      	b.n	800ca66 <_strtod_l+0x176>
 800cb6a:	f04f 0c00 	mov.w	ip, #0
 800cb6e:	1ca2      	adds	r2, r4, #2
 800cb70:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb72:	78a2      	ldrb	r2, [r4, #2]
 800cb74:	e785      	b.n	800ca82 <_strtod_l+0x192>
 800cb76:	f04f 0c01 	mov.w	ip, #1
 800cb7a:	e7f8      	b.n	800cb6e <_strtod_l+0x27e>
 800cb7c:	08062138 	.word	0x08062138
 800cb80:	08062114 	.word	0x08062114
 800cb84:	7ff00000 	.word	0x7ff00000
 800cb88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb8a:	1c51      	adds	r1, r2, #1
 800cb8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb8e:	7852      	ldrb	r2, [r2, #1]
 800cb90:	2a30      	cmp	r2, #48	@ 0x30
 800cb92:	d0f9      	beq.n	800cb88 <_strtod_l+0x298>
 800cb94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cb98:	2908      	cmp	r1, #8
 800cb9a:	f63f af78 	bhi.w	800ca8e <_strtod_l+0x19e>
 800cb9e:	3a30      	subs	r2, #48	@ 0x30
 800cba0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cba2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cba4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cba6:	f04f 080a 	mov.w	r8, #10
 800cbaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbac:	1c56      	adds	r6, r2, #1
 800cbae:	9619      	str	r6, [sp, #100]	@ 0x64
 800cbb0:	7852      	ldrb	r2, [r2, #1]
 800cbb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cbb6:	f1be 0f09 	cmp.w	lr, #9
 800cbba:	d939      	bls.n	800cc30 <_strtod_l+0x340>
 800cbbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cbbe:	1a76      	subs	r6, r6, r1
 800cbc0:	2e08      	cmp	r6, #8
 800cbc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cbc6:	dc03      	bgt.n	800cbd0 <_strtod_l+0x2e0>
 800cbc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cbca:	4588      	cmp	r8, r1
 800cbcc:	bfa8      	it	ge
 800cbce:	4688      	movge	r8, r1
 800cbd0:	f1bc 0f00 	cmp.w	ip, #0
 800cbd4:	d001      	beq.n	800cbda <_strtod_l+0x2ea>
 800cbd6:	f1c8 0800 	rsb	r8, r8, #0
 800cbda:	2d00      	cmp	r5, #0
 800cbdc:	d14e      	bne.n	800cc7c <_strtod_l+0x38c>
 800cbde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbe0:	4308      	orrs	r0, r1
 800cbe2:	f47f aebe 	bne.w	800c962 <_strtod_l+0x72>
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f47f aed6 	bne.w	800c998 <_strtod_l+0xa8>
 800cbec:	2a69      	cmp	r2, #105	@ 0x69
 800cbee:	d028      	beq.n	800cc42 <_strtod_l+0x352>
 800cbf0:	dc25      	bgt.n	800cc3e <_strtod_l+0x34e>
 800cbf2:	2a49      	cmp	r2, #73	@ 0x49
 800cbf4:	d025      	beq.n	800cc42 <_strtod_l+0x352>
 800cbf6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cbf8:	f47f aece 	bne.w	800c998 <_strtod_l+0xa8>
 800cbfc:	499b      	ldr	r1, [pc, #620]	@ (800ce6c <_strtod_l+0x57c>)
 800cbfe:	a819      	add	r0, sp, #100	@ 0x64
 800cc00:	f001 fa26 	bl	800e050 <__match>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	f43f aec7 	beq.w	800c998 <_strtod_l+0xa8>
 800cc0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	2b28      	cmp	r3, #40	@ 0x28
 800cc10:	d12e      	bne.n	800cc70 <_strtod_l+0x380>
 800cc12:	4997      	ldr	r1, [pc, #604]	@ (800ce70 <_strtod_l+0x580>)
 800cc14:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc16:	a819      	add	r0, sp, #100	@ 0x64
 800cc18:	f001 fa2e 	bl	800e078 <__hexnan>
 800cc1c:	2805      	cmp	r0, #5
 800cc1e:	d127      	bne.n	800cc70 <_strtod_l+0x380>
 800cc20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cc26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cc2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cc2e:	e698      	b.n	800c962 <_strtod_l+0x72>
 800cc30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc32:	fb08 2101 	mla	r1, r8, r1, r2
 800cc36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cc3a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc3c:	e7b5      	b.n	800cbaa <_strtod_l+0x2ba>
 800cc3e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cc40:	e7da      	b.n	800cbf8 <_strtod_l+0x308>
 800cc42:	498c      	ldr	r1, [pc, #560]	@ (800ce74 <_strtod_l+0x584>)
 800cc44:	a819      	add	r0, sp, #100	@ 0x64
 800cc46:	f001 fa03 	bl	800e050 <__match>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	f43f aea4 	beq.w	800c998 <_strtod_l+0xa8>
 800cc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc52:	4989      	ldr	r1, [pc, #548]	@ (800ce78 <_strtod_l+0x588>)
 800cc54:	3b01      	subs	r3, #1
 800cc56:	a819      	add	r0, sp, #100	@ 0x64
 800cc58:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc5a:	f001 f9f9 	bl	800e050 <__match>
 800cc5e:	b910      	cbnz	r0, 800cc66 <_strtod_l+0x376>
 800cc60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc62:	3301      	adds	r3, #1
 800cc64:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ce88 <_strtod_l+0x598>
 800cc6a:	f04f 0a00 	mov.w	sl, #0
 800cc6e:	e678      	b.n	800c962 <_strtod_l+0x72>
 800cc70:	4882      	ldr	r0, [pc, #520]	@ (800ce7c <_strtod_l+0x58c>)
 800cc72:	f000 ff11 	bl	800da98 <nan>
 800cc76:	ec5b ab10 	vmov	sl, fp, d0
 800cc7a:	e672      	b.n	800c962 <_strtod_l+0x72>
 800cc7c:	eba8 0309 	sub.w	r3, r8, r9
 800cc80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc82:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc84:	2f00      	cmp	r7, #0
 800cc86:	bf08      	it	eq
 800cc88:	462f      	moveq	r7, r5
 800cc8a:	2d10      	cmp	r5, #16
 800cc8c:	462c      	mov	r4, r5
 800cc8e:	bfa8      	it	ge
 800cc90:	2410      	movge	r4, #16
 800cc92:	f7f3 fc37 	bl	8000504 <__aeabi_ui2d>
 800cc96:	2d09      	cmp	r5, #9
 800cc98:	4682      	mov	sl, r0
 800cc9a:	468b      	mov	fp, r1
 800cc9c:	dc13      	bgt.n	800ccc6 <_strtod_l+0x3d6>
 800cc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f43f ae5e 	beq.w	800c962 <_strtod_l+0x72>
 800cca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cca8:	dd78      	ble.n	800cd9c <_strtod_l+0x4ac>
 800ccaa:	2b16      	cmp	r3, #22
 800ccac:	dc5f      	bgt.n	800cd6e <_strtod_l+0x47e>
 800ccae:	4974      	ldr	r1, [pc, #464]	@ (800ce80 <_strtod_l+0x590>)
 800ccb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ccb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccb8:	4652      	mov	r2, sl
 800ccba:	465b      	mov	r3, fp
 800ccbc:	f7f3 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ccc0:	4682      	mov	sl, r0
 800ccc2:	468b      	mov	fp, r1
 800ccc4:	e64d      	b.n	800c962 <_strtod_l+0x72>
 800ccc6:	4b6e      	ldr	r3, [pc, #440]	@ (800ce80 <_strtod_l+0x590>)
 800ccc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cccc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ccd0:	f7f3 fc92 	bl	80005f8 <__aeabi_dmul>
 800ccd4:	4682      	mov	sl, r0
 800ccd6:	9808      	ldr	r0, [sp, #32]
 800ccd8:	468b      	mov	fp, r1
 800ccda:	f7f3 fc13 	bl	8000504 <__aeabi_ui2d>
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
 800cce2:	4650      	mov	r0, sl
 800cce4:	4659      	mov	r1, fp
 800cce6:	f7f3 fad1 	bl	800028c <__adddf3>
 800ccea:	2d0f      	cmp	r5, #15
 800ccec:	4682      	mov	sl, r0
 800ccee:	468b      	mov	fp, r1
 800ccf0:	ddd5      	ble.n	800cc9e <_strtod_l+0x3ae>
 800ccf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccf4:	1b2c      	subs	r4, r5, r4
 800ccf6:	441c      	add	r4, r3
 800ccf8:	2c00      	cmp	r4, #0
 800ccfa:	f340 8096 	ble.w	800ce2a <_strtod_l+0x53a>
 800ccfe:	f014 030f 	ands.w	r3, r4, #15
 800cd02:	d00a      	beq.n	800cd1a <_strtod_l+0x42a>
 800cd04:	495e      	ldr	r1, [pc, #376]	@ (800ce80 <_strtod_l+0x590>)
 800cd06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd0a:	4652      	mov	r2, sl
 800cd0c:	465b      	mov	r3, fp
 800cd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd12:	f7f3 fc71 	bl	80005f8 <__aeabi_dmul>
 800cd16:	4682      	mov	sl, r0
 800cd18:	468b      	mov	fp, r1
 800cd1a:	f034 040f 	bics.w	r4, r4, #15
 800cd1e:	d073      	beq.n	800ce08 <_strtod_l+0x518>
 800cd20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cd24:	dd48      	ble.n	800cdb8 <_strtod_l+0x4c8>
 800cd26:	2400      	movs	r4, #0
 800cd28:	46a0      	mov	r8, r4
 800cd2a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd2c:	46a1      	mov	r9, r4
 800cd2e:	9a05      	ldr	r2, [sp, #20]
 800cd30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ce88 <_strtod_l+0x598>
 800cd34:	2322      	movs	r3, #34	@ 0x22
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	f04f 0a00 	mov.w	sl, #0
 800cd3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f43f ae0f 	beq.w	800c962 <_strtod_l+0x72>
 800cd44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd46:	9805      	ldr	r0, [sp, #20]
 800cd48:	f001 fa84 	bl	800e254 <_Bfree>
 800cd4c:	9805      	ldr	r0, [sp, #20]
 800cd4e:	4649      	mov	r1, r9
 800cd50:	f001 fa80 	bl	800e254 <_Bfree>
 800cd54:	9805      	ldr	r0, [sp, #20]
 800cd56:	4641      	mov	r1, r8
 800cd58:	f001 fa7c 	bl	800e254 <_Bfree>
 800cd5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd5e:	9805      	ldr	r0, [sp, #20]
 800cd60:	f001 fa78 	bl	800e254 <_Bfree>
 800cd64:	9805      	ldr	r0, [sp, #20]
 800cd66:	4621      	mov	r1, r4
 800cd68:	f001 fa74 	bl	800e254 <_Bfree>
 800cd6c:	e5f9      	b.n	800c962 <_strtod_l+0x72>
 800cd6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cd74:	4293      	cmp	r3, r2
 800cd76:	dbbc      	blt.n	800ccf2 <_strtod_l+0x402>
 800cd78:	4c41      	ldr	r4, [pc, #260]	@ (800ce80 <_strtod_l+0x590>)
 800cd7a:	f1c5 050f 	rsb	r5, r5, #15
 800cd7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cd82:	4652      	mov	r2, sl
 800cd84:	465b      	mov	r3, fp
 800cd86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd8a:	f7f3 fc35 	bl	80005f8 <__aeabi_dmul>
 800cd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd90:	1b5d      	subs	r5, r3, r5
 800cd92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cd96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd9a:	e78f      	b.n	800ccbc <_strtod_l+0x3cc>
 800cd9c:	3316      	adds	r3, #22
 800cd9e:	dba8      	blt.n	800ccf2 <_strtod_l+0x402>
 800cda0:	4b37      	ldr	r3, [pc, #220]	@ (800ce80 <_strtod_l+0x590>)
 800cda2:	eba9 0808 	sub.w	r8, r9, r8
 800cda6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cdaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cdae:	4650      	mov	r0, sl
 800cdb0:	4659      	mov	r1, fp
 800cdb2:	f7f3 fd4b 	bl	800084c <__aeabi_ddiv>
 800cdb6:	e783      	b.n	800ccc0 <_strtod_l+0x3d0>
 800cdb8:	4b32      	ldr	r3, [pc, #200]	@ (800ce84 <_strtod_l+0x594>)
 800cdba:	9308      	str	r3, [sp, #32]
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	1124      	asrs	r4, r4, #4
 800cdc0:	4650      	mov	r0, sl
 800cdc2:	4659      	mov	r1, fp
 800cdc4:	461e      	mov	r6, r3
 800cdc6:	2c01      	cmp	r4, #1
 800cdc8:	dc21      	bgt.n	800ce0e <_strtod_l+0x51e>
 800cdca:	b10b      	cbz	r3, 800cdd0 <_strtod_l+0x4e0>
 800cdcc:	4682      	mov	sl, r0
 800cdce:	468b      	mov	fp, r1
 800cdd0:	492c      	ldr	r1, [pc, #176]	@ (800ce84 <_strtod_l+0x594>)
 800cdd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cdd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cdda:	4652      	mov	r2, sl
 800cddc:	465b      	mov	r3, fp
 800cdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cde2:	f7f3 fc09 	bl	80005f8 <__aeabi_dmul>
 800cde6:	4b28      	ldr	r3, [pc, #160]	@ (800ce88 <_strtod_l+0x598>)
 800cde8:	460a      	mov	r2, r1
 800cdea:	400b      	ands	r3, r1
 800cdec:	4927      	ldr	r1, [pc, #156]	@ (800ce8c <_strtod_l+0x59c>)
 800cdee:	428b      	cmp	r3, r1
 800cdf0:	4682      	mov	sl, r0
 800cdf2:	d898      	bhi.n	800cd26 <_strtod_l+0x436>
 800cdf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cdf8:	428b      	cmp	r3, r1
 800cdfa:	bf86      	itte	hi
 800cdfc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ce90 <_strtod_l+0x5a0>
 800ce00:	f04f 3aff 	movhi.w	sl, #4294967295
 800ce04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ce08:	2300      	movs	r3, #0
 800ce0a:	9308      	str	r3, [sp, #32]
 800ce0c:	e07a      	b.n	800cf04 <_strtod_l+0x614>
 800ce0e:	07e2      	lsls	r2, r4, #31
 800ce10:	d505      	bpl.n	800ce1e <_strtod_l+0x52e>
 800ce12:	9b08      	ldr	r3, [sp, #32]
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 fbee 	bl	80005f8 <__aeabi_dmul>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	9a08      	ldr	r2, [sp, #32]
 800ce20:	3208      	adds	r2, #8
 800ce22:	3601      	adds	r6, #1
 800ce24:	1064      	asrs	r4, r4, #1
 800ce26:	9208      	str	r2, [sp, #32]
 800ce28:	e7cd      	b.n	800cdc6 <_strtod_l+0x4d6>
 800ce2a:	d0ed      	beq.n	800ce08 <_strtod_l+0x518>
 800ce2c:	4264      	negs	r4, r4
 800ce2e:	f014 020f 	ands.w	r2, r4, #15
 800ce32:	d00a      	beq.n	800ce4a <_strtod_l+0x55a>
 800ce34:	4b12      	ldr	r3, [pc, #72]	@ (800ce80 <_strtod_l+0x590>)
 800ce36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce3a:	4650      	mov	r0, sl
 800ce3c:	4659      	mov	r1, fp
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fd03 	bl	800084c <__aeabi_ddiv>
 800ce46:	4682      	mov	sl, r0
 800ce48:	468b      	mov	fp, r1
 800ce4a:	1124      	asrs	r4, r4, #4
 800ce4c:	d0dc      	beq.n	800ce08 <_strtod_l+0x518>
 800ce4e:	2c1f      	cmp	r4, #31
 800ce50:	dd20      	ble.n	800ce94 <_strtod_l+0x5a4>
 800ce52:	2400      	movs	r4, #0
 800ce54:	46a0      	mov	r8, r4
 800ce56:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce58:	46a1      	mov	r9, r4
 800ce5a:	9a05      	ldr	r2, [sp, #20]
 800ce5c:	2322      	movs	r3, #34	@ 0x22
 800ce5e:	f04f 0a00 	mov.w	sl, #0
 800ce62:	f04f 0b00 	mov.w	fp, #0
 800ce66:	6013      	str	r3, [r2, #0]
 800ce68:	e768      	b.n	800cd3c <_strtod_l+0x44c>
 800ce6a:	bf00      	nop
 800ce6c:	0806211f 	.word	0x0806211f
 800ce70:	08062124 	.word	0x08062124
 800ce74:	08062116 	.word	0x08062116
 800ce78:	08062119 	.word	0x08062119
 800ce7c:	080624e9 	.word	0x080624e9
 800ce80:	08062398 	.word	0x08062398
 800ce84:	08062370 	.word	0x08062370
 800ce88:	7ff00000 	.word	0x7ff00000
 800ce8c:	7ca00000 	.word	0x7ca00000
 800ce90:	7fefffff 	.word	0x7fefffff
 800ce94:	f014 0310 	ands.w	r3, r4, #16
 800ce98:	bf18      	it	ne
 800ce9a:	236a      	movne	r3, #106	@ 0x6a
 800ce9c:	4ea9      	ldr	r6, [pc, #676]	@ (800d144 <_strtod_l+0x854>)
 800ce9e:	9308      	str	r3, [sp, #32]
 800cea0:	4650      	mov	r0, sl
 800cea2:	4659      	mov	r1, fp
 800cea4:	2300      	movs	r3, #0
 800cea6:	07e2      	lsls	r2, r4, #31
 800cea8:	d504      	bpl.n	800ceb4 <_strtod_l+0x5c4>
 800ceaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ceae:	f7f3 fba3 	bl	80005f8 <__aeabi_dmul>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	1064      	asrs	r4, r4, #1
 800ceb6:	f106 0608 	add.w	r6, r6, #8
 800ceba:	d1f4      	bne.n	800cea6 <_strtod_l+0x5b6>
 800cebc:	b10b      	cbz	r3, 800cec2 <_strtod_l+0x5d2>
 800cebe:	4682      	mov	sl, r0
 800cec0:	468b      	mov	fp, r1
 800cec2:	9b08      	ldr	r3, [sp, #32]
 800cec4:	b1b3      	cbz	r3, 800cef4 <_strtod_l+0x604>
 800cec6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ceca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cece:	2b00      	cmp	r3, #0
 800ced0:	4659      	mov	r1, fp
 800ced2:	dd0f      	ble.n	800cef4 <_strtod_l+0x604>
 800ced4:	2b1f      	cmp	r3, #31
 800ced6:	dd55      	ble.n	800cf84 <_strtod_l+0x694>
 800ced8:	2b34      	cmp	r3, #52	@ 0x34
 800ceda:	bfde      	ittt	le
 800cedc:	f04f 33ff 	movle.w	r3, #4294967295
 800cee0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cee4:	4093      	lslle	r3, r2
 800cee6:	f04f 0a00 	mov.w	sl, #0
 800ceea:	bfcc      	ite	gt
 800ceec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cef0:	ea03 0b01 	andle.w	fp, r3, r1
 800cef4:	2200      	movs	r2, #0
 800cef6:	2300      	movs	r3, #0
 800cef8:	4650      	mov	r0, sl
 800cefa:	4659      	mov	r1, fp
 800cefc:	f7f3 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d1a6      	bne.n	800ce52 <_strtod_l+0x562>
 800cf04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cf0a:	9805      	ldr	r0, [sp, #20]
 800cf0c:	462b      	mov	r3, r5
 800cf0e:	463a      	mov	r2, r7
 800cf10:	f001 fa08 	bl	800e324 <__s2b>
 800cf14:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf16:	2800      	cmp	r0, #0
 800cf18:	f43f af05 	beq.w	800cd26 <_strtod_l+0x436>
 800cf1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf1e:	2a00      	cmp	r2, #0
 800cf20:	eba9 0308 	sub.w	r3, r9, r8
 800cf24:	bfa8      	it	ge
 800cf26:	2300      	movge	r3, #0
 800cf28:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf2a:	2400      	movs	r4, #0
 800cf2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cf30:	9316      	str	r3, [sp, #88]	@ 0x58
 800cf32:	46a0      	mov	r8, r4
 800cf34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf36:	9805      	ldr	r0, [sp, #20]
 800cf38:	6859      	ldr	r1, [r3, #4]
 800cf3a:	f001 f94b 	bl	800e1d4 <_Balloc>
 800cf3e:	4681      	mov	r9, r0
 800cf40:	2800      	cmp	r0, #0
 800cf42:	f43f aef4 	beq.w	800cd2e <_strtod_l+0x43e>
 800cf46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf48:	691a      	ldr	r2, [r3, #16]
 800cf4a:	3202      	adds	r2, #2
 800cf4c:	f103 010c 	add.w	r1, r3, #12
 800cf50:	0092      	lsls	r2, r2, #2
 800cf52:	300c      	adds	r0, #12
 800cf54:	f000 fd8f 	bl	800da76 <memcpy>
 800cf58:	ec4b ab10 	vmov	d0, sl, fp
 800cf5c:	9805      	ldr	r0, [sp, #20]
 800cf5e:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf60:	a91b      	add	r1, sp, #108	@ 0x6c
 800cf62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cf66:	f001 fd19 	bl	800e99c <__d2b>
 800cf6a:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	f43f aede 	beq.w	800cd2e <_strtod_l+0x43e>
 800cf72:	9805      	ldr	r0, [sp, #20]
 800cf74:	2101      	movs	r1, #1
 800cf76:	f001 fa6b 	bl	800e450 <__i2b>
 800cf7a:	4680      	mov	r8, r0
 800cf7c:	b948      	cbnz	r0, 800cf92 <_strtod_l+0x6a2>
 800cf7e:	f04f 0800 	mov.w	r8, #0
 800cf82:	e6d4      	b.n	800cd2e <_strtod_l+0x43e>
 800cf84:	f04f 32ff 	mov.w	r2, #4294967295
 800cf88:	fa02 f303 	lsl.w	r3, r2, r3
 800cf8c:	ea03 0a0a 	and.w	sl, r3, sl
 800cf90:	e7b0      	b.n	800cef4 <_strtod_l+0x604>
 800cf92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cf94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cf96:	2d00      	cmp	r5, #0
 800cf98:	bfab      	itete	ge
 800cf9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cf9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cf9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cfa0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cfa2:	bfac      	ite	ge
 800cfa4:	18ef      	addge	r7, r5, r3
 800cfa6:	1b5e      	sublt	r6, r3, r5
 800cfa8:	9b08      	ldr	r3, [sp, #32]
 800cfaa:	1aed      	subs	r5, r5, r3
 800cfac:	4415      	add	r5, r2
 800cfae:	4b66      	ldr	r3, [pc, #408]	@ (800d148 <_strtod_l+0x858>)
 800cfb0:	3d01      	subs	r5, #1
 800cfb2:	429d      	cmp	r5, r3
 800cfb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cfb8:	da50      	bge.n	800d05c <_strtod_l+0x76c>
 800cfba:	1b5b      	subs	r3, r3, r5
 800cfbc:	2b1f      	cmp	r3, #31
 800cfbe:	eba2 0203 	sub.w	r2, r2, r3
 800cfc2:	f04f 0101 	mov.w	r1, #1
 800cfc6:	dc3d      	bgt.n	800d044 <_strtod_l+0x754>
 800cfc8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cfce:	2300      	movs	r3, #0
 800cfd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfd2:	18bd      	adds	r5, r7, r2
 800cfd4:	9b08      	ldr	r3, [sp, #32]
 800cfd6:	42af      	cmp	r7, r5
 800cfd8:	4416      	add	r6, r2
 800cfda:	441e      	add	r6, r3
 800cfdc:	463b      	mov	r3, r7
 800cfde:	bfa8      	it	ge
 800cfe0:	462b      	movge	r3, r5
 800cfe2:	42b3      	cmp	r3, r6
 800cfe4:	bfa8      	it	ge
 800cfe6:	4633      	movge	r3, r6
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	bfc2      	ittt	gt
 800cfec:	1aed      	subgt	r5, r5, r3
 800cfee:	1af6      	subgt	r6, r6, r3
 800cff0:	1aff      	subgt	r7, r7, r3
 800cff2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	dd16      	ble.n	800d026 <_strtod_l+0x736>
 800cff8:	4641      	mov	r1, r8
 800cffa:	9805      	ldr	r0, [sp, #20]
 800cffc:	461a      	mov	r2, r3
 800cffe:	f001 fae7 	bl	800e5d0 <__pow5mult>
 800d002:	4680      	mov	r8, r0
 800d004:	2800      	cmp	r0, #0
 800d006:	d0ba      	beq.n	800cf7e <_strtod_l+0x68e>
 800d008:	4601      	mov	r1, r0
 800d00a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d00c:	9805      	ldr	r0, [sp, #20]
 800d00e:	f001 fa35 	bl	800e47c <__multiply>
 800d012:	900e      	str	r0, [sp, #56]	@ 0x38
 800d014:	2800      	cmp	r0, #0
 800d016:	f43f ae8a 	beq.w	800cd2e <_strtod_l+0x43e>
 800d01a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d01c:	9805      	ldr	r0, [sp, #20]
 800d01e:	f001 f919 	bl	800e254 <_Bfree>
 800d022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d024:	931a      	str	r3, [sp, #104]	@ 0x68
 800d026:	2d00      	cmp	r5, #0
 800d028:	dc1d      	bgt.n	800d066 <_strtod_l+0x776>
 800d02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	dd23      	ble.n	800d078 <_strtod_l+0x788>
 800d030:	4649      	mov	r1, r9
 800d032:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d034:	9805      	ldr	r0, [sp, #20]
 800d036:	f001 facb 	bl	800e5d0 <__pow5mult>
 800d03a:	4681      	mov	r9, r0
 800d03c:	b9e0      	cbnz	r0, 800d078 <_strtod_l+0x788>
 800d03e:	f04f 0900 	mov.w	r9, #0
 800d042:	e674      	b.n	800cd2e <_strtod_l+0x43e>
 800d044:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d048:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d04c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d050:	35e2      	adds	r5, #226	@ 0xe2
 800d052:	fa01 f305 	lsl.w	r3, r1, r5
 800d056:	9310      	str	r3, [sp, #64]	@ 0x40
 800d058:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d05a:	e7ba      	b.n	800cfd2 <_strtod_l+0x6e2>
 800d05c:	2300      	movs	r3, #0
 800d05e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d060:	2301      	movs	r3, #1
 800d062:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d064:	e7b5      	b.n	800cfd2 <_strtod_l+0x6e2>
 800d066:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d068:	9805      	ldr	r0, [sp, #20]
 800d06a:	462a      	mov	r2, r5
 800d06c:	f001 fb0a 	bl	800e684 <__lshift>
 800d070:	901a      	str	r0, [sp, #104]	@ 0x68
 800d072:	2800      	cmp	r0, #0
 800d074:	d1d9      	bne.n	800d02a <_strtod_l+0x73a>
 800d076:	e65a      	b.n	800cd2e <_strtod_l+0x43e>
 800d078:	2e00      	cmp	r6, #0
 800d07a:	dd07      	ble.n	800d08c <_strtod_l+0x79c>
 800d07c:	4649      	mov	r1, r9
 800d07e:	9805      	ldr	r0, [sp, #20]
 800d080:	4632      	mov	r2, r6
 800d082:	f001 faff 	bl	800e684 <__lshift>
 800d086:	4681      	mov	r9, r0
 800d088:	2800      	cmp	r0, #0
 800d08a:	d0d8      	beq.n	800d03e <_strtod_l+0x74e>
 800d08c:	2f00      	cmp	r7, #0
 800d08e:	dd08      	ble.n	800d0a2 <_strtod_l+0x7b2>
 800d090:	4641      	mov	r1, r8
 800d092:	9805      	ldr	r0, [sp, #20]
 800d094:	463a      	mov	r2, r7
 800d096:	f001 faf5 	bl	800e684 <__lshift>
 800d09a:	4680      	mov	r8, r0
 800d09c:	2800      	cmp	r0, #0
 800d09e:	f43f ae46 	beq.w	800cd2e <_strtod_l+0x43e>
 800d0a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0a4:	9805      	ldr	r0, [sp, #20]
 800d0a6:	464a      	mov	r2, r9
 800d0a8:	f001 fb74 	bl	800e794 <__mdiff>
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	f43f ae3d 	beq.w	800cd2e <_strtod_l+0x43e>
 800d0b4:	68c3      	ldr	r3, [r0, #12]
 800d0b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	60c3      	str	r3, [r0, #12]
 800d0bc:	4641      	mov	r1, r8
 800d0be:	f001 fb4d 	bl	800e75c <__mcmp>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	da46      	bge.n	800d154 <_strtod_l+0x864>
 800d0c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0c8:	ea53 030a 	orrs.w	r3, r3, sl
 800d0cc:	d16c      	bne.n	800d1a8 <_strtod_l+0x8b8>
 800d0ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d168      	bne.n	800d1a8 <_strtod_l+0x8b8>
 800d0d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0da:	0d1b      	lsrs	r3, r3, #20
 800d0dc:	051b      	lsls	r3, r3, #20
 800d0de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d0e2:	d961      	bls.n	800d1a8 <_strtod_l+0x8b8>
 800d0e4:	6963      	ldr	r3, [r4, #20]
 800d0e6:	b913      	cbnz	r3, 800d0ee <_strtod_l+0x7fe>
 800d0e8:	6923      	ldr	r3, [r4, #16]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	dd5c      	ble.n	800d1a8 <_strtod_l+0x8b8>
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	9805      	ldr	r0, [sp, #20]
 800d0f4:	f001 fac6 	bl	800e684 <__lshift>
 800d0f8:	4641      	mov	r1, r8
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	f001 fb2e 	bl	800e75c <__mcmp>
 800d100:	2800      	cmp	r0, #0
 800d102:	dd51      	ble.n	800d1a8 <_strtod_l+0x8b8>
 800d104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d108:	9a08      	ldr	r2, [sp, #32]
 800d10a:	0d1b      	lsrs	r3, r3, #20
 800d10c:	051b      	lsls	r3, r3, #20
 800d10e:	2a00      	cmp	r2, #0
 800d110:	d06b      	beq.n	800d1ea <_strtod_l+0x8fa>
 800d112:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d116:	d868      	bhi.n	800d1ea <_strtod_l+0x8fa>
 800d118:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d11c:	f67f ae9d 	bls.w	800ce5a <_strtod_l+0x56a>
 800d120:	4b0a      	ldr	r3, [pc, #40]	@ (800d14c <_strtod_l+0x85c>)
 800d122:	4650      	mov	r0, sl
 800d124:	4659      	mov	r1, fp
 800d126:	2200      	movs	r2, #0
 800d128:	f7f3 fa66 	bl	80005f8 <__aeabi_dmul>
 800d12c:	4b08      	ldr	r3, [pc, #32]	@ (800d150 <_strtod_l+0x860>)
 800d12e:	400b      	ands	r3, r1
 800d130:	4682      	mov	sl, r0
 800d132:	468b      	mov	fp, r1
 800d134:	2b00      	cmp	r3, #0
 800d136:	f47f ae05 	bne.w	800cd44 <_strtod_l+0x454>
 800d13a:	9a05      	ldr	r2, [sp, #20]
 800d13c:	2322      	movs	r3, #34	@ 0x22
 800d13e:	6013      	str	r3, [r2, #0]
 800d140:	e600      	b.n	800cd44 <_strtod_l+0x454>
 800d142:	bf00      	nop
 800d144:	08062150 	.word	0x08062150
 800d148:	fffffc02 	.word	0xfffffc02
 800d14c:	39500000 	.word	0x39500000
 800d150:	7ff00000 	.word	0x7ff00000
 800d154:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d158:	d165      	bne.n	800d226 <_strtod_l+0x936>
 800d15a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d15c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d160:	b35a      	cbz	r2, 800d1ba <_strtod_l+0x8ca>
 800d162:	4a9f      	ldr	r2, [pc, #636]	@ (800d3e0 <_strtod_l+0xaf0>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d12b      	bne.n	800d1c0 <_strtod_l+0x8d0>
 800d168:	9b08      	ldr	r3, [sp, #32]
 800d16a:	4651      	mov	r1, sl
 800d16c:	b303      	cbz	r3, 800d1b0 <_strtod_l+0x8c0>
 800d16e:	4b9d      	ldr	r3, [pc, #628]	@ (800d3e4 <_strtod_l+0xaf4>)
 800d170:	465a      	mov	r2, fp
 800d172:	4013      	ands	r3, r2
 800d174:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d178:	f04f 32ff 	mov.w	r2, #4294967295
 800d17c:	d81b      	bhi.n	800d1b6 <_strtod_l+0x8c6>
 800d17e:	0d1b      	lsrs	r3, r3, #20
 800d180:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d184:	fa02 f303 	lsl.w	r3, r2, r3
 800d188:	4299      	cmp	r1, r3
 800d18a:	d119      	bne.n	800d1c0 <_strtod_l+0x8d0>
 800d18c:	4b96      	ldr	r3, [pc, #600]	@ (800d3e8 <_strtod_l+0xaf8>)
 800d18e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d190:	429a      	cmp	r2, r3
 800d192:	d102      	bne.n	800d19a <_strtod_l+0x8aa>
 800d194:	3101      	adds	r1, #1
 800d196:	f43f adca 	beq.w	800cd2e <_strtod_l+0x43e>
 800d19a:	4b92      	ldr	r3, [pc, #584]	@ (800d3e4 <_strtod_l+0xaf4>)
 800d19c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d19e:	401a      	ands	r2, r3
 800d1a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d1a4:	f04f 0a00 	mov.w	sl, #0
 800d1a8:	9b08      	ldr	r3, [sp, #32]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1b8      	bne.n	800d120 <_strtod_l+0x830>
 800d1ae:	e5c9      	b.n	800cd44 <_strtod_l+0x454>
 800d1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b4:	e7e8      	b.n	800d188 <_strtod_l+0x898>
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	e7e6      	b.n	800d188 <_strtod_l+0x898>
 800d1ba:	ea53 030a 	orrs.w	r3, r3, sl
 800d1be:	d0a1      	beq.n	800d104 <_strtod_l+0x814>
 800d1c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1c2:	b1db      	cbz	r3, 800d1fc <_strtod_l+0x90c>
 800d1c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1c6:	4213      	tst	r3, r2
 800d1c8:	d0ee      	beq.n	800d1a8 <_strtod_l+0x8b8>
 800d1ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1cc:	9a08      	ldr	r2, [sp, #32]
 800d1ce:	4650      	mov	r0, sl
 800d1d0:	4659      	mov	r1, fp
 800d1d2:	b1bb      	cbz	r3, 800d204 <_strtod_l+0x914>
 800d1d4:	f7ff fb6c 	bl	800c8b0 <sulp>
 800d1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1dc:	ec53 2b10 	vmov	r2, r3, d0
 800d1e0:	f7f3 f854 	bl	800028c <__adddf3>
 800d1e4:	4682      	mov	sl, r0
 800d1e6:	468b      	mov	fp, r1
 800d1e8:	e7de      	b.n	800d1a8 <_strtod_l+0x8b8>
 800d1ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d1ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d1f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d1f6:	f04f 3aff 	mov.w	sl, #4294967295
 800d1fa:	e7d5      	b.n	800d1a8 <_strtod_l+0x8b8>
 800d1fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1fe:	ea13 0f0a 	tst.w	r3, sl
 800d202:	e7e1      	b.n	800d1c8 <_strtod_l+0x8d8>
 800d204:	f7ff fb54 	bl	800c8b0 <sulp>
 800d208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d20c:	ec53 2b10 	vmov	r2, r3, d0
 800d210:	f7f3 f83a 	bl	8000288 <__aeabi_dsub>
 800d214:	2200      	movs	r2, #0
 800d216:	2300      	movs	r3, #0
 800d218:	4682      	mov	sl, r0
 800d21a:	468b      	mov	fp, r1
 800d21c:	f7f3 fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 800d220:	2800      	cmp	r0, #0
 800d222:	d0c1      	beq.n	800d1a8 <_strtod_l+0x8b8>
 800d224:	e619      	b.n	800ce5a <_strtod_l+0x56a>
 800d226:	4641      	mov	r1, r8
 800d228:	4620      	mov	r0, r4
 800d22a:	f001 fc0f 	bl	800ea4c <__ratio>
 800d22e:	ec57 6b10 	vmov	r6, r7, d0
 800d232:	2200      	movs	r2, #0
 800d234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d238:	4630      	mov	r0, r6
 800d23a:	4639      	mov	r1, r7
 800d23c:	f7f3 fc58 	bl	8000af0 <__aeabi_dcmple>
 800d240:	2800      	cmp	r0, #0
 800d242:	d06f      	beq.n	800d324 <_strtod_l+0xa34>
 800d244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d246:	2b00      	cmp	r3, #0
 800d248:	d17a      	bne.n	800d340 <_strtod_l+0xa50>
 800d24a:	f1ba 0f00 	cmp.w	sl, #0
 800d24e:	d158      	bne.n	800d302 <_strtod_l+0xa12>
 800d250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d256:	2b00      	cmp	r3, #0
 800d258:	d15a      	bne.n	800d310 <_strtod_l+0xa20>
 800d25a:	4b64      	ldr	r3, [pc, #400]	@ (800d3ec <_strtod_l+0xafc>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	f7f3 fc3b 	bl	8000adc <__aeabi_dcmplt>
 800d266:	2800      	cmp	r0, #0
 800d268:	d159      	bne.n	800d31e <_strtod_l+0xa2e>
 800d26a:	4630      	mov	r0, r6
 800d26c:	4639      	mov	r1, r7
 800d26e:	4b60      	ldr	r3, [pc, #384]	@ (800d3f0 <_strtod_l+0xb00>)
 800d270:	2200      	movs	r2, #0
 800d272:	f7f3 f9c1 	bl	80005f8 <__aeabi_dmul>
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d27e:	9606      	str	r6, [sp, #24]
 800d280:	9307      	str	r3, [sp, #28]
 800d282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d286:	4d57      	ldr	r5, [pc, #348]	@ (800d3e4 <_strtod_l+0xaf4>)
 800d288:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d28c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d28e:	401d      	ands	r5, r3
 800d290:	4b58      	ldr	r3, [pc, #352]	@ (800d3f4 <_strtod_l+0xb04>)
 800d292:	429d      	cmp	r5, r3
 800d294:	f040 80b2 	bne.w	800d3fc <_strtod_l+0xb0c>
 800d298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d29a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d29e:	ec4b ab10 	vmov	d0, sl, fp
 800d2a2:	f001 fb0b 	bl	800e8bc <__ulp>
 800d2a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2aa:	ec51 0b10 	vmov	r0, r1, d0
 800d2ae:	f7f3 f9a3 	bl	80005f8 <__aeabi_dmul>
 800d2b2:	4652      	mov	r2, sl
 800d2b4:	465b      	mov	r3, fp
 800d2b6:	f7f2 ffe9 	bl	800028c <__adddf3>
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	4949      	ldr	r1, [pc, #292]	@ (800d3e4 <_strtod_l+0xaf4>)
 800d2be:	4a4e      	ldr	r2, [pc, #312]	@ (800d3f8 <_strtod_l+0xb08>)
 800d2c0:	4019      	ands	r1, r3
 800d2c2:	4291      	cmp	r1, r2
 800d2c4:	4682      	mov	sl, r0
 800d2c6:	d942      	bls.n	800d34e <_strtod_l+0xa5e>
 800d2c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2ca:	4b47      	ldr	r3, [pc, #284]	@ (800d3e8 <_strtod_l+0xaf8>)
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d103      	bne.n	800d2d8 <_strtod_l+0x9e8>
 800d2d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	f43f ad2b 	beq.w	800cd2e <_strtod_l+0x43e>
 800d2d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d3e8 <_strtod_l+0xaf8>
 800d2dc:	f04f 3aff 	mov.w	sl, #4294967295
 800d2e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2e2:	9805      	ldr	r0, [sp, #20]
 800d2e4:	f000 ffb6 	bl	800e254 <_Bfree>
 800d2e8:	9805      	ldr	r0, [sp, #20]
 800d2ea:	4649      	mov	r1, r9
 800d2ec:	f000 ffb2 	bl	800e254 <_Bfree>
 800d2f0:	9805      	ldr	r0, [sp, #20]
 800d2f2:	4641      	mov	r1, r8
 800d2f4:	f000 ffae 	bl	800e254 <_Bfree>
 800d2f8:	9805      	ldr	r0, [sp, #20]
 800d2fa:	4621      	mov	r1, r4
 800d2fc:	f000 ffaa 	bl	800e254 <_Bfree>
 800d300:	e618      	b.n	800cf34 <_strtod_l+0x644>
 800d302:	f1ba 0f01 	cmp.w	sl, #1
 800d306:	d103      	bne.n	800d310 <_strtod_l+0xa20>
 800d308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f43f ada5 	beq.w	800ce5a <_strtod_l+0x56a>
 800d310:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d3c0 <_strtod_l+0xad0>
 800d314:	4f35      	ldr	r7, [pc, #212]	@ (800d3ec <_strtod_l+0xafc>)
 800d316:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d31a:	2600      	movs	r6, #0
 800d31c:	e7b1      	b.n	800d282 <_strtod_l+0x992>
 800d31e:	4f34      	ldr	r7, [pc, #208]	@ (800d3f0 <_strtod_l+0xb00>)
 800d320:	2600      	movs	r6, #0
 800d322:	e7aa      	b.n	800d27a <_strtod_l+0x98a>
 800d324:	4b32      	ldr	r3, [pc, #200]	@ (800d3f0 <_strtod_l+0xb00>)
 800d326:	4630      	mov	r0, r6
 800d328:	4639      	mov	r1, r7
 800d32a:	2200      	movs	r2, #0
 800d32c:	f7f3 f964 	bl	80005f8 <__aeabi_dmul>
 800d330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d332:	4606      	mov	r6, r0
 800d334:	460f      	mov	r7, r1
 800d336:	2b00      	cmp	r3, #0
 800d338:	d09f      	beq.n	800d27a <_strtod_l+0x98a>
 800d33a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d33e:	e7a0      	b.n	800d282 <_strtod_l+0x992>
 800d340:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d3c8 <_strtod_l+0xad8>
 800d344:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d348:	ec57 6b17 	vmov	r6, r7, d7
 800d34c:	e799      	b.n	800d282 <_strtod_l+0x992>
 800d34e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d352:	9b08      	ldr	r3, [sp, #32]
 800d354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1c1      	bne.n	800d2e0 <_strtod_l+0x9f0>
 800d35c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d360:	0d1b      	lsrs	r3, r3, #20
 800d362:	051b      	lsls	r3, r3, #20
 800d364:	429d      	cmp	r5, r3
 800d366:	d1bb      	bne.n	800d2e0 <_strtod_l+0x9f0>
 800d368:	4630      	mov	r0, r6
 800d36a:	4639      	mov	r1, r7
 800d36c:	f7f3 fc8e 	bl	8000c8c <__aeabi_d2lz>
 800d370:	f7f3 f914 	bl	800059c <__aeabi_l2d>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4630      	mov	r0, r6
 800d37a:	4639      	mov	r1, r7
 800d37c:	f7f2 ff84 	bl	8000288 <__aeabi_dsub>
 800d380:	460b      	mov	r3, r1
 800d382:	4602      	mov	r2, r0
 800d384:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d388:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d38c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d38e:	ea46 060a 	orr.w	r6, r6, sl
 800d392:	431e      	orrs	r6, r3
 800d394:	d06f      	beq.n	800d476 <_strtod_l+0xb86>
 800d396:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3d0 <_strtod_l+0xae0>)
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	f7f3 fb9e 	bl	8000adc <__aeabi_dcmplt>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	f47f accf 	bne.w	800cd44 <_strtod_l+0x454>
 800d3a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d3d8 <_strtod_l+0xae8>)
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3b0:	f7f3 fbb2 	bl	8000b18 <__aeabi_dcmpgt>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d093      	beq.n	800d2e0 <_strtod_l+0x9f0>
 800d3b8:	e4c4      	b.n	800cd44 <_strtod_l+0x454>
 800d3ba:	bf00      	nop
 800d3bc:	f3af 8000 	nop.w
 800d3c0:	00000000 	.word	0x00000000
 800d3c4:	bff00000 	.word	0xbff00000
 800d3c8:	00000000 	.word	0x00000000
 800d3cc:	3ff00000 	.word	0x3ff00000
 800d3d0:	94a03595 	.word	0x94a03595
 800d3d4:	3fdfffff 	.word	0x3fdfffff
 800d3d8:	35afe535 	.word	0x35afe535
 800d3dc:	3fe00000 	.word	0x3fe00000
 800d3e0:	000fffff 	.word	0x000fffff
 800d3e4:	7ff00000 	.word	0x7ff00000
 800d3e8:	7fefffff 	.word	0x7fefffff
 800d3ec:	3ff00000 	.word	0x3ff00000
 800d3f0:	3fe00000 	.word	0x3fe00000
 800d3f4:	7fe00000 	.word	0x7fe00000
 800d3f8:	7c9fffff 	.word	0x7c9fffff
 800d3fc:	9b08      	ldr	r3, [sp, #32]
 800d3fe:	b323      	cbz	r3, 800d44a <_strtod_l+0xb5a>
 800d400:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d404:	d821      	bhi.n	800d44a <_strtod_l+0xb5a>
 800d406:	a328      	add	r3, pc, #160	@ (adr r3, 800d4a8 <_strtod_l+0xbb8>)
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	4630      	mov	r0, r6
 800d40e:	4639      	mov	r1, r7
 800d410:	f7f3 fb6e 	bl	8000af0 <__aeabi_dcmple>
 800d414:	b1a0      	cbz	r0, 800d440 <_strtod_l+0xb50>
 800d416:	4639      	mov	r1, r7
 800d418:	4630      	mov	r0, r6
 800d41a:	f7f3 fbaf 	bl	8000b7c <__aeabi_d2uiz>
 800d41e:	2801      	cmp	r0, #1
 800d420:	bf38      	it	cc
 800d422:	2001      	movcc	r0, #1
 800d424:	f7f3 f86e 	bl	8000504 <__aeabi_ui2d>
 800d428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d42a:	4606      	mov	r6, r0
 800d42c:	460f      	mov	r7, r1
 800d42e:	b9fb      	cbnz	r3, 800d470 <_strtod_l+0xb80>
 800d430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d434:	9014      	str	r0, [sp, #80]	@ 0x50
 800d436:	9315      	str	r3, [sp, #84]	@ 0x54
 800d438:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d43c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d440:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d442:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d446:	1b5b      	subs	r3, r3, r5
 800d448:	9311      	str	r3, [sp, #68]	@ 0x44
 800d44a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d44e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d452:	f001 fa33 	bl	800e8bc <__ulp>
 800d456:	4650      	mov	r0, sl
 800d458:	ec53 2b10 	vmov	r2, r3, d0
 800d45c:	4659      	mov	r1, fp
 800d45e:	f7f3 f8cb 	bl	80005f8 <__aeabi_dmul>
 800d462:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d466:	f7f2 ff11 	bl	800028c <__adddf3>
 800d46a:	4682      	mov	sl, r0
 800d46c:	468b      	mov	fp, r1
 800d46e:	e770      	b.n	800d352 <_strtod_l+0xa62>
 800d470:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d474:	e7e0      	b.n	800d438 <_strtod_l+0xb48>
 800d476:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4b0 <_strtod_l+0xbc0>)
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	f7f3 fb2e 	bl	8000adc <__aeabi_dcmplt>
 800d480:	e798      	b.n	800d3b4 <_strtod_l+0xac4>
 800d482:	2300      	movs	r3, #0
 800d484:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d486:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d48a:	6013      	str	r3, [r2, #0]
 800d48c:	f7ff ba6d 	b.w	800c96a <_strtod_l+0x7a>
 800d490:	2a65      	cmp	r2, #101	@ 0x65
 800d492:	f43f ab66 	beq.w	800cb62 <_strtod_l+0x272>
 800d496:	2a45      	cmp	r2, #69	@ 0x45
 800d498:	f43f ab63 	beq.w	800cb62 <_strtod_l+0x272>
 800d49c:	2301      	movs	r3, #1
 800d49e:	f7ff bb9e 	b.w	800cbde <_strtod_l+0x2ee>
 800d4a2:	bf00      	nop
 800d4a4:	f3af 8000 	nop.w
 800d4a8:	ffc00000 	.word	0xffc00000
 800d4ac:	41dfffff 	.word	0x41dfffff
 800d4b0:	94a03595 	.word	0x94a03595
 800d4b4:	3fcfffff 	.word	0x3fcfffff

0800d4b8 <strtod>:
 800d4b8:	460a      	mov	r2, r1
 800d4ba:	4601      	mov	r1, r0
 800d4bc:	4802      	ldr	r0, [pc, #8]	@ (800d4c8 <strtod+0x10>)
 800d4be:	4b03      	ldr	r3, [pc, #12]	@ (800d4cc <strtod+0x14>)
 800d4c0:	6800      	ldr	r0, [r0, #0]
 800d4c2:	f7ff ba15 	b.w	800c8f0 <_strtod_l>
 800d4c6:	bf00      	nop
 800d4c8:	200001e4 	.word	0x200001e4
 800d4cc:	20000078 	.word	0x20000078

0800d4d0 <_strtol_l.constprop.0>:
 800d4d0:	2b24      	cmp	r3, #36	@ 0x24
 800d4d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d6:	4686      	mov	lr, r0
 800d4d8:	4690      	mov	r8, r2
 800d4da:	d801      	bhi.n	800d4e0 <_strtol_l.constprop.0+0x10>
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d106      	bne.n	800d4ee <_strtol_l.constprop.0+0x1e>
 800d4e0:	f000 fa94 	bl	800da0c <__errno>
 800d4e4:	2316      	movs	r3, #22
 800d4e6:	6003      	str	r3, [r0, #0]
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ee:	4834      	ldr	r0, [pc, #208]	@ (800d5c0 <_strtol_l.constprop.0+0xf0>)
 800d4f0:	460d      	mov	r5, r1
 800d4f2:	462a      	mov	r2, r5
 800d4f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4f8:	5d06      	ldrb	r6, [r0, r4]
 800d4fa:	f016 0608 	ands.w	r6, r6, #8
 800d4fe:	d1f8      	bne.n	800d4f2 <_strtol_l.constprop.0+0x22>
 800d500:	2c2d      	cmp	r4, #45	@ 0x2d
 800d502:	d12d      	bne.n	800d560 <_strtol_l.constprop.0+0x90>
 800d504:	782c      	ldrb	r4, [r5, #0]
 800d506:	2601      	movs	r6, #1
 800d508:	1c95      	adds	r5, r2, #2
 800d50a:	f033 0210 	bics.w	r2, r3, #16
 800d50e:	d109      	bne.n	800d524 <_strtol_l.constprop.0+0x54>
 800d510:	2c30      	cmp	r4, #48	@ 0x30
 800d512:	d12a      	bne.n	800d56a <_strtol_l.constprop.0+0x9a>
 800d514:	782a      	ldrb	r2, [r5, #0]
 800d516:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d51a:	2a58      	cmp	r2, #88	@ 0x58
 800d51c:	d125      	bne.n	800d56a <_strtol_l.constprop.0+0x9a>
 800d51e:	786c      	ldrb	r4, [r5, #1]
 800d520:	2310      	movs	r3, #16
 800d522:	3502      	adds	r5, #2
 800d524:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d528:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d52c:	2200      	movs	r2, #0
 800d52e:	fbbc f9f3 	udiv	r9, ip, r3
 800d532:	4610      	mov	r0, r2
 800d534:	fb03 ca19 	mls	sl, r3, r9, ip
 800d538:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d53c:	2f09      	cmp	r7, #9
 800d53e:	d81b      	bhi.n	800d578 <_strtol_l.constprop.0+0xa8>
 800d540:	463c      	mov	r4, r7
 800d542:	42a3      	cmp	r3, r4
 800d544:	dd27      	ble.n	800d596 <_strtol_l.constprop.0+0xc6>
 800d546:	1c57      	adds	r7, r2, #1
 800d548:	d007      	beq.n	800d55a <_strtol_l.constprop.0+0x8a>
 800d54a:	4581      	cmp	r9, r0
 800d54c:	d320      	bcc.n	800d590 <_strtol_l.constprop.0+0xc0>
 800d54e:	d101      	bne.n	800d554 <_strtol_l.constprop.0+0x84>
 800d550:	45a2      	cmp	sl, r4
 800d552:	db1d      	blt.n	800d590 <_strtol_l.constprop.0+0xc0>
 800d554:	fb00 4003 	mla	r0, r0, r3, r4
 800d558:	2201      	movs	r2, #1
 800d55a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d55e:	e7eb      	b.n	800d538 <_strtol_l.constprop.0+0x68>
 800d560:	2c2b      	cmp	r4, #43	@ 0x2b
 800d562:	bf04      	itt	eq
 800d564:	782c      	ldrbeq	r4, [r5, #0]
 800d566:	1c95      	addeq	r5, r2, #2
 800d568:	e7cf      	b.n	800d50a <_strtol_l.constprop.0+0x3a>
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1da      	bne.n	800d524 <_strtol_l.constprop.0+0x54>
 800d56e:	2c30      	cmp	r4, #48	@ 0x30
 800d570:	bf0c      	ite	eq
 800d572:	2308      	moveq	r3, #8
 800d574:	230a      	movne	r3, #10
 800d576:	e7d5      	b.n	800d524 <_strtol_l.constprop.0+0x54>
 800d578:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d57c:	2f19      	cmp	r7, #25
 800d57e:	d801      	bhi.n	800d584 <_strtol_l.constprop.0+0xb4>
 800d580:	3c37      	subs	r4, #55	@ 0x37
 800d582:	e7de      	b.n	800d542 <_strtol_l.constprop.0+0x72>
 800d584:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d588:	2f19      	cmp	r7, #25
 800d58a:	d804      	bhi.n	800d596 <_strtol_l.constprop.0+0xc6>
 800d58c:	3c57      	subs	r4, #87	@ 0x57
 800d58e:	e7d8      	b.n	800d542 <_strtol_l.constprop.0+0x72>
 800d590:	f04f 32ff 	mov.w	r2, #4294967295
 800d594:	e7e1      	b.n	800d55a <_strtol_l.constprop.0+0x8a>
 800d596:	1c53      	adds	r3, r2, #1
 800d598:	d108      	bne.n	800d5ac <_strtol_l.constprop.0+0xdc>
 800d59a:	2322      	movs	r3, #34	@ 0x22
 800d59c:	f8ce 3000 	str.w	r3, [lr]
 800d5a0:	4660      	mov	r0, ip
 800d5a2:	f1b8 0f00 	cmp.w	r8, #0
 800d5a6:	d0a0      	beq.n	800d4ea <_strtol_l.constprop.0+0x1a>
 800d5a8:	1e69      	subs	r1, r5, #1
 800d5aa:	e006      	b.n	800d5ba <_strtol_l.constprop.0+0xea>
 800d5ac:	b106      	cbz	r6, 800d5b0 <_strtol_l.constprop.0+0xe0>
 800d5ae:	4240      	negs	r0, r0
 800d5b0:	f1b8 0f00 	cmp.w	r8, #0
 800d5b4:	d099      	beq.n	800d4ea <_strtol_l.constprop.0+0x1a>
 800d5b6:	2a00      	cmp	r2, #0
 800d5b8:	d1f6      	bne.n	800d5a8 <_strtol_l.constprop.0+0xd8>
 800d5ba:	f8c8 1000 	str.w	r1, [r8]
 800d5be:	e794      	b.n	800d4ea <_strtol_l.constprop.0+0x1a>
 800d5c0:	08062179 	.word	0x08062179

0800d5c4 <_strtol_r>:
 800d5c4:	f7ff bf84 	b.w	800d4d0 <_strtol_l.constprop.0>

0800d5c8 <strtol>:
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	460a      	mov	r2, r1
 800d5cc:	4601      	mov	r1, r0
 800d5ce:	4802      	ldr	r0, [pc, #8]	@ (800d5d8 <strtol+0x10>)
 800d5d0:	6800      	ldr	r0, [r0, #0]
 800d5d2:	f7ff bf7d 	b.w	800d4d0 <_strtol_l.constprop.0>
 800d5d6:	bf00      	nop
 800d5d8:	200001e4 	.word	0x200001e4

0800d5dc <std>:
 800d5dc:	2300      	movs	r3, #0
 800d5de:	b510      	push	{r4, lr}
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	e9c0 3300 	strd	r3, r3, [r0]
 800d5e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5ea:	6083      	str	r3, [r0, #8]
 800d5ec:	8181      	strh	r1, [r0, #12]
 800d5ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800d5f0:	81c2      	strh	r2, [r0, #14]
 800d5f2:	6183      	str	r3, [r0, #24]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	2208      	movs	r2, #8
 800d5f8:	305c      	adds	r0, #92	@ 0x5c
 800d5fa:	f000 f961 	bl	800d8c0 <memset>
 800d5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d634 <std+0x58>)
 800d600:	6263      	str	r3, [r4, #36]	@ 0x24
 800d602:	4b0d      	ldr	r3, [pc, #52]	@ (800d638 <std+0x5c>)
 800d604:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d606:	4b0d      	ldr	r3, [pc, #52]	@ (800d63c <std+0x60>)
 800d608:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d60a:	4b0d      	ldr	r3, [pc, #52]	@ (800d640 <std+0x64>)
 800d60c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d60e:	4b0d      	ldr	r3, [pc, #52]	@ (800d644 <std+0x68>)
 800d610:	6224      	str	r4, [r4, #32]
 800d612:	429c      	cmp	r4, r3
 800d614:	d006      	beq.n	800d624 <std+0x48>
 800d616:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d61a:	4294      	cmp	r4, r2
 800d61c:	d002      	beq.n	800d624 <std+0x48>
 800d61e:	33d0      	adds	r3, #208	@ 0xd0
 800d620:	429c      	cmp	r4, r3
 800d622:	d105      	bne.n	800d630 <std+0x54>
 800d624:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d62c:	f000 ba18 	b.w	800da60 <__retarget_lock_init_recursive>
 800d630:	bd10      	pop	{r4, pc}
 800d632:	bf00      	nop
 800d634:	0800d7f5 	.word	0x0800d7f5
 800d638:	0800d81b 	.word	0x0800d81b
 800d63c:	0800d853 	.word	0x0800d853
 800d640:	0800d877 	.word	0x0800d877
 800d644:	20001654 	.word	0x20001654

0800d648 <stdio_exit_handler>:
 800d648:	4a02      	ldr	r2, [pc, #8]	@ (800d654 <stdio_exit_handler+0xc>)
 800d64a:	4903      	ldr	r1, [pc, #12]	@ (800d658 <stdio_exit_handler+0x10>)
 800d64c:	4803      	ldr	r0, [pc, #12]	@ (800d65c <stdio_exit_handler+0x14>)
 800d64e:	f000 b869 	b.w	800d724 <_fwalk_sglue>
 800d652:	bf00      	nop
 800d654:	2000006c 	.word	0x2000006c
 800d658:	0800f949 	.word	0x0800f949
 800d65c:	200001e8 	.word	0x200001e8

0800d660 <cleanup_stdio>:
 800d660:	6841      	ldr	r1, [r0, #4]
 800d662:	4b0c      	ldr	r3, [pc, #48]	@ (800d694 <cleanup_stdio+0x34>)
 800d664:	4299      	cmp	r1, r3
 800d666:	b510      	push	{r4, lr}
 800d668:	4604      	mov	r4, r0
 800d66a:	d001      	beq.n	800d670 <cleanup_stdio+0x10>
 800d66c:	f002 f96c 	bl	800f948 <_fflush_r>
 800d670:	68a1      	ldr	r1, [r4, #8]
 800d672:	4b09      	ldr	r3, [pc, #36]	@ (800d698 <cleanup_stdio+0x38>)
 800d674:	4299      	cmp	r1, r3
 800d676:	d002      	beq.n	800d67e <cleanup_stdio+0x1e>
 800d678:	4620      	mov	r0, r4
 800d67a:	f002 f965 	bl	800f948 <_fflush_r>
 800d67e:	68e1      	ldr	r1, [r4, #12]
 800d680:	4b06      	ldr	r3, [pc, #24]	@ (800d69c <cleanup_stdio+0x3c>)
 800d682:	4299      	cmp	r1, r3
 800d684:	d004      	beq.n	800d690 <cleanup_stdio+0x30>
 800d686:	4620      	mov	r0, r4
 800d688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d68c:	f002 b95c 	b.w	800f948 <_fflush_r>
 800d690:	bd10      	pop	{r4, pc}
 800d692:	bf00      	nop
 800d694:	20001654 	.word	0x20001654
 800d698:	200016bc 	.word	0x200016bc
 800d69c:	20001724 	.word	0x20001724

0800d6a0 <global_stdio_init.part.0>:
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d0 <global_stdio_init.part.0+0x30>)
 800d6a4:	4c0b      	ldr	r4, [pc, #44]	@ (800d6d4 <global_stdio_init.part.0+0x34>)
 800d6a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d6d8 <global_stdio_init.part.0+0x38>)
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	2104      	movs	r1, #4
 800d6b0:	f7ff ff94 	bl	800d5dc <std>
 800d6b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	2109      	movs	r1, #9
 800d6bc:	f7ff ff8e 	bl	800d5dc <std>
 800d6c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6ca:	2112      	movs	r1, #18
 800d6cc:	f7ff bf86 	b.w	800d5dc <std>
 800d6d0:	2000178c 	.word	0x2000178c
 800d6d4:	20001654 	.word	0x20001654
 800d6d8:	0800d649 	.word	0x0800d649

0800d6dc <__sfp_lock_acquire>:
 800d6dc:	4801      	ldr	r0, [pc, #4]	@ (800d6e4 <__sfp_lock_acquire+0x8>)
 800d6de:	f000 b9c0 	b.w	800da62 <__retarget_lock_acquire_recursive>
 800d6e2:	bf00      	nop
 800d6e4:	20001795 	.word	0x20001795

0800d6e8 <__sfp_lock_release>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	@ (800d6f0 <__sfp_lock_release+0x8>)
 800d6ea:	f000 b9bb 	b.w	800da64 <__retarget_lock_release_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	20001795 	.word	0x20001795

0800d6f4 <__sinit>:
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	f7ff fff0 	bl	800d6dc <__sfp_lock_acquire>
 800d6fc:	6a23      	ldr	r3, [r4, #32]
 800d6fe:	b11b      	cbz	r3, 800d708 <__sinit+0x14>
 800d700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d704:	f7ff bff0 	b.w	800d6e8 <__sfp_lock_release>
 800d708:	4b04      	ldr	r3, [pc, #16]	@ (800d71c <__sinit+0x28>)
 800d70a:	6223      	str	r3, [r4, #32]
 800d70c:	4b04      	ldr	r3, [pc, #16]	@ (800d720 <__sinit+0x2c>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1f5      	bne.n	800d700 <__sinit+0xc>
 800d714:	f7ff ffc4 	bl	800d6a0 <global_stdio_init.part.0>
 800d718:	e7f2      	b.n	800d700 <__sinit+0xc>
 800d71a:	bf00      	nop
 800d71c:	0800d661 	.word	0x0800d661
 800d720:	2000178c 	.word	0x2000178c

0800d724 <_fwalk_sglue>:
 800d724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d728:	4607      	mov	r7, r0
 800d72a:	4688      	mov	r8, r1
 800d72c:	4614      	mov	r4, r2
 800d72e:	2600      	movs	r6, #0
 800d730:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d734:	f1b9 0901 	subs.w	r9, r9, #1
 800d738:	d505      	bpl.n	800d746 <_fwalk_sglue+0x22>
 800d73a:	6824      	ldr	r4, [r4, #0]
 800d73c:	2c00      	cmp	r4, #0
 800d73e:	d1f7      	bne.n	800d730 <_fwalk_sglue+0xc>
 800d740:	4630      	mov	r0, r6
 800d742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d746:	89ab      	ldrh	r3, [r5, #12]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d907      	bls.n	800d75c <_fwalk_sglue+0x38>
 800d74c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d750:	3301      	adds	r3, #1
 800d752:	d003      	beq.n	800d75c <_fwalk_sglue+0x38>
 800d754:	4629      	mov	r1, r5
 800d756:	4638      	mov	r0, r7
 800d758:	47c0      	blx	r8
 800d75a:	4306      	orrs	r6, r0
 800d75c:	3568      	adds	r5, #104	@ 0x68
 800d75e:	e7e9      	b.n	800d734 <_fwalk_sglue+0x10>

0800d760 <siprintf>:
 800d760:	b40e      	push	{r1, r2, r3}
 800d762:	b500      	push	{lr}
 800d764:	b09c      	sub	sp, #112	@ 0x70
 800d766:	ab1d      	add	r3, sp, #116	@ 0x74
 800d768:	9002      	str	r0, [sp, #8]
 800d76a:	9006      	str	r0, [sp, #24]
 800d76c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d770:	4809      	ldr	r0, [pc, #36]	@ (800d798 <siprintf+0x38>)
 800d772:	9107      	str	r1, [sp, #28]
 800d774:	9104      	str	r1, [sp, #16]
 800d776:	4909      	ldr	r1, [pc, #36]	@ (800d79c <siprintf+0x3c>)
 800d778:	f853 2b04 	ldr.w	r2, [r3], #4
 800d77c:	9105      	str	r1, [sp, #20]
 800d77e:	6800      	ldr	r0, [r0, #0]
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	a902      	add	r1, sp, #8
 800d784:	f001 fab8 	bl	800ecf8 <_svfiprintf_r>
 800d788:	9b02      	ldr	r3, [sp, #8]
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	b01c      	add	sp, #112	@ 0x70
 800d790:	f85d eb04 	ldr.w	lr, [sp], #4
 800d794:	b003      	add	sp, #12
 800d796:	4770      	bx	lr
 800d798:	200001e4 	.word	0x200001e4
 800d79c:	ffff0208 	.word	0xffff0208

0800d7a0 <siscanf>:
 800d7a0:	b40e      	push	{r1, r2, r3}
 800d7a2:	b530      	push	{r4, r5, lr}
 800d7a4:	b09c      	sub	sp, #112	@ 0x70
 800d7a6:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d7a8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d7ac:	f854 5b04 	ldr.w	r5, [r4], #4
 800d7b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d7b4:	9002      	str	r0, [sp, #8]
 800d7b6:	9006      	str	r0, [sp, #24]
 800d7b8:	f7f2 fd0a 	bl	80001d0 <strlen>
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <siscanf+0x4c>)
 800d7be:	9003      	str	r0, [sp, #12]
 800d7c0:	9007      	str	r0, [sp, #28]
 800d7c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7c4:	480a      	ldr	r0, [pc, #40]	@ (800d7f0 <siscanf+0x50>)
 800d7c6:	9401      	str	r4, [sp, #4]
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7cc:	9314      	str	r3, [sp, #80]	@ 0x50
 800d7ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d7d6:	462a      	mov	r2, r5
 800d7d8:	4623      	mov	r3, r4
 800d7da:	a902      	add	r1, sp, #8
 800d7dc:	6800      	ldr	r0, [r0, #0]
 800d7de:	f001 fbdf 	bl	800efa0 <__ssvfiscanf_r>
 800d7e2:	b01c      	add	sp, #112	@ 0x70
 800d7e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7e8:	b003      	add	sp, #12
 800d7ea:	4770      	bx	lr
 800d7ec:	0800d817 	.word	0x0800d817
 800d7f0:	200001e4 	.word	0x200001e4

0800d7f4 <__sread>:
 800d7f4:	b510      	push	{r4, lr}
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7fc:	f000 f8d2 	bl	800d9a4 <_read_r>
 800d800:	2800      	cmp	r0, #0
 800d802:	bfab      	itete	ge
 800d804:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d806:	89a3      	ldrhlt	r3, [r4, #12]
 800d808:	181b      	addge	r3, r3, r0
 800d80a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d80e:	bfac      	ite	ge
 800d810:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d812:	81a3      	strhlt	r3, [r4, #12]
 800d814:	bd10      	pop	{r4, pc}

0800d816 <__seofread>:
 800d816:	2000      	movs	r0, #0
 800d818:	4770      	bx	lr

0800d81a <__swrite>:
 800d81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81e:	461f      	mov	r7, r3
 800d820:	898b      	ldrh	r3, [r1, #12]
 800d822:	05db      	lsls	r3, r3, #23
 800d824:	4605      	mov	r5, r0
 800d826:	460c      	mov	r4, r1
 800d828:	4616      	mov	r6, r2
 800d82a:	d505      	bpl.n	800d838 <__swrite+0x1e>
 800d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d830:	2302      	movs	r3, #2
 800d832:	2200      	movs	r2, #0
 800d834:	f000 f8a4 	bl	800d980 <_lseek_r>
 800d838:	89a3      	ldrh	r3, [r4, #12]
 800d83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d83e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d842:	81a3      	strh	r3, [r4, #12]
 800d844:	4632      	mov	r2, r6
 800d846:	463b      	mov	r3, r7
 800d848:	4628      	mov	r0, r5
 800d84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d84e:	f000 b8cb 	b.w	800d9e8 <_write_r>

0800d852 <__sseek>:
 800d852:	b510      	push	{r4, lr}
 800d854:	460c      	mov	r4, r1
 800d856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d85a:	f000 f891 	bl	800d980 <_lseek_r>
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	89a3      	ldrh	r3, [r4, #12]
 800d862:	bf15      	itete	ne
 800d864:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d866:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d86a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d86e:	81a3      	strheq	r3, [r4, #12]
 800d870:	bf18      	it	ne
 800d872:	81a3      	strhne	r3, [r4, #12]
 800d874:	bd10      	pop	{r4, pc}

0800d876 <__sclose>:
 800d876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d87a:	f000 b871 	b.w	800d960 <_close_r>
	...

0800d880 <_vsiprintf_r>:
 800d880:	b500      	push	{lr}
 800d882:	b09b      	sub	sp, #108	@ 0x6c
 800d884:	9100      	str	r1, [sp, #0]
 800d886:	9104      	str	r1, [sp, #16]
 800d888:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d88c:	9105      	str	r1, [sp, #20]
 800d88e:	9102      	str	r1, [sp, #8]
 800d890:	4905      	ldr	r1, [pc, #20]	@ (800d8a8 <_vsiprintf_r+0x28>)
 800d892:	9103      	str	r1, [sp, #12]
 800d894:	4669      	mov	r1, sp
 800d896:	f001 fa2f 	bl	800ecf8 <_svfiprintf_r>
 800d89a:	9b00      	ldr	r3, [sp, #0]
 800d89c:	2200      	movs	r2, #0
 800d89e:	701a      	strb	r2, [r3, #0]
 800d8a0:	b01b      	add	sp, #108	@ 0x6c
 800d8a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8a6:	bf00      	nop
 800d8a8:	ffff0208 	.word	0xffff0208

0800d8ac <vsiprintf>:
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	460a      	mov	r2, r1
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	4802      	ldr	r0, [pc, #8]	@ (800d8bc <vsiprintf+0x10>)
 800d8b4:	6800      	ldr	r0, [r0, #0]
 800d8b6:	f7ff bfe3 	b.w	800d880 <_vsiprintf_r>
 800d8ba:	bf00      	nop
 800d8bc:	200001e4 	.word	0x200001e4

0800d8c0 <memset>:
 800d8c0:	4402      	add	r2, r0
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d100      	bne.n	800d8ca <memset+0xa>
 800d8c8:	4770      	bx	lr
 800d8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d8ce:	e7f9      	b.n	800d8c4 <memset+0x4>

0800d8d0 <strchr>:
 800d8d0:	b2c9      	uxtb	r1, r1
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8da:	b112      	cbz	r2, 800d8e2 <strchr+0x12>
 800d8dc:	428a      	cmp	r2, r1
 800d8de:	d1f9      	bne.n	800d8d4 <strchr+0x4>
 800d8e0:	4770      	bx	lr
 800d8e2:	2900      	cmp	r1, #0
 800d8e4:	bf18      	it	ne
 800d8e6:	2000      	movne	r0, #0
 800d8e8:	4770      	bx	lr

0800d8ea <strncmp>:
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	b16a      	cbz	r2, 800d90a <strncmp+0x20>
 800d8ee:	3901      	subs	r1, #1
 800d8f0:	1884      	adds	r4, r0, r2
 800d8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d103      	bne.n	800d906 <strncmp+0x1c>
 800d8fe:	42a0      	cmp	r0, r4
 800d900:	d001      	beq.n	800d906 <strncmp+0x1c>
 800d902:	2a00      	cmp	r2, #0
 800d904:	d1f5      	bne.n	800d8f2 <strncmp+0x8>
 800d906:	1ad0      	subs	r0, r2, r3
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	4610      	mov	r0, r2
 800d90c:	e7fc      	b.n	800d908 <strncmp+0x1e>

0800d90e <strncpy>:
 800d90e:	b510      	push	{r4, lr}
 800d910:	3901      	subs	r1, #1
 800d912:	4603      	mov	r3, r0
 800d914:	b132      	cbz	r2, 800d924 <strncpy+0x16>
 800d916:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d91a:	f803 4b01 	strb.w	r4, [r3], #1
 800d91e:	3a01      	subs	r2, #1
 800d920:	2c00      	cmp	r4, #0
 800d922:	d1f7      	bne.n	800d914 <strncpy+0x6>
 800d924:	441a      	add	r2, r3
 800d926:	2100      	movs	r1, #0
 800d928:	4293      	cmp	r3, r2
 800d92a:	d100      	bne.n	800d92e <strncpy+0x20>
 800d92c:	bd10      	pop	{r4, pc}
 800d92e:	f803 1b01 	strb.w	r1, [r3], #1
 800d932:	e7f9      	b.n	800d928 <strncpy+0x1a>

0800d934 <strstr>:
 800d934:	780a      	ldrb	r2, [r1, #0]
 800d936:	b570      	push	{r4, r5, r6, lr}
 800d938:	b96a      	cbnz	r2, 800d956 <strstr+0x22>
 800d93a:	bd70      	pop	{r4, r5, r6, pc}
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d109      	bne.n	800d954 <strstr+0x20>
 800d940:	460c      	mov	r4, r1
 800d942:	4605      	mov	r5, r0
 800d944:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d0f6      	beq.n	800d93a <strstr+0x6>
 800d94c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d950:	429e      	cmp	r6, r3
 800d952:	d0f7      	beq.n	800d944 <strstr+0x10>
 800d954:	3001      	adds	r0, #1
 800d956:	7803      	ldrb	r3, [r0, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1ef      	bne.n	800d93c <strstr+0x8>
 800d95c:	4618      	mov	r0, r3
 800d95e:	e7ec      	b.n	800d93a <strstr+0x6>

0800d960 <_close_r>:
 800d960:	b538      	push	{r3, r4, r5, lr}
 800d962:	4d06      	ldr	r5, [pc, #24]	@ (800d97c <_close_r+0x1c>)
 800d964:	2300      	movs	r3, #0
 800d966:	4604      	mov	r4, r0
 800d968:	4608      	mov	r0, r1
 800d96a:	602b      	str	r3, [r5, #0]
 800d96c:	f7fa fb44 	bl	8007ff8 <_close>
 800d970:	1c43      	adds	r3, r0, #1
 800d972:	d102      	bne.n	800d97a <_close_r+0x1a>
 800d974:	682b      	ldr	r3, [r5, #0]
 800d976:	b103      	cbz	r3, 800d97a <_close_r+0x1a>
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
 800d97c:	20001790 	.word	0x20001790

0800d980 <_lseek_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4d07      	ldr	r5, [pc, #28]	@ (800d9a0 <_lseek_r+0x20>)
 800d984:	4604      	mov	r4, r0
 800d986:	4608      	mov	r0, r1
 800d988:	4611      	mov	r1, r2
 800d98a:	2200      	movs	r2, #0
 800d98c:	602a      	str	r2, [r5, #0]
 800d98e:	461a      	mov	r2, r3
 800d990:	f7fa fb59 	bl	8008046 <_lseek>
 800d994:	1c43      	adds	r3, r0, #1
 800d996:	d102      	bne.n	800d99e <_lseek_r+0x1e>
 800d998:	682b      	ldr	r3, [r5, #0]
 800d99a:	b103      	cbz	r3, 800d99e <_lseek_r+0x1e>
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	bd38      	pop	{r3, r4, r5, pc}
 800d9a0:	20001790 	.word	0x20001790

0800d9a4 <_read_r>:
 800d9a4:	b538      	push	{r3, r4, r5, lr}
 800d9a6:	4d07      	ldr	r5, [pc, #28]	@ (800d9c4 <_read_r+0x20>)
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	4608      	mov	r0, r1
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	602a      	str	r2, [r5, #0]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	f7fa fae7 	bl	8007f86 <_read>
 800d9b8:	1c43      	adds	r3, r0, #1
 800d9ba:	d102      	bne.n	800d9c2 <_read_r+0x1e>
 800d9bc:	682b      	ldr	r3, [r5, #0]
 800d9be:	b103      	cbz	r3, 800d9c2 <_read_r+0x1e>
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	bd38      	pop	{r3, r4, r5, pc}
 800d9c4:	20001790 	.word	0x20001790

0800d9c8 <_sbrk_r>:
 800d9c8:	b538      	push	{r3, r4, r5, lr}
 800d9ca:	4d06      	ldr	r5, [pc, #24]	@ (800d9e4 <_sbrk_r+0x1c>)
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	4608      	mov	r0, r1
 800d9d2:	602b      	str	r3, [r5, #0]
 800d9d4:	f7fa fb44 	bl	8008060 <_sbrk>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d102      	bne.n	800d9e2 <_sbrk_r+0x1a>
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	b103      	cbz	r3, 800d9e2 <_sbrk_r+0x1a>
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	20001790 	.word	0x20001790

0800d9e8 <_write_r>:
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	4d07      	ldr	r5, [pc, #28]	@ (800da08 <_write_r+0x20>)
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	4608      	mov	r0, r1
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	602a      	str	r2, [r5, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	f7fa fae2 	bl	8007fc0 <_write>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d102      	bne.n	800da06 <_write_r+0x1e>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	b103      	cbz	r3, 800da06 <_write_r+0x1e>
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	20001790 	.word	0x20001790

0800da0c <__errno>:
 800da0c:	4b01      	ldr	r3, [pc, #4]	@ (800da14 <__errno+0x8>)
 800da0e:	6818      	ldr	r0, [r3, #0]
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	200001e4 	.word	0x200001e4

0800da18 <__libc_init_array>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	4d0d      	ldr	r5, [pc, #52]	@ (800da50 <__libc_init_array+0x38>)
 800da1c:	4c0d      	ldr	r4, [pc, #52]	@ (800da54 <__libc_init_array+0x3c>)
 800da1e:	1b64      	subs	r4, r4, r5
 800da20:	10a4      	asrs	r4, r4, #2
 800da22:	2600      	movs	r6, #0
 800da24:	42a6      	cmp	r6, r4
 800da26:	d109      	bne.n	800da3c <__libc_init_array+0x24>
 800da28:	4d0b      	ldr	r5, [pc, #44]	@ (800da58 <__libc_init_array+0x40>)
 800da2a:	4c0c      	ldr	r4, [pc, #48]	@ (800da5c <__libc_init_array+0x44>)
 800da2c:	f002 fb2a 	bl	8010084 <_init>
 800da30:	1b64      	subs	r4, r4, r5
 800da32:	10a4      	asrs	r4, r4, #2
 800da34:	2600      	movs	r6, #0
 800da36:	42a6      	cmp	r6, r4
 800da38:	d105      	bne.n	800da46 <__libc_init_array+0x2e>
 800da3a:	bd70      	pop	{r4, r5, r6, pc}
 800da3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800da40:	4798      	blx	r3
 800da42:	3601      	adds	r6, #1
 800da44:	e7ee      	b.n	800da24 <__libc_init_array+0xc>
 800da46:	f855 3b04 	ldr.w	r3, [r5], #4
 800da4a:	4798      	blx	r3
 800da4c:	3601      	adds	r6, #1
 800da4e:	e7f2      	b.n	800da36 <__libc_init_array+0x1e>
 800da50:	080624f4 	.word	0x080624f4
 800da54:	080624f4 	.word	0x080624f4
 800da58:	080624f4 	.word	0x080624f4
 800da5c:	080624f8 	.word	0x080624f8

0800da60 <__retarget_lock_init_recursive>:
 800da60:	4770      	bx	lr

0800da62 <__retarget_lock_acquire_recursive>:
 800da62:	4770      	bx	lr

0800da64 <__retarget_lock_release_recursive>:
 800da64:	4770      	bx	lr

0800da66 <strcpy>:
 800da66:	4603      	mov	r3, r0
 800da68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da6c:	f803 2b01 	strb.w	r2, [r3], #1
 800da70:	2a00      	cmp	r2, #0
 800da72:	d1f9      	bne.n	800da68 <strcpy+0x2>
 800da74:	4770      	bx	lr

0800da76 <memcpy>:
 800da76:	440a      	add	r2, r1
 800da78:	4291      	cmp	r1, r2
 800da7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800da7e:	d100      	bne.n	800da82 <memcpy+0xc>
 800da80:	4770      	bx	lr
 800da82:	b510      	push	{r4, lr}
 800da84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da8c:	4291      	cmp	r1, r2
 800da8e:	d1f9      	bne.n	800da84 <memcpy+0xe>
 800da90:	bd10      	pop	{r4, pc}
 800da92:	0000      	movs	r0, r0
 800da94:	0000      	movs	r0, r0
	...

0800da98 <nan>:
 800da98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800daa0 <nan+0x8>
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	00000000 	.word	0x00000000
 800daa4:	7ff80000 	.word	0x7ff80000

0800daa8 <_free_r>:
 800daa8:	b538      	push	{r3, r4, r5, lr}
 800daaa:	4605      	mov	r5, r0
 800daac:	2900      	cmp	r1, #0
 800daae:	d041      	beq.n	800db34 <_free_r+0x8c>
 800dab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dab4:	1f0c      	subs	r4, r1, #4
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	bfb8      	it	lt
 800daba:	18e4      	addlt	r4, r4, r3
 800dabc:	f7fe feb6 	bl	800c82c <__malloc_lock>
 800dac0:	4a1d      	ldr	r2, [pc, #116]	@ (800db38 <_free_r+0x90>)
 800dac2:	6813      	ldr	r3, [r2, #0]
 800dac4:	b933      	cbnz	r3, 800dad4 <_free_r+0x2c>
 800dac6:	6063      	str	r3, [r4, #4]
 800dac8:	6014      	str	r4, [r2, #0]
 800daca:	4628      	mov	r0, r5
 800dacc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dad0:	f7fe beb2 	b.w	800c838 <__malloc_unlock>
 800dad4:	42a3      	cmp	r3, r4
 800dad6:	d908      	bls.n	800daea <_free_r+0x42>
 800dad8:	6820      	ldr	r0, [r4, #0]
 800dada:	1821      	adds	r1, r4, r0
 800dadc:	428b      	cmp	r3, r1
 800dade:	bf01      	itttt	eq
 800dae0:	6819      	ldreq	r1, [r3, #0]
 800dae2:	685b      	ldreq	r3, [r3, #4]
 800dae4:	1809      	addeq	r1, r1, r0
 800dae6:	6021      	streq	r1, [r4, #0]
 800dae8:	e7ed      	b.n	800dac6 <_free_r+0x1e>
 800daea:	461a      	mov	r2, r3
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	b10b      	cbz	r3, 800daf4 <_free_r+0x4c>
 800daf0:	42a3      	cmp	r3, r4
 800daf2:	d9fa      	bls.n	800daea <_free_r+0x42>
 800daf4:	6811      	ldr	r1, [r2, #0]
 800daf6:	1850      	adds	r0, r2, r1
 800daf8:	42a0      	cmp	r0, r4
 800dafa:	d10b      	bne.n	800db14 <_free_r+0x6c>
 800dafc:	6820      	ldr	r0, [r4, #0]
 800dafe:	4401      	add	r1, r0
 800db00:	1850      	adds	r0, r2, r1
 800db02:	4283      	cmp	r3, r0
 800db04:	6011      	str	r1, [r2, #0]
 800db06:	d1e0      	bne.n	800daca <_free_r+0x22>
 800db08:	6818      	ldr	r0, [r3, #0]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	6053      	str	r3, [r2, #4]
 800db0e:	4408      	add	r0, r1
 800db10:	6010      	str	r0, [r2, #0]
 800db12:	e7da      	b.n	800daca <_free_r+0x22>
 800db14:	d902      	bls.n	800db1c <_free_r+0x74>
 800db16:	230c      	movs	r3, #12
 800db18:	602b      	str	r3, [r5, #0]
 800db1a:	e7d6      	b.n	800daca <_free_r+0x22>
 800db1c:	6820      	ldr	r0, [r4, #0]
 800db1e:	1821      	adds	r1, r4, r0
 800db20:	428b      	cmp	r3, r1
 800db22:	bf04      	itt	eq
 800db24:	6819      	ldreq	r1, [r3, #0]
 800db26:	685b      	ldreq	r3, [r3, #4]
 800db28:	6063      	str	r3, [r4, #4]
 800db2a:	bf04      	itt	eq
 800db2c:	1809      	addeq	r1, r1, r0
 800db2e:	6021      	streq	r1, [r4, #0]
 800db30:	6054      	str	r4, [r2, #4]
 800db32:	e7ca      	b.n	800daca <_free_r+0x22>
 800db34:	bd38      	pop	{r3, r4, r5, pc}
 800db36:	bf00      	nop
 800db38:	20001650 	.word	0x20001650

0800db3c <rshift>:
 800db3c:	6903      	ldr	r3, [r0, #16]
 800db3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db4a:	f100 0414 	add.w	r4, r0, #20
 800db4e:	dd45      	ble.n	800dbdc <rshift+0xa0>
 800db50:	f011 011f 	ands.w	r1, r1, #31
 800db54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db5c:	d10c      	bne.n	800db78 <rshift+0x3c>
 800db5e:	f100 0710 	add.w	r7, r0, #16
 800db62:	4629      	mov	r1, r5
 800db64:	42b1      	cmp	r1, r6
 800db66:	d334      	bcc.n	800dbd2 <rshift+0x96>
 800db68:	1a9b      	subs	r3, r3, r2
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	1eea      	subs	r2, r5, #3
 800db6e:	4296      	cmp	r6, r2
 800db70:	bf38      	it	cc
 800db72:	2300      	movcc	r3, #0
 800db74:	4423      	add	r3, r4
 800db76:	e015      	b.n	800dba4 <rshift+0x68>
 800db78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db7c:	f1c1 0820 	rsb	r8, r1, #32
 800db80:	40cf      	lsrs	r7, r1
 800db82:	f105 0e04 	add.w	lr, r5, #4
 800db86:	46a1      	mov	r9, r4
 800db88:	4576      	cmp	r6, lr
 800db8a:	46f4      	mov	ip, lr
 800db8c:	d815      	bhi.n	800dbba <rshift+0x7e>
 800db8e:	1a9a      	subs	r2, r3, r2
 800db90:	0092      	lsls	r2, r2, #2
 800db92:	3a04      	subs	r2, #4
 800db94:	3501      	adds	r5, #1
 800db96:	42ae      	cmp	r6, r5
 800db98:	bf38      	it	cc
 800db9a:	2200      	movcc	r2, #0
 800db9c:	18a3      	adds	r3, r4, r2
 800db9e:	50a7      	str	r7, [r4, r2]
 800dba0:	b107      	cbz	r7, 800dba4 <rshift+0x68>
 800dba2:	3304      	adds	r3, #4
 800dba4:	1b1a      	subs	r2, r3, r4
 800dba6:	42a3      	cmp	r3, r4
 800dba8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dbac:	bf08      	it	eq
 800dbae:	2300      	moveq	r3, #0
 800dbb0:	6102      	str	r2, [r0, #16]
 800dbb2:	bf08      	it	eq
 800dbb4:	6143      	streq	r3, [r0, #20]
 800dbb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbba:	f8dc c000 	ldr.w	ip, [ip]
 800dbbe:	fa0c fc08 	lsl.w	ip, ip, r8
 800dbc2:	ea4c 0707 	orr.w	r7, ip, r7
 800dbc6:	f849 7b04 	str.w	r7, [r9], #4
 800dbca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dbce:	40cf      	lsrs	r7, r1
 800dbd0:	e7da      	b.n	800db88 <rshift+0x4c>
 800dbd2:	f851 cb04 	ldr.w	ip, [r1], #4
 800dbd6:	f847 cf04 	str.w	ip, [r7, #4]!
 800dbda:	e7c3      	b.n	800db64 <rshift+0x28>
 800dbdc:	4623      	mov	r3, r4
 800dbde:	e7e1      	b.n	800dba4 <rshift+0x68>

0800dbe0 <__hexdig_fun>:
 800dbe0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dbe4:	2b09      	cmp	r3, #9
 800dbe6:	d802      	bhi.n	800dbee <__hexdig_fun+0xe>
 800dbe8:	3820      	subs	r0, #32
 800dbea:	b2c0      	uxtb	r0, r0
 800dbec:	4770      	bx	lr
 800dbee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dbf2:	2b05      	cmp	r3, #5
 800dbf4:	d801      	bhi.n	800dbfa <__hexdig_fun+0x1a>
 800dbf6:	3847      	subs	r0, #71	@ 0x47
 800dbf8:	e7f7      	b.n	800dbea <__hexdig_fun+0xa>
 800dbfa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dbfe:	2b05      	cmp	r3, #5
 800dc00:	d801      	bhi.n	800dc06 <__hexdig_fun+0x26>
 800dc02:	3827      	subs	r0, #39	@ 0x27
 800dc04:	e7f1      	b.n	800dbea <__hexdig_fun+0xa>
 800dc06:	2000      	movs	r0, #0
 800dc08:	4770      	bx	lr
	...

0800dc0c <__gethex>:
 800dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	b085      	sub	sp, #20
 800dc12:	468a      	mov	sl, r1
 800dc14:	9302      	str	r3, [sp, #8]
 800dc16:	680b      	ldr	r3, [r1, #0]
 800dc18:	9001      	str	r0, [sp, #4]
 800dc1a:	4690      	mov	r8, r2
 800dc1c:	1c9c      	adds	r4, r3, #2
 800dc1e:	46a1      	mov	r9, r4
 800dc20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dc24:	2830      	cmp	r0, #48	@ 0x30
 800dc26:	d0fa      	beq.n	800dc1e <__gethex+0x12>
 800dc28:	eba9 0303 	sub.w	r3, r9, r3
 800dc2c:	f1a3 0b02 	sub.w	fp, r3, #2
 800dc30:	f7ff ffd6 	bl	800dbe0 <__hexdig_fun>
 800dc34:	4605      	mov	r5, r0
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d168      	bne.n	800dd0c <__gethex+0x100>
 800dc3a:	49a0      	ldr	r1, [pc, #640]	@ (800debc <__gethex+0x2b0>)
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	4648      	mov	r0, r9
 800dc40:	f7ff fe53 	bl	800d8ea <strncmp>
 800dc44:	4607      	mov	r7, r0
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d167      	bne.n	800dd1a <__gethex+0x10e>
 800dc4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dc4e:	4626      	mov	r6, r4
 800dc50:	f7ff ffc6 	bl	800dbe0 <__hexdig_fun>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d062      	beq.n	800dd1e <__gethex+0x112>
 800dc58:	4623      	mov	r3, r4
 800dc5a:	7818      	ldrb	r0, [r3, #0]
 800dc5c:	2830      	cmp	r0, #48	@ 0x30
 800dc5e:	4699      	mov	r9, r3
 800dc60:	f103 0301 	add.w	r3, r3, #1
 800dc64:	d0f9      	beq.n	800dc5a <__gethex+0x4e>
 800dc66:	f7ff ffbb 	bl	800dbe0 <__hexdig_fun>
 800dc6a:	fab0 f580 	clz	r5, r0
 800dc6e:	096d      	lsrs	r5, r5, #5
 800dc70:	f04f 0b01 	mov.w	fp, #1
 800dc74:	464a      	mov	r2, r9
 800dc76:	4616      	mov	r6, r2
 800dc78:	3201      	adds	r2, #1
 800dc7a:	7830      	ldrb	r0, [r6, #0]
 800dc7c:	f7ff ffb0 	bl	800dbe0 <__hexdig_fun>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d1f8      	bne.n	800dc76 <__gethex+0x6a>
 800dc84:	498d      	ldr	r1, [pc, #564]	@ (800debc <__gethex+0x2b0>)
 800dc86:	2201      	movs	r2, #1
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f7ff fe2e 	bl	800d8ea <strncmp>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d13f      	bne.n	800dd12 <__gethex+0x106>
 800dc92:	b944      	cbnz	r4, 800dca6 <__gethex+0x9a>
 800dc94:	1c74      	adds	r4, r6, #1
 800dc96:	4622      	mov	r2, r4
 800dc98:	4616      	mov	r6, r2
 800dc9a:	3201      	adds	r2, #1
 800dc9c:	7830      	ldrb	r0, [r6, #0]
 800dc9e:	f7ff ff9f 	bl	800dbe0 <__hexdig_fun>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d1f8      	bne.n	800dc98 <__gethex+0x8c>
 800dca6:	1ba4      	subs	r4, r4, r6
 800dca8:	00a7      	lsls	r7, r4, #2
 800dcaa:	7833      	ldrb	r3, [r6, #0]
 800dcac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dcb0:	2b50      	cmp	r3, #80	@ 0x50
 800dcb2:	d13e      	bne.n	800dd32 <__gethex+0x126>
 800dcb4:	7873      	ldrb	r3, [r6, #1]
 800dcb6:	2b2b      	cmp	r3, #43	@ 0x2b
 800dcb8:	d033      	beq.n	800dd22 <__gethex+0x116>
 800dcba:	2b2d      	cmp	r3, #45	@ 0x2d
 800dcbc:	d034      	beq.n	800dd28 <__gethex+0x11c>
 800dcbe:	1c71      	adds	r1, r6, #1
 800dcc0:	2400      	movs	r4, #0
 800dcc2:	7808      	ldrb	r0, [r1, #0]
 800dcc4:	f7ff ff8c 	bl	800dbe0 <__hexdig_fun>
 800dcc8:	1e43      	subs	r3, r0, #1
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b18      	cmp	r3, #24
 800dcce:	d830      	bhi.n	800dd32 <__gethex+0x126>
 800dcd0:	f1a0 0210 	sub.w	r2, r0, #16
 800dcd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dcd8:	f7ff ff82 	bl	800dbe0 <__hexdig_fun>
 800dcdc:	f100 3cff 	add.w	ip, r0, #4294967295
 800dce0:	fa5f fc8c 	uxtb.w	ip, ip
 800dce4:	f1bc 0f18 	cmp.w	ip, #24
 800dce8:	f04f 030a 	mov.w	r3, #10
 800dcec:	d91e      	bls.n	800dd2c <__gethex+0x120>
 800dcee:	b104      	cbz	r4, 800dcf2 <__gethex+0xe6>
 800dcf0:	4252      	negs	r2, r2
 800dcf2:	4417      	add	r7, r2
 800dcf4:	f8ca 1000 	str.w	r1, [sl]
 800dcf8:	b1ed      	cbz	r5, 800dd36 <__gethex+0x12a>
 800dcfa:	f1bb 0f00 	cmp.w	fp, #0
 800dcfe:	bf0c      	ite	eq
 800dd00:	2506      	moveq	r5, #6
 800dd02:	2500      	movne	r5, #0
 800dd04:	4628      	mov	r0, r5
 800dd06:	b005      	add	sp, #20
 800dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0c:	2500      	movs	r5, #0
 800dd0e:	462c      	mov	r4, r5
 800dd10:	e7b0      	b.n	800dc74 <__gethex+0x68>
 800dd12:	2c00      	cmp	r4, #0
 800dd14:	d1c7      	bne.n	800dca6 <__gethex+0x9a>
 800dd16:	4627      	mov	r7, r4
 800dd18:	e7c7      	b.n	800dcaa <__gethex+0x9e>
 800dd1a:	464e      	mov	r6, r9
 800dd1c:	462f      	mov	r7, r5
 800dd1e:	2501      	movs	r5, #1
 800dd20:	e7c3      	b.n	800dcaa <__gethex+0x9e>
 800dd22:	2400      	movs	r4, #0
 800dd24:	1cb1      	adds	r1, r6, #2
 800dd26:	e7cc      	b.n	800dcc2 <__gethex+0xb6>
 800dd28:	2401      	movs	r4, #1
 800dd2a:	e7fb      	b.n	800dd24 <__gethex+0x118>
 800dd2c:	fb03 0002 	mla	r0, r3, r2, r0
 800dd30:	e7ce      	b.n	800dcd0 <__gethex+0xc4>
 800dd32:	4631      	mov	r1, r6
 800dd34:	e7de      	b.n	800dcf4 <__gethex+0xe8>
 800dd36:	eba6 0309 	sub.w	r3, r6, r9
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	2b07      	cmp	r3, #7
 800dd40:	dc0a      	bgt.n	800dd58 <__gethex+0x14c>
 800dd42:	9801      	ldr	r0, [sp, #4]
 800dd44:	f000 fa46 	bl	800e1d4 <_Balloc>
 800dd48:	4604      	mov	r4, r0
 800dd4a:	b940      	cbnz	r0, 800dd5e <__gethex+0x152>
 800dd4c:	4b5c      	ldr	r3, [pc, #368]	@ (800dec0 <__gethex+0x2b4>)
 800dd4e:	4602      	mov	r2, r0
 800dd50:	21e4      	movs	r1, #228	@ 0xe4
 800dd52:	485c      	ldr	r0, [pc, #368]	@ (800dec4 <__gethex+0x2b8>)
 800dd54:	f001 feae 	bl	800fab4 <__assert_func>
 800dd58:	3101      	adds	r1, #1
 800dd5a:	105b      	asrs	r3, r3, #1
 800dd5c:	e7ef      	b.n	800dd3e <__gethex+0x132>
 800dd5e:	f100 0a14 	add.w	sl, r0, #20
 800dd62:	2300      	movs	r3, #0
 800dd64:	4655      	mov	r5, sl
 800dd66:	469b      	mov	fp, r3
 800dd68:	45b1      	cmp	r9, r6
 800dd6a:	d337      	bcc.n	800dddc <__gethex+0x1d0>
 800dd6c:	f845 bb04 	str.w	fp, [r5], #4
 800dd70:	eba5 050a 	sub.w	r5, r5, sl
 800dd74:	10ad      	asrs	r5, r5, #2
 800dd76:	6125      	str	r5, [r4, #16]
 800dd78:	4658      	mov	r0, fp
 800dd7a:	f000 fb1d 	bl	800e3b8 <__hi0bits>
 800dd7e:	016d      	lsls	r5, r5, #5
 800dd80:	f8d8 6000 	ldr.w	r6, [r8]
 800dd84:	1a2d      	subs	r5, r5, r0
 800dd86:	42b5      	cmp	r5, r6
 800dd88:	dd54      	ble.n	800de34 <__gethex+0x228>
 800dd8a:	1bad      	subs	r5, r5, r6
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f000 feb1 	bl	800eaf6 <__any_on>
 800dd94:	4681      	mov	r9, r0
 800dd96:	b178      	cbz	r0, 800ddb8 <__gethex+0x1ac>
 800dd98:	1e6b      	subs	r3, r5, #1
 800dd9a:	1159      	asrs	r1, r3, #5
 800dd9c:	f003 021f 	and.w	r2, r3, #31
 800dda0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dda4:	f04f 0901 	mov.w	r9, #1
 800dda8:	fa09 f202 	lsl.w	r2, r9, r2
 800ddac:	420a      	tst	r2, r1
 800ddae:	d003      	beq.n	800ddb8 <__gethex+0x1ac>
 800ddb0:	454b      	cmp	r3, r9
 800ddb2:	dc36      	bgt.n	800de22 <__gethex+0x216>
 800ddb4:	f04f 0902 	mov.w	r9, #2
 800ddb8:	4629      	mov	r1, r5
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f7ff febe 	bl	800db3c <rshift>
 800ddc0:	442f      	add	r7, r5
 800ddc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddc6:	42bb      	cmp	r3, r7
 800ddc8:	da42      	bge.n	800de50 <__gethex+0x244>
 800ddca:	9801      	ldr	r0, [sp, #4]
 800ddcc:	4621      	mov	r1, r4
 800ddce:	f000 fa41 	bl	800e254 <_Bfree>
 800ddd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	25a3      	movs	r5, #163	@ 0xa3
 800ddda:	e793      	b.n	800dd04 <__gethex+0xf8>
 800dddc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dde0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dde2:	d012      	beq.n	800de0a <__gethex+0x1fe>
 800dde4:	2b20      	cmp	r3, #32
 800dde6:	d104      	bne.n	800ddf2 <__gethex+0x1e6>
 800dde8:	f845 bb04 	str.w	fp, [r5], #4
 800ddec:	f04f 0b00 	mov.w	fp, #0
 800ddf0:	465b      	mov	r3, fp
 800ddf2:	7830      	ldrb	r0, [r6, #0]
 800ddf4:	9303      	str	r3, [sp, #12]
 800ddf6:	f7ff fef3 	bl	800dbe0 <__hexdig_fun>
 800ddfa:	9b03      	ldr	r3, [sp, #12]
 800ddfc:	f000 000f 	and.w	r0, r0, #15
 800de00:	4098      	lsls	r0, r3
 800de02:	ea4b 0b00 	orr.w	fp, fp, r0
 800de06:	3304      	adds	r3, #4
 800de08:	e7ae      	b.n	800dd68 <__gethex+0x15c>
 800de0a:	45b1      	cmp	r9, r6
 800de0c:	d8ea      	bhi.n	800dde4 <__gethex+0x1d8>
 800de0e:	492b      	ldr	r1, [pc, #172]	@ (800debc <__gethex+0x2b0>)
 800de10:	9303      	str	r3, [sp, #12]
 800de12:	2201      	movs	r2, #1
 800de14:	4630      	mov	r0, r6
 800de16:	f7ff fd68 	bl	800d8ea <strncmp>
 800de1a:	9b03      	ldr	r3, [sp, #12]
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d1e1      	bne.n	800dde4 <__gethex+0x1d8>
 800de20:	e7a2      	b.n	800dd68 <__gethex+0x15c>
 800de22:	1ea9      	subs	r1, r5, #2
 800de24:	4620      	mov	r0, r4
 800de26:	f000 fe66 	bl	800eaf6 <__any_on>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d0c2      	beq.n	800ddb4 <__gethex+0x1a8>
 800de2e:	f04f 0903 	mov.w	r9, #3
 800de32:	e7c1      	b.n	800ddb8 <__gethex+0x1ac>
 800de34:	da09      	bge.n	800de4a <__gethex+0x23e>
 800de36:	1b75      	subs	r5, r6, r5
 800de38:	4621      	mov	r1, r4
 800de3a:	9801      	ldr	r0, [sp, #4]
 800de3c:	462a      	mov	r2, r5
 800de3e:	f000 fc21 	bl	800e684 <__lshift>
 800de42:	1b7f      	subs	r7, r7, r5
 800de44:	4604      	mov	r4, r0
 800de46:	f100 0a14 	add.w	sl, r0, #20
 800de4a:	f04f 0900 	mov.w	r9, #0
 800de4e:	e7b8      	b.n	800ddc2 <__gethex+0x1b6>
 800de50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de54:	42bd      	cmp	r5, r7
 800de56:	dd6f      	ble.n	800df38 <__gethex+0x32c>
 800de58:	1bed      	subs	r5, r5, r7
 800de5a:	42ae      	cmp	r6, r5
 800de5c:	dc34      	bgt.n	800dec8 <__gethex+0x2bc>
 800de5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de62:	2b02      	cmp	r3, #2
 800de64:	d022      	beq.n	800deac <__gethex+0x2a0>
 800de66:	2b03      	cmp	r3, #3
 800de68:	d024      	beq.n	800deb4 <__gethex+0x2a8>
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d115      	bne.n	800de9a <__gethex+0x28e>
 800de6e:	42ae      	cmp	r6, r5
 800de70:	d113      	bne.n	800de9a <__gethex+0x28e>
 800de72:	2e01      	cmp	r6, #1
 800de74:	d10b      	bne.n	800de8e <__gethex+0x282>
 800de76:	9a02      	ldr	r2, [sp, #8]
 800de78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	2301      	movs	r3, #1
 800de80:	6123      	str	r3, [r4, #16]
 800de82:	f8ca 3000 	str.w	r3, [sl]
 800de86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de88:	2562      	movs	r5, #98	@ 0x62
 800de8a:	601c      	str	r4, [r3, #0]
 800de8c:	e73a      	b.n	800dd04 <__gethex+0xf8>
 800de8e:	1e71      	subs	r1, r6, #1
 800de90:	4620      	mov	r0, r4
 800de92:	f000 fe30 	bl	800eaf6 <__any_on>
 800de96:	2800      	cmp	r0, #0
 800de98:	d1ed      	bne.n	800de76 <__gethex+0x26a>
 800de9a:	9801      	ldr	r0, [sp, #4]
 800de9c:	4621      	mov	r1, r4
 800de9e:	f000 f9d9 	bl	800e254 <_Bfree>
 800dea2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dea4:	2300      	movs	r3, #0
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	2550      	movs	r5, #80	@ 0x50
 800deaa:	e72b      	b.n	800dd04 <__gethex+0xf8>
 800deac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1f3      	bne.n	800de9a <__gethex+0x28e>
 800deb2:	e7e0      	b.n	800de76 <__gethex+0x26a>
 800deb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1dd      	bne.n	800de76 <__gethex+0x26a>
 800deba:	e7ee      	b.n	800de9a <__gethex+0x28e>
 800debc:	08062114 	.word	0x08062114
 800dec0:	08062281 	.word	0x08062281
 800dec4:	08062292 	.word	0x08062292
 800dec8:	1e6f      	subs	r7, r5, #1
 800deca:	f1b9 0f00 	cmp.w	r9, #0
 800dece:	d130      	bne.n	800df32 <__gethex+0x326>
 800ded0:	b127      	cbz	r7, 800dedc <__gethex+0x2d0>
 800ded2:	4639      	mov	r1, r7
 800ded4:	4620      	mov	r0, r4
 800ded6:	f000 fe0e 	bl	800eaf6 <__any_on>
 800deda:	4681      	mov	r9, r0
 800dedc:	117a      	asrs	r2, r7, #5
 800dede:	2301      	movs	r3, #1
 800dee0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dee4:	f007 071f 	and.w	r7, r7, #31
 800dee8:	40bb      	lsls	r3, r7
 800deea:	4213      	tst	r3, r2
 800deec:	4629      	mov	r1, r5
 800deee:	4620      	mov	r0, r4
 800def0:	bf18      	it	ne
 800def2:	f049 0902 	orrne.w	r9, r9, #2
 800def6:	f7ff fe21 	bl	800db3c <rshift>
 800defa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800defe:	1b76      	subs	r6, r6, r5
 800df00:	2502      	movs	r5, #2
 800df02:	f1b9 0f00 	cmp.w	r9, #0
 800df06:	d047      	beq.n	800df98 <__gethex+0x38c>
 800df08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d015      	beq.n	800df3c <__gethex+0x330>
 800df10:	2b03      	cmp	r3, #3
 800df12:	d017      	beq.n	800df44 <__gethex+0x338>
 800df14:	2b01      	cmp	r3, #1
 800df16:	d109      	bne.n	800df2c <__gethex+0x320>
 800df18:	f019 0f02 	tst.w	r9, #2
 800df1c:	d006      	beq.n	800df2c <__gethex+0x320>
 800df1e:	f8da 3000 	ldr.w	r3, [sl]
 800df22:	ea49 0903 	orr.w	r9, r9, r3
 800df26:	f019 0f01 	tst.w	r9, #1
 800df2a:	d10e      	bne.n	800df4a <__gethex+0x33e>
 800df2c:	f045 0510 	orr.w	r5, r5, #16
 800df30:	e032      	b.n	800df98 <__gethex+0x38c>
 800df32:	f04f 0901 	mov.w	r9, #1
 800df36:	e7d1      	b.n	800dedc <__gethex+0x2d0>
 800df38:	2501      	movs	r5, #1
 800df3a:	e7e2      	b.n	800df02 <__gethex+0x2f6>
 800df3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df3e:	f1c3 0301 	rsb	r3, r3, #1
 800df42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df46:	2b00      	cmp	r3, #0
 800df48:	d0f0      	beq.n	800df2c <__gethex+0x320>
 800df4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df4e:	f104 0314 	add.w	r3, r4, #20
 800df52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800df56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800df5a:	f04f 0c00 	mov.w	ip, #0
 800df5e:	4618      	mov	r0, r3
 800df60:	f853 2b04 	ldr.w	r2, [r3], #4
 800df64:	f1b2 3fff 	cmp.w	r2, #4294967295
 800df68:	d01b      	beq.n	800dfa2 <__gethex+0x396>
 800df6a:	3201      	adds	r2, #1
 800df6c:	6002      	str	r2, [r0, #0]
 800df6e:	2d02      	cmp	r5, #2
 800df70:	f104 0314 	add.w	r3, r4, #20
 800df74:	d13c      	bne.n	800dff0 <__gethex+0x3e4>
 800df76:	f8d8 2000 	ldr.w	r2, [r8]
 800df7a:	3a01      	subs	r2, #1
 800df7c:	42b2      	cmp	r2, r6
 800df7e:	d109      	bne.n	800df94 <__gethex+0x388>
 800df80:	1171      	asrs	r1, r6, #5
 800df82:	2201      	movs	r2, #1
 800df84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df88:	f006 061f 	and.w	r6, r6, #31
 800df8c:	fa02 f606 	lsl.w	r6, r2, r6
 800df90:	421e      	tst	r6, r3
 800df92:	d13a      	bne.n	800e00a <__gethex+0x3fe>
 800df94:	f045 0520 	orr.w	r5, r5, #32
 800df98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df9a:	601c      	str	r4, [r3, #0]
 800df9c:	9b02      	ldr	r3, [sp, #8]
 800df9e:	601f      	str	r7, [r3, #0]
 800dfa0:	e6b0      	b.n	800dd04 <__gethex+0xf8>
 800dfa2:	4299      	cmp	r1, r3
 800dfa4:	f843 cc04 	str.w	ip, [r3, #-4]
 800dfa8:	d8d9      	bhi.n	800df5e <__gethex+0x352>
 800dfaa:	68a3      	ldr	r3, [r4, #8]
 800dfac:	459b      	cmp	fp, r3
 800dfae:	db17      	blt.n	800dfe0 <__gethex+0x3d4>
 800dfb0:	6861      	ldr	r1, [r4, #4]
 800dfb2:	9801      	ldr	r0, [sp, #4]
 800dfb4:	3101      	adds	r1, #1
 800dfb6:	f000 f90d 	bl	800e1d4 <_Balloc>
 800dfba:	4681      	mov	r9, r0
 800dfbc:	b918      	cbnz	r0, 800dfc6 <__gethex+0x3ba>
 800dfbe:	4b1a      	ldr	r3, [pc, #104]	@ (800e028 <__gethex+0x41c>)
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	2184      	movs	r1, #132	@ 0x84
 800dfc4:	e6c5      	b.n	800dd52 <__gethex+0x146>
 800dfc6:	6922      	ldr	r2, [r4, #16]
 800dfc8:	3202      	adds	r2, #2
 800dfca:	f104 010c 	add.w	r1, r4, #12
 800dfce:	0092      	lsls	r2, r2, #2
 800dfd0:	300c      	adds	r0, #12
 800dfd2:	f7ff fd50 	bl	800da76 <memcpy>
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	9801      	ldr	r0, [sp, #4]
 800dfda:	f000 f93b 	bl	800e254 <_Bfree>
 800dfde:	464c      	mov	r4, r9
 800dfe0:	6923      	ldr	r3, [r4, #16]
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dfe8:	6122      	str	r2, [r4, #16]
 800dfea:	2201      	movs	r2, #1
 800dfec:	615a      	str	r2, [r3, #20]
 800dfee:	e7be      	b.n	800df6e <__gethex+0x362>
 800dff0:	6922      	ldr	r2, [r4, #16]
 800dff2:	455a      	cmp	r2, fp
 800dff4:	dd0b      	ble.n	800e00e <__gethex+0x402>
 800dff6:	2101      	movs	r1, #1
 800dff8:	4620      	mov	r0, r4
 800dffa:	f7ff fd9f 	bl	800db3c <rshift>
 800dffe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e002:	3701      	adds	r7, #1
 800e004:	42bb      	cmp	r3, r7
 800e006:	f6ff aee0 	blt.w	800ddca <__gethex+0x1be>
 800e00a:	2501      	movs	r5, #1
 800e00c:	e7c2      	b.n	800df94 <__gethex+0x388>
 800e00e:	f016 061f 	ands.w	r6, r6, #31
 800e012:	d0fa      	beq.n	800e00a <__gethex+0x3fe>
 800e014:	4453      	add	r3, sl
 800e016:	f1c6 0620 	rsb	r6, r6, #32
 800e01a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e01e:	f000 f9cb 	bl	800e3b8 <__hi0bits>
 800e022:	42b0      	cmp	r0, r6
 800e024:	dbe7      	blt.n	800dff6 <__gethex+0x3ea>
 800e026:	e7f0      	b.n	800e00a <__gethex+0x3fe>
 800e028:	08062281 	.word	0x08062281

0800e02c <L_shift>:
 800e02c:	f1c2 0208 	rsb	r2, r2, #8
 800e030:	0092      	lsls	r2, r2, #2
 800e032:	b570      	push	{r4, r5, r6, lr}
 800e034:	f1c2 0620 	rsb	r6, r2, #32
 800e038:	6843      	ldr	r3, [r0, #4]
 800e03a:	6804      	ldr	r4, [r0, #0]
 800e03c:	fa03 f506 	lsl.w	r5, r3, r6
 800e040:	432c      	orrs	r4, r5
 800e042:	40d3      	lsrs	r3, r2
 800e044:	6004      	str	r4, [r0, #0]
 800e046:	f840 3f04 	str.w	r3, [r0, #4]!
 800e04a:	4288      	cmp	r0, r1
 800e04c:	d3f4      	bcc.n	800e038 <L_shift+0xc>
 800e04e:	bd70      	pop	{r4, r5, r6, pc}

0800e050 <__match>:
 800e050:	b530      	push	{r4, r5, lr}
 800e052:	6803      	ldr	r3, [r0, #0]
 800e054:	3301      	adds	r3, #1
 800e056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e05a:	b914      	cbnz	r4, 800e062 <__match+0x12>
 800e05c:	6003      	str	r3, [r0, #0]
 800e05e:	2001      	movs	r0, #1
 800e060:	bd30      	pop	{r4, r5, pc}
 800e062:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e066:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e06a:	2d19      	cmp	r5, #25
 800e06c:	bf98      	it	ls
 800e06e:	3220      	addls	r2, #32
 800e070:	42a2      	cmp	r2, r4
 800e072:	d0f0      	beq.n	800e056 <__match+0x6>
 800e074:	2000      	movs	r0, #0
 800e076:	e7f3      	b.n	800e060 <__match+0x10>

0800e078 <__hexnan>:
 800e078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07c:	680b      	ldr	r3, [r1, #0]
 800e07e:	6801      	ldr	r1, [r0, #0]
 800e080:	115e      	asrs	r6, r3, #5
 800e082:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e086:	f013 031f 	ands.w	r3, r3, #31
 800e08a:	b087      	sub	sp, #28
 800e08c:	bf18      	it	ne
 800e08e:	3604      	addne	r6, #4
 800e090:	2500      	movs	r5, #0
 800e092:	1f37      	subs	r7, r6, #4
 800e094:	4682      	mov	sl, r0
 800e096:	4690      	mov	r8, r2
 800e098:	9301      	str	r3, [sp, #4]
 800e09a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e09e:	46b9      	mov	r9, r7
 800e0a0:	463c      	mov	r4, r7
 800e0a2:	9502      	str	r5, [sp, #8]
 800e0a4:	46ab      	mov	fp, r5
 800e0a6:	784a      	ldrb	r2, [r1, #1]
 800e0a8:	1c4b      	adds	r3, r1, #1
 800e0aa:	9303      	str	r3, [sp, #12]
 800e0ac:	b342      	cbz	r2, 800e100 <__hexnan+0x88>
 800e0ae:	4610      	mov	r0, r2
 800e0b0:	9105      	str	r1, [sp, #20]
 800e0b2:	9204      	str	r2, [sp, #16]
 800e0b4:	f7ff fd94 	bl	800dbe0 <__hexdig_fun>
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d151      	bne.n	800e160 <__hexnan+0xe8>
 800e0bc:	9a04      	ldr	r2, [sp, #16]
 800e0be:	9905      	ldr	r1, [sp, #20]
 800e0c0:	2a20      	cmp	r2, #32
 800e0c2:	d818      	bhi.n	800e0f6 <__hexnan+0x7e>
 800e0c4:	9b02      	ldr	r3, [sp, #8]
 800e0c6:	459b      	cmp	fp, r3
 800e0c8:	dd13      	ble.n	800e0f2 <__hexnan+0x7a>
 800e0ca:	454c      	cmp	r4, r9
 800e0cc:	d206      	bcs.n	800e0dc <__hexnan+0x64>
 800e0ce:	2d07      	cmp	r5, #7
 800e0d0:	dc04      	bgt.n	800e0dc <__hexnan+0x64>
 800e0d2:	462a      	mov	r2, r5
 800e0d4:	4649      	mov	r1, r9
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f7ff ffa8 	bl	800e02c <L_shift>
 800e0dc:	4544      	cmp	r4, r8
 800e0de:	d952      	bls.n	800e186 <__hexnan+0x10e>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f1a4 0904 	sub.w	r9, r4, #4
 800e0e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e0ea:	f8cd b008 	str.w	fp, [sp, #8]
 800e0ee:	464c      	mov	r4, r9
 800e0f0:	461d      	mov	r5, r3
 800e0f2:	9903      	ldr	r1, [sp, #12]
 800e0f4:	e7d7      	b.n	800e0a6 <__hexnan+0x2e>
 800e0f6:	2a29      	cmp	r2, #41	@ 0x29
 800e0f8:	d157      	bne.n	800e1aa <__hexnan+0x132>
 800e0fa:	3102      	adds	r1, #2
 800e0fc:	f8ca 1000 	str.w	r1, [sl]
 800e100:	f1bb 0f00 	cmp.w	fp, #0
 800e104:	d051      	beq.n	800e1aa <__hexnan+0x132>
 800e106:	454c      	cmp	r4, r9
 800e108:	d206      	bcs.n	800e118 <__hexnan+0xa0>
 800e10a:	2d07      	cmp	r5, #7
 800e10c:	dc04      	bgt.n	800e118 <__hexnan+0xa0>
 800e10e:	462a      	mov	r2, r5
 800e110:	4649      	mov	r1, r9
 800e112:	4620      	mov	r0, r4
 800e114:	f7ff ff8a 	bl	800e02c <L_shift>
 800e118:	4544      	cmp	r4, r8
 800e11a:	d936      	bls.n	800e18a <__hexnan+0x112>
 800e11c:	f1a8 0204 	sub.w	r2, r8, #4
 800e120:	4623      	mov	r3, r4
 800e122:	f853 1b04 	ldr.w	r1, [r3], #4
 800e126:	f842 1f04 	str.w	r1, [r2, #4]!
 800e12a:	429f      	cmp	r7, r3
 800e12c:	d2f9      	bcs.n	800e122 <__hexnan+0xaa>
 800e12e:	1b3b      	subs	r3, r7, r4
 800e130:	f023 0303 	bic.w	r3, r3, #3
 800e134:	3304      	adds	r3, #4
 800e136:	3401      	adds	r4, #1
 800e138:	3e03      	subs	r6, #3
 800e13a:	42b4      	cmp	r4, r6
 800e13c:	bf88      	it	hi
 800e13e:	2304      	movhi	r3, #4
 800e140:	4443      	add	r3, r8
 800e142:	2200      	movs	r2, #0
 800e144:	f843 2b04 	str.w	r2, [r3], #4
 800e148:	429f      	cmp	r7, r3
 800e14a:	d2fb      	bcs.n	800e144 <__hexnan+0xcc>
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	b91b      	cbnz	r3, 800e158 <__hexnan+0xe0>
 800e150:	4547      	cmp	r7, r8
 800e152:	d128      	bne.n	800e1a6 <__hexnan+0x12e>
 800e154:	2301      	movs	r3, #1
 800e156:	603b      	str	r3, [r7, #0]
 800e158:	2005      	movs	r0, #5
 800e15a:	b007      	add	sp, #28
 800e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e160:	3501      	adds	r5, #1
 800e162:	2d08      	cmp	r5, #8
 800e164:	f10b 0b01 	add.w	fp, fp, #1
 800e168:	dd06      	ble.n	800e178 <__hexnan+0x100>
 800e16a:	4544      	cmp	r4, r8
 800e16c:	d9c1      	bls.n	800e0f2 <__hexnan+0x7a>
 800e16e:	2300      	movs	r3, #0
 800e170:	f844 3c04 	str.w	r3, [r4, #-4]
 800e174:	2501      	movs	r5, #1
 800e176:	3c04      	subs	r4, #4
 800e178:	6822      	ldr	r2, [r4, #0]
 800e17a:	f000 000f 	and.w	r0, r0, #15
 800e17e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e182:	6020      	str	r0, [r4, #0]
 800e184:	e7b5      	b.n	800e0f2 <__hexnan+0x7a>
 800e186:	2508      	movs	r5, #8
 800e188:	e7b3      	b.n	800e0f2 <__hexnan+0x7a>
 800e18a:	9b01      	ldr	r3, [sp, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d0dd      	beq.n	800e14c <__hexnan+0xd4>
 800e190:	f1c3 0320 	rsb	r3, r3, #32
 800e194:	f04f 32ff 	mov.w	r2, #4294967295
 800e198:	40da      	lsrs	r2, r3
 800e19a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e19e:	4013      	ands	r3, r2
 800e1a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e1a4:	e7d2      	b.n	800e14c <__hexnan+0xd4>
 800e1a6:	3f04      	subs	r7, #4
 800e1a8:	e7d0      	b.n	800e14c <__hexnan+0xd4>
 800e1aa:	2004      	movs	r0, #4
 800e1ac:	e7d5      	b.n	800e15a <__hexnan+0xe2>

0800e1ae <__ascii_mbtowc>:
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	b901      	cbnz	r1, 800e1b4 <__ascii_mbtowc+0x6>
 800e1b2:	a901      	add	r1, sp, #4
 800e1b4:	b142      	cbz	r2, 800e1c8 <__ascii_mbtowc+0x1a>
 800e1b6:	b14b      	cbz	r3, 800e1cc <__ascii_mbtowc+0x1e>
 800e1b8:	7813      	ldrb	r3, [r2, #0]
 800e1ba:	600b      	str	r3, [r1, #0]
 800e1bc:	7812      	ldrb	r2, [r2, #0]
 800e1be:	1e10      	subs	r0, r2, #0
 800e1c0:	bf18      	it	ne
 800e1c2:	2001      	movne	r0, #1
 800e1c4:	b002      	add	sp, #8
 800e1c6:	4770      	bx	lr
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	e7fb      	b.n	800e1c4 <__ascii_mbtowc+0x16>
 800e1cc:	f06f 0001 	mvn.w	r0, #1
 800e1d0:	e7f8      	b.n	800e1c4 <__ascii_mbtowc+0x16>
	...

0800e1d4 <_Balloc>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	69c6      	ldr	r6, [r0, #28]
 800e1d8:	4604      	mov	r4, r0
 800e1da:	460d      	mov	r5, r1
 800e1dc:	b976      	cbnz	r6, 800e1fc <_Balloc+0x28>
 800e1de:	2010      	movs	r0, #16
 800e1e0:	f7fe fa7a 	bl	800c6d8 <malloc>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	61e0      	str	r0, [r4, #28]
 800e1e8:	b920      	cbnz	r0, 800e1f4 <_Balloc+0x20>
 800e1ea:	4b18      	ldr	r3, [pc, #96]	@ (800e24c <_Balloc+0x78>)
 800e1ec:	4818      	ldr	r0, [pc, #96]	@ (800e250 <_Balloc+0x7c>)
 800e1ee:	216b      	movs	r1, #107	@ 0x6b
 800e1f0:	f001 fc60 	bl	800fab4 <__assert_func>
 800e1f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1f8:	6006      	str	r6, [r0, #0]
 800e1fa:	60c6      	str	r6, [r0, #12]
 800e1fc:	69e6      	ldr	r6, [r4, #28]
 800e1fe:	68f3      	ldr	r3, [r6, #12]
 800e200:	b183      	cbz	r3, 800e224 <_Balloc+0x50>
 800e202:	69e3      	ldr	r3, [r4, #28]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e20a:	b9b8      	cbnz	r0, 800e23c <_Balloc+0x68>
 800e20c:	2101      	movs	r1, #1
 800e20e:	fa01 f605 	lsl.w	r6, r1, r5
 800e212:	1d72      	adds	r2, r6, #5
 800e214:	0092      	lsls	r2, r2, #2
 800e216:	4620      	mov	r0, r4
 800e218:	f001 fc6a 	bl	800faf0 <_calloc_r>
 800e21c:	b160      	cbz	r0, 800e238 <_Balloc+0x64>
 800e21e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e222:	e00e      	b.n	800e242 <_Balloc+0x6e>
 800e224:	2221      	movs	r2, #33	@ 0x21
 800e226:	2104      	movs	r1, #4
 800e228:	4620      	mov	r0, r4
 800e22a:	f001 fc61 	bl	800faf0 <_calloc_r>
 800e22e:	69e3      	ldr	r3, [r4, #28]
 800e230:	60f0      	str	r0, [r6, #12]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1e4      	bne.n	800e202 <_Balloc+0x2e>
 800e238:	2000      	movs	r0, #0
 800e23a:	bd70      	pop	{r4, r5, r6, pc}
 800e23c:	6802      	ldr	r2, [r0, #0]
 800e23e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e242:	2300      	movs	r3, #0
 800e244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e248:	e7f7      	b.n	800e23a <_Balloc+0x66>
 800e24a:	bf00      	nop
 800e24c:	080622f2 	.word	0x080622f2
 800e250:	08062309 	.word	0x08062309

0800e254 <_Bfree>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	69c6      	ldr	r6, [r0, #28]
 800e258:	4605      	mov	r5, r0
 800e25a:	460c      	mov	r4, r1
 800e25c:	b976      	cbnz	r6, 800e27c <_Bfree+0x28>
 800e25e:	2010      	movs	r0, #16
 800e260:	f7fe fa3a 	bl	800c6d8 <malloc>
 800e264:	4602      	mov	r2, r0
 800e266:	61e8      	str	r0, [r5, #28]
 800e268:	b920      	cbnz	r0, 800e274 <_Bfree+0x20>
 800e26a:	4b09      	ldr	r3, [pc, #36]	@ (800e290 <_Bfree+0x3c>)
 800e26c:	4809      	ldr	r0, [pc, #36]	@ (800e294 <_Bfree+0x40>)
 800e26e:	218f      	movs	r1, #143	@ 0x8f
 800e270:	f001 fc20 	bl	800fab4 <__assert_func>
 800e274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e278:	6006      	str	r6, [r0, #0]
 800e27a:	60c6      	str	r6, [r0, #12]
 800e27c:	b13c      	cbz	r4, 800e28e <_Bfree+0x3a>
 800e27e:	69eb      	ldr	r3, [r5, #28]
 800e280:	6862      	ldr	r2, [r4, #4]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e288:	6021      	str	r1, [r4, #0]
 800e28a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e28e:	bd70      	pop	{r4, r5, r6, pc}
 800e290:	080622f2 	.word	0x080622f2
 800e294:	08062309 	.word	0x08062309

0800e298 <__multadd>:
 800e298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e29c:	690d      	ldr	r5, [r1, #16]
 800e29e:	4607      	mov	r7, r0
 800e2a0:	460c      	mov	r4, r1
 800e2a2:	461e      	mov	r6, r3
 800e2a4:	f101 0c14 	add.w	ip, r1, #20
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	f8dc 3000 	ldr.w	r3, [ip]
 800e2ae:	b299      	uxth	r1, r3
 800e2b0:	fb02 6101 	mla	r1, r2, r1, r6
 800e2b4:	0c1e      	lsrs	r6, r3, #16
 800e2b6:	0c0b      	lsrs	r3, r1, #16
 800e2b8:	fb02 3306 	mla	r3, r2, r6, r3
 800e2bc:	b289      	uxth	r1, r1
 800e2be:	3001      	adds	r0, #1
 800e2c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2c4:	4285      	cmp	r5, r0
 800e2c6:	f84c 1b04 	str.w	r1, [ip], #4
 800e2ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2ce:	dcec      	bgt.n	800e2aa <__multadd+0x12>
 800e2d0:	b30e      	cbz	r6, 800e316 <__multadd+0x7e>
 800e2d2:	68a3      	ldr	r3, [r4, #8]
 800e2d4:	42ab      	cmp	r3, r5
 800e2d6:	dc19      	bgt.n	800e30c <__multadd+0x74>
 800e2d8:	6861      	ldr	r1, [r4, #4]
 800e2da:	4638      	mov	r0, r7
 800e2dc:	3101      	adds	r1, #1
 800e2de:	f7ff ff79 	bl	800e1d4 <_Balloc>
 800e2e2:	4680      	mov	r8, r0
 800e2e4:	b928      	cbnz	r0, 800e2f2 <__multadd+0x5a>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	4b0c      	ldr	r3, [pc, #48]	@ (800e31c <__multadd+0x84>)
 800e2ea:	480d      	ldr	r0, [pc, #52]	@ (800e320 <__multadd+0x88>)
 800e2ec:	21ba      	movs	r1, #186	@ 0xba
 800e2ee:	f001 fbe1 	bl	800fab4 <__assert_func>
 800e2f2:	6922      	ldr	r2, [r4, #16]
 800e2f4:	3202      	adds	r2, #2
 800e2f6:	f104 010c 	add.w	r1, r4, #12
 800e2fa:	0092      	lsls	r2, r2, #2
 800e2fc:	300c      	adds	r0, #12
 800e2fe:	f7ff fbba 	bl	800da76 <memcpy>
 800e302:	4621      	mov	r1, r4
 800e304:	4638      	mov	r0, r7
 800e306:	f7ff ffa5 	bl	800e254 <_Bfree>
 800e30a:	4644      	mov	r4, r8
 800e30c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e310:	3501      	adds	r5, #1
 800e312:	615e      	str	r6, [r3, #20]
 800e314:	6125      	str	r5, [r4, #16]
 800e316:	4620      	mov	r0, r4
 800e318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31c:	08062281 	.word	0x08062281
 800e320:	08062309 	.word	0x08062309

0800e324 <__s2b>:
 800e324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e328:	460c      	mov	r4, r1
 800e32a:	4615      	mov	r5, r2
 800e32c:	461f      	mov	r7, r3
 800e32e:	2209      	movs	r2, #9
 800e330:	3308      	adds	r3, #8
 800e332:	4606      	mov	r6, r0
 800e334:	fb93 f3f2 	sdiv	r3, r3, r2
 800e338:	2100      	movs	r1, #0
 800e33a:	2201      	movs	r2, #1
 800e33c:	429a      	cmp	r2, r3
 800e33e:	db09      	blt.n	800e354 <__s2b+0x30>
 800e340:	4630      	mov	r0, r6
 800e342:	f7ff ff47 	bl	800e1d4 <_Balloc>
 800e346:	b940      	cbnz	r0, 800e35a <__s2b+0x36>
 800e348:	4602      	mov	r2, r0
 800e34a:	4b19      	ldr	r3, [pc, #100]	@ (800e3b0 <__s2b+0x8c>)
 800e34c:	4819      	ldr	r0, [pc, #100]	@ (800e3b4 <__s2b+0x90>)
 800e34e:	21d3      	movs	r1, #211	@ 0xd3
 800e350:	f001 fbb0 	bl	800fab4 <__assert_func>
 800e354:	0052      	lsls	r2, r2, #1
 800e356:	3101      	adds	r1, #1
 800e358:	e7f0      	b.n	800e33c <__s2b+0x18>
 800e35a:	9b08      	ldr	r3, [sp, #32]
 800e35c:	6143      	str	r3, [r0, #20]
 800e35e:	2d09      	cmp	r5, #9
 800e360:	f04f 0301 	mov.w	r3, #1
 800e364:	6103      	str	r3, [r0, #16]
 800e366:	dd16      	ble.n	800e396 <__s2b+0x72>
 800e368:	f104 0909 	add.w	r9, r4, #9
 800e36c:	46c8      	mov	r8, r9
 800e36e:	442c      	add	r4, r5
 800e370:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e374:	4601      	mov	r1, r0
 800e376:	3b30      	subs	r3, #48	@ 0x30
 800e378:	220a      	movs	r2, #10
 800e37a:	4630      	mov	r0, r6
 800e37c:	f7ff ff8c 	bl	800e298 <__multadd>
 800e380:	45a0      	cmp	r8, r4
 800e382:	d1f5      	bne.n	800e370 <__s2b+0x4c>
 800e384:	f1a5 0408 	sub.w	r4, r5, #8
 800e388:	444c      	add	r4, r9
 800e38a:	1b2d      	subs	r5, r5, r4
 800e38c:	1963      	adds	r3, r4, r5
 800e38e:	42bb      	cmp	r3, r7
 800e390:	db04      	blt.n	800e39c <__s2b+0x78>
 800e392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e396:	340a      	adds	r4, #10
 800e398:	2509      	movs	r5, #9
 800e39a:	e7f6      	b.n	800e38a <__s2b+0x66>
 800e39c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3a0:	4601      	mov	r1, r0
 800e3a2:	3b30      	subs	r3, #48	@ 0x30
 800e3a4:	220a      	movs	r2, #10
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f7ff ff76 	bl	800e298 <__multadd>
 800e3ac:	e7ee      	b.n	800e38c <__s2b+0x68>
 800e3ae:	bf00      	nop
 800e3b0:	08062281 	.word	0x08062281
 800e3b4:	08062309 	.word	0x08062309

0800e3b8 <__hi0bits>:
 800e3b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e3bc:	4603      	mov	r3, r0
 800e3be:	bf36      	itet	cc
 800e3c0:	0403      	lslcc	r3, r0, #16
 800e3c2:	2000      	movcs	r0, #0
 800e3c4:	2010      	movcc	r0, #16
 800e3c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3ca:	bf3c      	itt	cc
 800e3cc:	021b      	lslcc	r3, r3, #8
 800e3ce:	3008      	addcc	r0, #8
 800e3d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3d4:	bf3c      	itt	cc
 800e3d6:	011b      	lslcc	r3, r3, #4
 800e3d8:	3004      	addcc	r0, #4
 800e3da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3de:	bf3c      	itt	cc
 800e3e0:	009b      	lslcc	r3, r3, #2
 800e3e2:	3002      	addcc	r0, #2
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	db05      	blt.n	800e3f4 <__hi0bits+0x3c>
 800e3e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e3ec:	f100 0001 	add.w	r0, r0, #1
 800e3f0:	bf08      	it	eq
 800e3f2:	2020      	moveq	r0, #32
 800e3f4:	4770      	bx	lr

0800e3f6 <__lo0bits>:
 800e3f6:	6803      	ldr	r3, [r0, #0]
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	f013 0007 	ands.w	r0, r3, #7
 800e3fe:	d00b      	beq.n	800e418 <__lo0bits+0x22>
 800e400:	07d9      	lsls	r1, r3, #31
 800e402:	d421      	bmi.n	800e448 <__lo0bits+0x52>
 800e404:	0798      	lsls	r0, r3, #30
 800e406:	bf49      	itett	mi
 800e408:	085b      	lsrmi	r3, r3, #1
 800e40a:	089b      	lsrpl	r3, r3, #2
 800e40c:	2001      	movmi	r0, #1
 800e40e:	6013      	strmi	r3, [r2, #0]
 800e410:	bf5c      	itt	pl
 800e412:	6013      	strpl	r3, [r2, #0]
 800e414:	2002      	movpl	r0, #2
 800e416:	4770      	bx	lr
 800e418:	b299      	uxth	r1, r3
 800e41a:	b909      	cbnz	r1, 800e420 <__lo0bits+0x2a>
 800e41c:	0c1b      	lsrs	r3, r3, #16
 800e41e:	2010      	movs	r0, #16
 800e420:	b2d9      	uxtb	r1, r3
 800e422:	b909      	cbnz	r1, 800e428 <__lo0bits+0x32>
 800e424:	3008      	adds	r0, #8
 800e426:	0a1b      	lsrs	r3, r3, #8
 800e428:	0719      	lsls	r1, r3, #28
 800e42a:	bf04      	itt	eq
 800e42c:	091b      	lsreq	r3, r3, #4
 800e42e:	3004      	addeq	r0, #4
 800e430:	0799      	lsls	r1, r3, #30
 800e432:	bf04      	itt	eq
 800e434:	089b      	lsreq	r3, r3, #2
 800e436:	3002      	addeq	r0, #2
 800e438:	07d9      	lsls	r1, r3, #31
 800e43a:	d403      	bmi.n	800e444 <__lo0bits+0x4e>
 800e43c:	085b      	lsrs	r3, r3, #1
 800e43e:	f100 0001 	add.w	r0, r0, #1
 800e442:	d003      	beq.n	800e44c <__lo0bits+0x56>
 800e444:	6013      	str	r3, [r2, #0]
 800e446:	4770      	bx	lr
 800e448:	2000      	movs	r0, #0
 800e44a:	4770      	bx	lr
 800e44c:	2020      	movs	r0, #32
 800e44e:	4770      	bx	lr

0800e450 <__i2b>:
 800e450:	b510      	push	{r4, lr}
 800e452:	460c      	mov	r4, r1
 800e454:	2101      	movs	r1, #1
 800e456:	f7ff febd 	bl	800e1d4 <_Balloc>
 800e45a:	4602      	mov	r2, r0
 800e45c:	b928      	cbnz	r0, 800e46a <__i2b+0x1a>
 800e45e:	4b05      	ldr	r3, [pc, #20]	@ (800e474 <__i2b+0x24>)
 800e460:	4805      	ldr	r0, [pc, #20]	@ (800e478 <__i2b+0x28>)
 800e462:	f240 1145 	movw	r1, #325	@ 0x145
 800e466:	f001 fb25 	bl	800fab4 <__assert_func>
 800e46a:	2301      	movs	r3, #1
 800e46c:	6144      	str	r4, [r0, #20]
 800e46e:	6103      	str	r3, [r0, #16]
 800e470:	bd10      	pop	{r4, pc}
 800e472:	bf00      	nop
 800e474:	08062281 	.word	0x08062281
 800e478:	08062309 	.word	0x08062309

0800e47c <__multiply>:
 800e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e480:	4614      	mov	r4, r2
 800e482:	690a      	ldr	r2, [r1, #16]
 800e484:	6923      	ldr	r3, [r4, #16]
 800e486:	429a      	cmp	r2, r3
 800e488:	bfa8      	it	ge
 800e48a:	4623      	movge	r3, r4
 800e48c:	460f      	mov	r7, r1
 800e48e:	bfa4      	itt	ge
 800e490:	460c      	movge	r4, r1
 800e492:	461f      	movge	r7, r3
 800e494:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e498:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e49c:	68a3      	ldr	r3, [r4, #8]
 800e49e:	6861      	ldr	r1, [r4, #4]
 800e4a0:	eb0a 0609 	add.w	r6, sl, r9
 800e4a4:	42b3      	cmp	r3, r6
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	bfb8      	it	lt
 800e4aa:	3101      	addlt	r1, #1
 800e4ac:	f7ff fe92 	bl	800e1d4 <_Balloc>
 800e4b0:	b930      	cbnz	r0, 800e4c0 <__multiply+0x44>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	4b44      	ldr	r3, [pc, #272]	@ (800e5c8 <__multiply+0x14c>)
 800e4b6:	4845      	ldr	r0, [pc, #276]	@ (800e5cc <__multiply+0x150>)
 800e4b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e4bc:	f001 fafa 	bl	800fab4 <__assert_func>
 800e4c0:	f100 0514 	add.w	r5, r0, #20
 800e4c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4c8:	462b      	mov	r3, r5
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	4543      	cmp	r3, r8
 800e4ce:	d321      	bcc.n	800e514 <__multiply+0x98>
 800e4d0:	f107 0114 	add.w	r1, r7, #20
 800e4d4:	f104 0214 	add.w	r2, r4, #20
 800e4d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e4dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e4e0:	9302      	str	r3, [sp, #8]
 800e4e2:	1b13      	subs	r3, r2, r4
 800e4e4:	3b15      	subs	r3, #21
 800e4e6:	f023 0303 	bic.w	r3, r3, #3
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	f104 0715 	add.w	r7, r4, #21
 800e4f0:	42ba      	cmp	r2, r7
 800e4f2:	bf38      	it	cc
 800e4f4:	2304      	movcc	r3, #4
 800e4f6:	9301      	str	r3, [sp, #4]
 800e4f8:	9b02      	ldr	r3, [sp, #8]
 800e4fa:	9103      	str	r1, [sp, #12]
 800e4fc:	428b      	cmp	r3, r1
 800e4fe:	d80c      	bhi.n	800e51a <__multiply+0x9e>
 800e500:	2e00      	cmp	r6, #0
 800e502:	dd03      	ble.n	800e50c <__multiply+0x90>
 800e504:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d05b      	beq.n	800e5c4 <__multiply+0x148>
 800e50c:	6106      	str	r6, [r0, #16]
 800e50e:	b005      	add	sp, #20
 800e510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e514:	f843 2b04 	str.w	r2, [r3], #4
 800e518:	e7d8      	b.n	800e4cc <__multiply+0x50>
 800e51a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e51e:	f1ba 0f00 	cmp.w	sl, #0
 800e522:	d024      	beq.n	800e56e <__multiply+0xf2>
 800e524:	f104 0e14 	add.w	lr, r4, #20
 800e528:	46a9      	mov	r9, r5
 800e52a:	f04f 0c00 	mov.w	ip, #0
 800e52e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e532:	f8d9 3000 	ldr.w	r3, [r9]
 800e536:	fa1f fb87 	uxth.w	fp, r7
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e540:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e544:	f8d9 7000 	ldr.w	r7, [r9]
 800e548:	4463      	add	r3, ip
 800e54a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e54e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e552:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e556:	b29b      	uxth	r3, r3
 800e558:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e55c:	4572      	cmp	r2, lr
 800e55e:	f849 3b04 	str.w	r3, [r9], #4
 800e562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e566:	d8e2      	bhi.n	800e52e <__multiply+0xb2>
 800e568:	9b01      	ldr	r3, [sp, #4]
 800e56a:	f845 c003 	str.w	ip, [r5, r3]
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e574:	3104      	adds	r1, #4
 800e576:	f1b9 0f00 	cmp.w	r9, #0
 800e57a:	d021      	beq.n	800e5c0 <__multiply+0x144>
 800e57c:	682b      	ldr	r3, [r5, #0]
 800e57e:	f104 0c14 	add.w	ip, r4, #20
 800e582:	46ae      	mov	lr, r5
 800e584:	f04f 0a00 	mov.w	sl, #0
 800e588:	f8bc b000 	ldrh.w	fp, [ip]
 800e58c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e590:	fb09 770b 	mla	r7, r9, fp, r7
 800e594:	4457      	add	r7, sl
 800e596:	b29b      	uxth	r3, r3
 800e598:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e59c:	f84e 3b04 	str.w	r3, [lr], #4
 800e5a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e5a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5a8:	f8be 3000 	ldrh.w	r3, [lr]
 800e5ac:	fb09 330a 	mla	r3, r9, sl, r3
 800e5b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e5b4:	4562      	cmp	r2, ip
 800e5b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5ba:	d8e5      	bhi.n	800e588 <__multiply+0x10c>
 800e5bc:	9f01      	ldr	r7, [sp, #4]
 800e5be:	51eb      	str	r3, [r5, r7]
 800e5c0:	3504      	adds	r5, #4
 800e5c2:	e799      	b.n	800e4f8 <__multiply+0x7c>
 800e5c4:	3e01      	subs	r6, #1
 800e5c6:	e79b      	b.n	800e500 <__multiply+0x84>
 800e5c8:	08062281 	.word	0x08062281
 800e5cc:	08062309 	.word	0x08062309

0800e5d0 <__pow5mult>:
 800e5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d4:	4615      	mov	r5, r2
 800e5d6:	f012 0203 	ands.w	r2, r2, #3
 800e5da:	4607      	mov	r7, r0
 800e5dc:	460e      	mov	r6, r1
 800e5de:	d007      	beq.n	800e5f0 <__pow5mult+0x20>
 800e5e0:	4c25      	ldr	r4, [pc, #148]	@ (800e678 <__pow5mult+0xa8>)
 800e5e2:	3a01      	subs	r2, #1
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5ea:	f7ff fe55 	bl	800e298 <__multadd>
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	10ad      	asrs	r5, r5, #2
 800e5f2:	d03d      	beq.n	800e670 <__pow5mult+0xa0>
 800e5f4:	69fc      	ldr	r4, [r7, #28]
 800e5f6:	b97c      	cbnz	r4, 800e618 <__pow5mult+0x48>
 800e5f8:	2010      	movs	r0, #16
 800e5fa:	f7fe f86d 	bl	800c6d8 <malloc>
 800e5fe:	4602      	mov	r2, r0
 800e600:	61f8      	str	r0, [r7, #28]
 800e602:	b928      	cbnz	r0, 800e610 <__pow5mult+0x40>
 800e604:	4b1d      	ldr	r3, [pc, #116]	@ (800e67c <__pow5mult+0xac>)
 800e606:	481e      	ldr	r0, [pc, #120]	@ (800e680 <__pow5mult+0xb0>)
 800e608:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e60c:	f001 fa52 	bl	800fab4 <__assert_func>
 800e610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e614:	6004      	str	r4, [r0, #0]
 800e616:	60c4      	str	r4, [r0, #12]
 800e618:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e61c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e620:	b94c      	cbnz	r4, 800e636 <__pow5mult+0x66>
 800e622:	f240 2171 	movw	r1, #625	@ 0x271
 800e626:	4638      	mov	r0, r7
 800e628:	f7ff ff12 	bl	800e450 <__i2b>
 800e62c:	2300      	movs	r3, #0
 800e62e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e632:	4604      	mov	r4, r0
 800e634:	6003      	str	r3, [r0, #0]
 800e636:	f04f 0900 	mov.w	r9, #0
 800e63a:	07eb      	lsls	r3, r5, #31
 800e63c:	d50a      	bpl.n	800e654 <__pow5mult+0x84>
 800e63e:	4631      	mov	r1, r6
 800e640:	4622      	mov	r2, r4
 800e642:	4638      	mov	r0, r7
 800e644:	f7ff ff1a 	bl	800e47c <__multiply>
 800e648:	4631      	mov	r1, r6
 800e64a:	4680      	mov	r8, r0
 800e64c:	4638      	mov	r0, r7
 800e64e:	f7ff fe01 	bl	800e254 <_Bfree>
 800e652:	4646      	mov	r6, r8
 800e654:	106d      	asrs	r5, r5, #1
 800e656:	d00b      	beq.n	800e670 <__pow5mult+0xa0>
 800e658:	6820      	ldr	r0, [r4, #0]
 800e65a:	b938      	cbnz	r0, 800e66c <__pow5mult+0x9c>
 800e65c:	4622      	mov	r2, r4
 800e65e:	4621      	mov	r1, r4
 800e660:	4638      	mov	r0, r7
 800e662:	f7ff ff0b 	bl	800e47c <__multiply>
 800e666:	6020      	str	r0, [r4, #0]
 800e668:	f8c0 9000 	str.w	r9, [r0]
 800e66c:	4604      	mov	r4, r0
 800e66e:	e7e4      	b.n	800e63a <__pow5mult+0x6a>
 800e670:	4630      	mov	r0, r6
 800e672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e676:	bf00      	nop
 800e678:	08062364 	.word	0x08062364
 800e67c:	080622f2 	.word	0x080622f2
 800e680:	08062309 	.word	0x08062309

0800e684 <__lshift>:
 800e684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e688:	460c      	mov	r4, r1
 800e68a:	6849      	ldr	r1, [r1, #4]
 800e68c:	6923      	ldr	r3, [r4, #16]
 800e68e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e692:	68a3      	ldr	r3, [r4, #8]
 800e694:	4607      	mov	r7, r0
 800e696:	4691      	mov	r9, r2
 800e698:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e69c:	f108 0601 	add.w	r6, r8, #1
 800e6a0:	42b3      	cmp	r3, r6
 800e6a2:	db0b      	blt.n	800e6bc <__lshift+0x38>
 800e6a4:	4638      	mov	r0, r7
 800e6a6:	f7ff fd95 	bl	800e1d4 <_Balloc>
 800e6aa:	4605      	mov	r5, r0
 800e6ac:	b948      	cbnz	r0, 800e6c2 <__lshift+0x3e>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	4b28      	ldr	r3, [pc, #160]	@ (800e754 <__lshift+0xd0>)
 800e6b2:	4829      	ldr	r0, [pc, #164]	@ (800e758 <__lshift+0xd4>)
 800e6b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e6b8:	f001 f9fc 	bl	800fab4 <__assert_func>
 800e6bc:	3101      	adds	r1, #1
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	e7ee      	b.n	800e6a0 <__lshift+0x1c>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f100 0114 	add.w	r1, r0, #20
 800e6c8:	f100 0210 	add.w	r2, r0, #16
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	4553      	cmp	r3, sl
 800e6d0:	db33      	blt.n	800e73a <__lshift+0xb6>
 800e6d2:	6920      	ldr	r0, [r4, #16]
 800e6d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6d8:	f104 0314 	add.w	r3, r4, #20
 800e6dc:	f019 091f 	ands.w	r9, r9, #31
 800e6e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e6e8:	d02b      	beq.n	800e742 <__lshift+0xbe>
 800e6ea:	f1c9 0e20 	rsb	lr, r9, #32
 800e6ee:	468a      	mov	sl, r1
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	6818      	ldr	r0, [r3, #0]
 800e6f4:	fa00 f009 	lsl.w	r0, r0, r9
 800e6f8:	4310      	orrs	r0, r2
 800e6fa:	f84a 0b04 	str.w	r0, [sl], #4
 800e6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e702:	459c      	cmp	ip, r3
 800e704:	fa22 f20e 	lsr.w	r2, r2, lr
 800e708:	d8f3      	bhi.n	800e6f2 <__lshift+0x6e>
 800e70a:	ebac 0304 	sub.w	r3, ip, r4
 800e70e:	3b15      	subs	r3, #21
 800e710:	f023 0303 	bic.w	r3, r3, #3
 800e714:	3304      	adds	r3, #4
 800e716:	f104 0015 	add.w	r0, r4, #21
 800e71a:	4584      	cmp	ip, r0
 800e71c:	bf38      	it	cc
 800e71e:	2304      	movcc	r3, #4
 800e720:	50ca      	str	r2, [r1, r3]
 800e722:	b10a      	cbz	r2, 800e728 <__lshift+0xa4>
 800e724:	f108 0602 	add.w	r6, r8, #2
 800e728:	3e01      	subs	r6, #1
 800e72a:	4638      	mov	r0, r7
 800e72c:	612e      	str	r6, [r5, #16]
 800e72e:	4621      	mov	r1, r4
 800e730:	f7ff fd90 	bl	800e254 <_Bfree>
 800e734:	4628      	mov	r0, r5
 800e736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e73a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e73e:	3301      	adds	r3, #1
 800e740:	e7c5      	b.n	800e6ce <__lshift+0x4a>
 800e742:	3904      	subs	r1, #4
 800e744:	f853 2b04 	ldr.w	r2, [r3], #4
 800e748:	f841 2f04 	str.w	r2, [r1, #4]!
 800e74c:	459c      	cmp	ip, r3
 800e74e:	d8f9      	bhi.n	800e744 <__lshift+0xc0>
 800e750:	e7ea      	b.n	800e728 <__lshift+0xa4>
 800e752:	bf00      	nop
 800e754:	08062281 	.word	0x08062281
 800e758:	08062309 	.word	0x08062309

0800e75c <__mcmp>:
 800e75c:	690a      	ldr	r2, [r1, #16]
 800e75e:	4603      	mov	r3, r0
 800e760:	6900      	ldr	r0, [r0, #16]
 800e762:	1a80      	subs	r0, r0, r2
 800e764:	b530      	push	{r4, r5, lr}
 800e766:	d10e      	bne.n	800e786 <__mcmp+0x2a>
 800e768:	3314      	adds	r3, #20
 800e76a:	3114      	adds	r1, #20
 800e76c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e770:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e774:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e778:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e77c:	4295      	cmp	r5, r2
 800e77e:	d003      	beq.n	800e788 <__mcmp+0x2c>
 800e780:	d205      	bcs.n	800e78e <__mcmp+0x32>
 800e782:	f04f 30ff 	mov.w	r0, #4294967295
 800e786:	bd30      	pop	{r4, r5, pc}
 800e788:	42a3      	cmp	r3, r4
 800e78a:	d3f3      	bcc.n	800e774 <__mcmp+0x18>
 800e78c:	e7fb      	b.n	800e786 <__mcmp+0x2a>
 800e78e:	2001      	movs	r0, #1
 800e790:	e7f9      	b.n	800e786 <__mcmp+0x2a>
	...

0800e794 <__mdiff>:
 800e794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e798:	4689      	mov	r9, r1
 800e79a:	4606      	mov	r6, r0
 800e79c:	4611      	mov	r1, r2
 800e79e:	4648      	mov	r0, r9
 800e7a0:	4614      	mov	r4, r2
 800e7a2:	f7ff ffdb 	bl	800e75c <__mcmp>
 800e7a6:	1e05      	subs	r5, r0, #0
 800e7a8:	d112      	bne.n	800e7d0 <__mdiff+0x3c>
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7ff fd11 	bl	800e1d4 <_Balloc>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	b928      	cbnz	r0, 800e7c2 <__mdiff+0x2e>
 800e7b6:	4b3f      	ldr	r3, [pc, #252]	@ (800e8b4 <__mdiff+0x120>)
 800e7b8:	f240 2137 	movw	r1, #567	@ 0x237
 800e7bc:	483e      	ldr	r0, [pc, #248]	@ (800e8b8 <__mdiff+0x124>)
 800e7be:	f001 f979 	bl	800fab4 <__assert_func>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	b003      	add	sp, #12
 800e7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d0:	bfbc      	itt	lt
 800e7d2:	464b      	movlt	r3, r9
 800e7d4:	46a1      	movlt	r9, r4
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e7dc:	bfba      	itte	lt
 800e7de:	461c      	movlt	r4, r3
 800e7e0:	2501      	movlt	r5, #1
 800e7e2:	2500      	movge	r5, #0
 800e7e4:	f7ff fcf6 	bl	800e1d4 <_Balloc>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	b918      	cbnz	r0, 800e7f4 <__mdiff+0x60>
 800e7ec:	4b31      	ldr	r3, [pc, #196]	@ (800e8b4 <__mdiff+0x120>)
 800e7ee:	f240 2145 	movw	r1, #581	@ 0x245
 800e7f2:	e7e3      	b.n	800e7bc <__mdiff+0x28>
 800e7f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e7f8:	6926      	ldr	r6, [r4, #16]
 800e7fa:	60c5      	str	r5, [r0, #12]
 800e7fc:	f109 0310 	add.w	r3, r9, #16
 800e800:	f109 0514 	add.w	r5, r9, #20
 800e804:	f104 0e14 	add.w	lr, r4, #20
 800e808:	f100 0b14 	add.w	fp, r0, #20
 800e80c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e810:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	46d9      	mov	r9, fp
 800e818:	f04f 0c00 	mov.w	ip, #0
 800e81c:	9b01      	ldr	r3, [sp, #4]
 800e81e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e822:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e826:	9301      	str	r3, [sp, #4]
 800e828:	fa1f f38a 	uxth.w	r3, sl
 800e82c:	4619      	mov	r1, r3
 800e82e:	b283      	uxth	r3, r0
 800e830:	1acb      	subs	r3, r1, r3
 800e832:	0c00      	lsrs	r0, r0, #16
 800e834:	4463      	add	r3, ip
 800e836:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e83a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e83e:	b29b      	uxth	r3, r3
 800e840:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e844:	4576      	cmp	r6, lr
 800e846:	f849 3b04 	str.w	r3, [r9], #4
 800e84a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e84e:	d8e5      	bhi.n	800e81c <__mdiff+0x88>
 800e850:	1b33      	subs	r3, r6, r4
 800e852:	3b15      	subs	r3, #21
 800e854:	f023 0303 	bic.w	r3, r3, #3
 800e858:	3415      	adds	r4, #21
 800e85a:	3304      	adds	r3, #4
 800e85c:	42a6      	cmp	r6, r4
 800e85e:	bf38      	it	cc
 800e860:	2304      	movcc	r3, #4
 800e862:	441d      	add	r5, r3
 800e864:	445b      	add	r3, fp
 800e866:	461e      	mov	r6, r3
 800e868:	462c      	mov	r4, r5
 800e86a:	4544      	cmp	r4, r8
 800e86c:	d30e      	bcc.n	800e88c <__mdiff+0xf8>
 800e86e:	f108 0103 	add.w	r1, r8, #3
 800e872:	1b49      	subs	r1, r1, r5
 800e874:	f021 0103 	bic.w	r1, r1, #3
 800e878:	3d03      	subs	r5, #3
 800e87a:	45a8      	cmp	r8, r5
 800e87c:	bf38      	it	cc
 800e87e:	2100      	movcc	r1, #0
 800e880:	440b      	add	r3, r1
 800e882:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e886:	b191      	cbz	r1, 800e8ae <__mdiff+0x11a>
 800e888:	6117      	str	r7, [r2, #16]
 800e88a:	e79d      	b.n	800e7c8 <__mdiff+0x34>
 800e88c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e890:	46e6      	mov	lr, ip
 800e892:	0c08      	lsrs	r0, r1, #16
 800e894:	fa1c fc81 	uxtah	ip, ip, r1
 800e898:	4471      	add	r1, lr
 800e89a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e89e:	b289      	uxth	r1, r1
 800e8a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e8a4:	f846 1b04 	str.w	r1, [r6], #4
 800e8a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8ac:	e7dd      	b.n	800e86a <__mdiff+0xd6>
 800e8ae:	3f01      	subs	r7, #1
 800e8b0:	e7e7      	b.n	800e882 <__mdiff+0xee>
 800e8b2:	bf00      	nop
 800e8b4:	08062281 	.word	0x08062281
 800e8b8:	08062309 	.word	0x08062309

0800e8bc <__ulp>:
 800e8bc:	b082      	sub	sp, #8
 800e8be:	ed8d 0b00 	vstr	d0, [sp]
 800e8c2:	9a01      	ldr	r2, [sp, #4]
 800e8c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e904 <__ulp+0x48>)
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	dc08      	bgt.n	800e8e2 <__ulp+0x26>
 800e8d0:	425b      	negs	r3, r3
 800e8d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e8d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e8da:	da04      	bge.n	800e8e6 <__ulp+0x2a>
 800e8dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e8e0:	4113      	asrs	r3, r2
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	e008      	b.n	800e8f8 <__ulp+0x3c>
 800e8e6:	f1a2 0314 	sub.w	r3, r2, #20
 800e8ea:	2b1e      	cmp	r3, #30
 800e8ec:	bfda      	itte	le
 800e8ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e8f2:	40da      	lsrle	r2, r3
 800e8f4:	2201      	movgt	r2, #1
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	4610      	mov	r0, r2
 800e8fc:	ec41 0b10 	vmov	d0, r0, r1
 800e900:	b002      	add	sp, #8
 800e902:	4770      	bx	lr
 800e904:	7ff00000 	.word	0x7ff00000

0800e908 <__b2d>:
 800e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e90c:	6906      	ldr	r6, [r0, #16]
 800e90e:	f100 0814 	add.w	r8, r0, #20
 800e912:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e916:	1f37      	subs	r7, r6, #4
 800e918:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e91c:	4610      	mov	r0, r2
 800e91e:	f7ff fd4b 	bl	800e3b8 <__hi0bits>
 800e922:	f1c0 0320 	rsb	r3, r0, #32
 800e926:	280a      	cmp	r0, #10
 800e928:	600b      	str	r3, [r1, #0]
 800e92a:	491b      	ldr	r1, [pc, #108]	@ (800e998 <__b2d+0x90>)
 800e92c:	dc15      	bgt.n	800e95a <__b2d+0x52>
 800e92e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e932:	fa22 f30c 	lsr.w	r3, r2, ip
 800e936:	45b8      	cmp	r8, r7
 800e938:	ea43 0501 	orr.w	r5, r3, r1
 800e93c:	bf34      	ite	cc
 800e93e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e942:	2300      	movcs	r3, #0
 800e944:	3015      	adds	r0, #21
 800e946:	fa02 f000 	lsl.w	r0, r2, r0
 800e94a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e94e:	4303      	orrs	r3, r0
 800e950:	461c      	mov	r4, r3
 800e952:	ec45 4b10 	vmov	d0, r4, r5
 800e956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95a:	45b8      	cmp	r8, r7
 800e95c:	bf3a      	itte	cc
 800e95e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e962:	f1a6 0708 	subcc.w	r7, r6, #8
 800e966:	2300      	movcs	r3, #0
 800e968:	380b      	subs	r0, #11
 800e96a:	d012      	beq.n	800e992 <__b2d+0x8a>
 800e96c:	f1c0 0120 	rsb	r1, r0, #32
 800e970:	fa23 f401 	lsr.w	r4, r3, r1
 800e974:	4082      	lsls	r2, r0
 800e976:	4322      	orrs	r2, r4
 800e978:	4547      	cmp	r7, r8
 800e97a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e97e:	bf8c      	ite	hi
 800e980:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e984:	2200      	movls	r2, #0
 800e986:	4083      	lsls	r3, r0
 800e988:	40ca      	lsrs	r2, r1
 800e98a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e98e:	4313      	orrs	r3, r2
 800e990:	e7de      	b.n	800e950 <__b2d+0x48>
 800e992:	ea42 0501 	orr.w	r5, r2, r1
 800e996:	e7db      	b.n	800e950 <__b2d+0x48>
 800e998:	3ff00000 	.word	0x3ff00000

0800e99c <__d2b>:
 800e99c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9a0:	460f      	mov	r7, r1
 800e9a2:	2101      	movs	r1, #1
 800e9a4:	ec59 8b10 	vmov	r8, r9, d0
 800e9a8:	4616      	mov	r6, r2
 800e9aa:	f7ff fc13 	bl	800e1d4 <_Balloc>
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	b930      	cbnz	r0, 800e9c0 <__d2b+0x24>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	4b23      	ldr	r3, [pc, #140]	@ (800ea44 <__d2b+0xa8>)
 800e9b6:	4824      	ldr	r0, [pc, #144]	@ (800ea48 <__d2b+0xac>)
 800e9b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800e9bc:	f001 f87a 	bl	800fab4 <__assert_func>
 800e9c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e9c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9c8:	b10d      	cbz	r5, 800e9ce <__d2b+0x32>
 800e9ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e9ce:	9301      	str	r3, [sp, #4]
 800e9d0:	f1b8 0300 	subs.w	r3, r8, #0
 800e9d4:	d023      	beq.n	800ea1e <__d2b+0x82>
 800e9d6:	4668      	mov	r0, sp
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	f7ff fd0c 	bl	800e3f6 <__lo0bits>
 800e9de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e9e2:	b1d0      	cbz	r0, 800ea1a <__d2b+0x7e>
 800e9e4:	f1c0 0320 	rsb	r3, r0, #32
 800e9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9ec:	430b      	orrs	r3, r1
 800e9ee:	40c2      	lsrs	r2, r0
 800e9f0:	6163      	str	r3, [r4, #20]
 800e9f2:	9201      	str	r2, [sp, #4]
 800e9f4:	9b01      	ldr	r3, [sp, #4]
 800e9f6:	61a3      	str	r3, [r4, #24]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	bf0c      	ite	eq
 800e9fc:	2201      	moveq	r2, #1
 800e9fe:	2202      	movne	r2, #2
 800ea00:	6122      	str	r2, [r4, #16]
 800ea02:	b1a5      	cbz	r5, 800ea2e <__d2b+0x92>
 800ea04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea08:	4405      	add	r5, r0
 800ea0a:	603d      	str	r5, [r7, #0]
 800ea0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea10:	6030      	str	r0, [r6, #0]
 800ea12:	4620      	mov	r0, r4
 800ea14:	b003      	add	sp, #12
 800ea16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea1a:	6161      	str	r1, [r4, #20]
 800ea1c:	e7ea      	b.n	800e9f4 <__d2b+0x58>
 800ea1e:	a801      	add	r0, sp, #4
 800ea20:	f7ff fce9 	bl	800e3f6 <__lo0bits>
 800ea24:	9b01      	ldr	r3, [sp, #4]
 800ea26:	6163      	str	r3, [r4, #20]
 800ea28:	3020      	adds	r0, #32
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	e7e8      	b.n	800ea00 <__d2b+0x64>
 800ea2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ea36:	6038      	str	r0, [r7, #0]
 800ea38:	6918      	ldr	r0, [r3, #16]
 800ea3a:	f7ff fcbd 	bl	800e3b8 <__hi0bits>
 800ea3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea42:	e7e5      	b.n	800ea10 <__d2b+0x74>
 800ea44:	08062281 	.word	0x08062281
 800ea48:	08062309 	.word	0x08062309

0800ea4c <__ratio>:
 800ea4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea50:	b085      	sub	sp, #20
 800ea52:	e9cd 1000 	strd	r1, r0, [sp]
 800ea56:	a902      	add	r1, sp, #8
 800ea58:	f7ff ff56 	bl	800e908 <__b2d>
 800ea5c:	9800      	ldr	r0, [sp, #0]
 800ea5e:	a903      	add	r1, sp, #12
 800ea60:	ec55 4b10 	vmov	r4, r5, d0
 800ea64:	f7ff ff50 	bl	800e908 <__b2d>
 800ea68:	9b01      	ldr	r3, [sp, #4]
 800ea6a:	6919      	ldr	r1, [r3, #16]
 800ea6c:	9b00      	ldr	r3, [sp, #0]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	1ac9      	subs	r1, r1, r3
 800ea72:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ea76:	1a9b      	subs	r3, r3, r2
 800ea78:	ec5b ab10 	vmov	sl, fp, d0
 800ea7c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bfce      	itee	gt
 800ea84:	462a      	movgt	r2, r5
 800ea86:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea8a:	465a      	movle	r2, fp
 800ea8c:	462f      	mov	r7, r5
 800ea8e:	46d9      	mov	r9, fp
 800ea90:	bfcc      	ite	gt
 800ea92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ea96:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ea9a:	464b      	mov	r3, r9
 800ea9c:	4652      	mov	r2, sl
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	f7f1 fed3 	bl	800084c <__aeabi_ddiv>
 800eaa6:	ec41 0b10 	vmov	d0, r0, r1
 800eaaa:	b005      	add	sp, #20
 800eaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eab0 <__copybits>:
 800eab0:	3901      	subs	r1, #1
 800eab2:	b570      	push	{r4, r5, r6, lr}
 800eab4:	1149      	asrs	r1, r1, #5
 800eab6:	6914      	ldr	r4, [r2, #16]
 800eab8:	3101      	adds	r1, #1
 800eaba:	f102 0314 	add.w	r3, r2, #20
 800eabe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eac2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eac6:	1f05      	subs	r5, r0, #4
 800eac8:	42a3      	cmp	r3, r4
 800eaca:	d30c      	bcc.n	800eae6 <__copybits+0x36>
 800eacc:	1aa3      	subs	r3, r4, r2
 800eace:	3b11      	subs	r3, #17
 800ead0:	f023 0303 	bic.w	r3, r3, #3
 800ead4:	3211      	adds	r2, #17
 800ead6:	42a2      	cmp	r2, r4
 800ead8:	bf88      	it	hi
 800eada:	2300      	movhi	r3, #0
 800eadc:	4418      	add	r0, r3
 800eade:	2300      	movs	r3, #0
 800eae0:	4288      	cmp	r0, r1
 800eae2:	d305      	bcc.n	800eaf0 <__copybits+0x40>
 800eae4:	bd70      	pop	{r4, r5, r6, pc}
 800eae6:	f853 6b04 	ldr.w	r6, [r3], #4
 800eaea:	f845 6f04 	str.w	r6, [r5, #4]!
 800eaee:	e7eb      	b.n	800eac8 <__copybits+0x18>
 800eaf0:	f840 3b04 	str.w	r3, [r0], #4
 800eaf4:	e7f4      	b.n	800eae0 <__copybits+0x30>

0800eaf6 <__any_on>:
 800eaf6:	f100 0214 	add.w	r2, r0, #20
 800eafa:	6900      	ldr	r0, [r0, #16]
 800eafc:	114b      	asrs	r3, r1, #5
 800eafe:	4298      	cmp	r0, r3
 800eb00:	b510      	push	{r4, lr}
 800eb02:	db11      	blt.n	800eb28 <__any_on+0x32>
 800eb04:	dd0a      	ble.n	800eb1c <__any_on+0x26>
 800eb06:	f011 011f 	ands.w	r1, r1, #31
 800eb0a:	d007      	beq.n	800eb1c <__any_on+0x26>
 800eb0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb10:	fa24 f001 	lsr.w	r0, r4, r1
 800eb14:	fa00 f101 	lsl.w	r1, r0, r1
 800eb18:	428c      	cmp	r4, r1
 800eb1a:	d10b      	bne.n	800eb34 <__any_on+0x3e>
 800eb1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d803      	bhi.n	800eb2c <__any_on+0x36>
 800eb24:	2000      	movs	r0, #0
 800eb26:	bd10      	pop	{r4, pc}
 800eb28:	4603      	mov	r3, r0
 800eb2a:	e7f7      	b.n	800eb1c <__any_on+0x26>
 800eb2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb30:	2900      	cmp	r1, #0
 800eb32:	d0f5      	beq.n	800eb20 <__any_on+0x2a>
 800eb34:	2001      	movs	r0, #1
 800eb36:	e7f6      	b.n	800eb26 <__any_on+0x30>

0800eb38 <_malloc_usable_size_r>:
 800eb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb3c:	1f18      	subs	r0, r3, #4
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	bfbc      	itt	lt
 800eb42:	580b      	ldrlt	r3, [r1, r0]
 800eb44:	18c0      	addlt	r0, r0, r3
 800eb46:	4770      	bx	lr

0800eb48 <_strtoul_l.constprop.0>:
 800eb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb4c:	4e34      	ldr	r6, [pc, #208]	@ (800ec20 <_strtoul_l.constprop.0+0xd8>)
 800eb4e:	4686      	mov	lr, r0
 800eb50:	460d      	mov	r5, r1
 800eb52:	4628      	mov	r0, r5
 800eb54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb58:	5d37      	ldrb	r7, [r6, r4]
 800eb5a:	f017 0708 	ands.w	r7, r7, #8
 800eb5e:	d1f8      	bne.n	800eb52 <_strtoul_l.constprop.0+0xa>
 800eb60:	2c2d      	cmp	r4, #45	@ 0x2d
 800eb62:	d12f      	bne.n	800ebc4 <_strtoul_l.constprop.0+0x7c>
 800eb64:	782c      	ldrb	r4, [r5, #0]
 800eb66:	2701      	movs	r7, #1
 800eb68:	1c85      	adds	r5, r0, #2
 800eb6a:	f033 0010 	bics.w	r0, r3, #16
 800eb6e:	d109      	bne.n	800eb84 <_strtoul_l.constprop.0+0x3c>
 800eb70:	2c30      	cmp	r4, #48	@ 0x30
 800eb72:	d12c      	bne.n	800ebce <_strtoul_l.constprop.0+0x86>
 800eb74:	7828      	ldrb	r0, [r5, #0]
 800eb76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800eb7a:	2858      	cmp	r0, #88	@ 0x58
 800eb7c:	d127      	bne.n	800ebce <_strtoul_l.constprop.0+0x86>
 800eb7e:	786c      	ldrb	r4, [r5, #1]
 800eb80:	2310      	movs	r3, #16
 800eb82:	3502      	adds	r5, #2
 800eb84:	f04f 38ff 	mov.w	r8, #4294967295
 800eb88:	2600      	movs	r6, #0
 800eb8a:	fbb8 f8f3 	udiv	r8, r8, r3
 800eb8e:	fb03 f908 	mul.w	r9, r3, r8
 800eb92:	ea6f 0909 	mvn.w	r9, r9
 800eb96:	4630      	mov	r0, r6
 800eb98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800eb9c:	f1bc 0f09 	cmp.w	ip, #9
 800eba0:	d81c      	bhi.n	800ebdc <_strtoul_l.constprop.0+0x94>
 800eba2:	4664      	mov	r4, ip
 800eba4:	42a3      	cmp	r3, r4
 800eba6:	dd2a      	ble.n	800ebfe <_strtoul_l.constprop.0+0xb6>
 800eba8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ebac:	d007      	beq.n	800ebbe <_strtoul_l.constprop.0+0x76>
 800ebae:	4580      	cmp	r8, r0
 800ebb0:	d322      	bcc.n	800ebf8 <_strtoul_l.constprop.0+0xb0>
 800ebb2:	d101      	bne.n	800ebb8 <_strtoul_l.constprop.0+0x70>
 800ebb4:	45a1      	cmp	r9, r4
 800ebb6:	db1f      	blt.n	800ebf8 <_strtoul_l.constprop.0+0xb0>
 800ebb8:	fb00 4003 	mla	r0, r0, r3, r4
 800ebbc:	2601      	movs	r6, #1
 800ebbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebc2:	e7e9      	b.n	800eb98 <_strtoul_l.constprop.0+0x50>
 800ebc4:	2c2b      	cmp	r4, #43	@ 0x2b
 800ebc6:	bf04      	itt	eq
 800ebc8:	782c      	ldrbeq	r4, [r5, #0]
 800ebca:	1c85      	addeq	r5, r0, #2
 800ebcc:	e7cd      	b.n	800eb6a <_strtoul_l.constprop.0+0x22>
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1d8      	bne.n	800eb84 <_strtoul_l.constprop.0+0x3c>
 800ebd2:	2c30      	cmp	r4, #48	@ 0x30
 800ebd4:	bf0c      	ite	eq
 800ebd6:	2308      	moveq	r3, #8
 800ebd8:	230a      	movne	r3, #10
 800ebda:	e7d3      	b.n	800eb84 <_strtoul_l.constprop.0+0x3c>
 800ebdc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ebe0:	f1bc 0f19 	cmp.w	ip, #25
 800ebe4:	d801      	bhi.n	800ebea <_strtoul_l.constprop.0+0xa2>
 800ebe6:	3c37      	subs	r4, #55	@ 0x37
 800ebe8:	e7dc      	b.n	800eba4 <_strtoul_l.constprop.0+0x5c>
 800ebea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ebee:	f1bc 0f19 	cmp.w	ip, #25
 800ebf2:	d804      	bhi.n	800ebfe <_strtoul_l.constprop.0+0xb6>
 800ebf4:	3c57      	subs	r4, #87	@ 0x57
 800ebf6:	e7d5      	b.n	800eba4 <_strtoul_l.constprop.0+0x5c>
 800ebf8:	f04f 36ff 	mov.w	r6, #4294967295
 800ebfc:	e7df      	b.n	800ebbe <_strtoul_l.constprop.0+0x76>
 800ebfe:	1c73      	adds	r3, r6, #1
 800ec00:	d106      	bne.n	800ec10 <_strtoul_l.constprop.0+0xc8>
 800ec02:	2322      	movs	r3, #34	@ 0x22
 800ec04:	f8ce 3000 	str.w	r3, [lr]
 800ec08:	4630      	mov	r0, r6
 800ec0a:	b932      	cbnz	r2, 800ec1a <_strtoul_l.constprop.0+0xd2>
 800ec0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec10:	b107      	cbz	r7, 800ec14 <_strtoul_l.constprop.0+0xcc>
 800ec12:	4240      	negs	r0, r0
 800ec14:	2a00      	cmp	r2, #0
 800ec16:	d0f9      	beq.n	800ec0c <_strtoul_l.constprop.0+0xc4>
 800ec18:	b106      	cbz	r6, 800ec1c <_strtoul_l.constprop.0+0xd4>
 800ec1a:	1e69      	subs	r1, r5, #1
 800ec1c:	6011      	str	r1, [r2, #0]
 800ec1e:	e7f5      	b.n	800ec0c <_strtoul_l.constprop.0+0xc4>
 800ec20:	08062179 	.word	0x08062179

0800ec24 <_strtoul_r>:
 800ec24:	f7ff bf90 	b.w	800eb48 <_strtoul_l.constprop.0>

0800ec28 <__ascii_wctomb>:
 800ec28:	4603      	mov	r3, r0
 800ec2a:	4608      	mov	r0, r1
 800ec2c:	b141      	cbz	r1, 800ec40 <__ascii_wctomb+0x18>
 800ec2e:	2aff      	cmp	r2, #255	@ 0xff
 800ec30:	d904      	bls.n	800ec3c <__ascii_wctomb+0x14>
 800ec32:	228a      	movs	r2, #138	@ 0x8a
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3a:	4770      	bx	lr
 800ec3c:	700a      	strb	r2, [r1, #0]
 800ec3e:	2001      	movs	r0, #1
 800ec40:	4770      	bx	lr

0800ec42 <__ssputs_r>:
 800ec42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec46:	688e      	ldr	r6, [r1, #8]
 800ec48:	461f      	mov	r7, r3
 800ec4a:	42be      	cmp	r6, r7
 800ec4c:	680b      	ldr	r3, [r1, #0]
 800ec4e:	4682      	mov	sl, r0
 800ec50:	460c      	mov	r4, r1
 800ec52:	4690      	mov	r8, r2
 800ec54:	d82d      	bhi.n	800ecb2 <__ssputs_r+0x70>
 800ec56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec5a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ec5e:	d026      	beq.n	800ecae <__ssputs_r+0x6c>
 800ec60:	6965      	ldr	r5, [r4, #20]
 800ec62:	6909      	ldr	r1, [r1, #16]
 800ec64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec68:	eba3 0901 	sub.w	r9, r3, r1
 800ec6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec70:	1c7b      	adds	r3, r7, #1
 800ec72:	444b      	add	r3, r9
 800ec74:	106d      	asrs	r5, r5, #1
 800ec76:	429d      	cmp	r5, r3
 800ec78:	bf38      	it	cc
 800ec7a:	461d      	movcc	r5, r3
 800ec7c:	0553      	lsls	r3, r2, #21
 800ec7e:	d527      	bpl.n	800ecd0 <__ssputs_r+0x8e>
 800ec80:	4629      	mov	r1, r5
 800ec82:	f7fd fd53 	bl	800c72c <_malloc_r>
 800ec86:	4606      	mov	r6, r0
 800ec88:	b360      	cbz	r0, 800ece4 <__ssputs_r+0xa2>
 800ec8a:	6921      	ldr	r1, [r4, #16]
 800ec8c:	464a      	mov	r2, r9
 800ec8e:	f7fe fef2 	bl	800da76 <memcpy>
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ec98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	6126      	str	r6, [r4, #16]
 800eca0:	6165      	str	r5, [r4, #20]
 800eca2:	444e      	add	r6, r9
 800eca4:	eba5 0509 	sub.w	r5, r5, r9
 800eca8:	6026      	str	r6, [r4, #0]
 800ecaa:	60a5      	str	r5, [r4, #8]
 800ecac:	463e      	mov	r6, r7
 800ecae:	42be      	cmp	r6, r7
 800ecb0:	d900      	bls.n	800ecb4 <__ssputs_r+0x72>
 800ecb2:	463e      	mov	r6, r7
 800ecb4:	6820      	ldr	r0, [r4, #0]
 800ecb6:	4632      	mov	r2, r6
 800ecb8:	4641      	mov	r1, r8
 800ecba:	f000 fee0 	bl	800fa7e <memmove>
 800ecbe:	68a3      	ldr	r3, [r4, #8]
 800ecc0:	1b9b      	subs	r3, r3, r6
 800ecc2:	60a3      	str	r3, [r4, #8]
 800ecc4:	6823      	ldr	r3, [r4, #0]
 800ecc6:	4433      	add	r3, r6
 800ecc8:	6023      	str	r3, [r4, #0]
 800ecca:	2000      	movs	r0, #0
 800eccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd0:	462a      	mov	r2, r5
 800ecd2:	f7fd fdbf 	bl	800c854 <_realloc_r>
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d1e0      	bne.n	800ec9e <__ssputs_r+0x5c>
 800ecdc:	6921      	ldr	r1, [r4, #16]
 800ecde:	4650      	mov	r0, sl
 800ece0:	f7fe fee2 	bl	800daa8 <_free_r>
 800ece4:	230c      	movs	r3, #12
 800ece6:	f8ca 3000 	str.w	r3, [sl]
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecf0:	81a3      	strh	r3, [r4, #12]
 800ecf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf6:	e7e9      	b.n	800eccc <__ssputs_r+0x8a>

0800ecf8 <_svfiprintf_r>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	4698      	mov	r8, r3
 800ecfe:	898b      	ldrh	r3, [r1, #12]
 800ed00:	061b      	lsls	r3, r3, #24
 800ed02:	b09d      	sub	sp, #116	@ 0x74
 800ed04:	4607      	mov	r7, r0
 800ed06:	460d      	mov	r5, r1
 800ed08:	4614      	mov	r4, r2
 800ed0a:	d510      	bpl.n	800ed2e <_svfiprintf_r+0x36>
 800ed0c:	690b      	ldr	r3, [r1, #16]
 800ed0e:	b973      	cbnz	r3, 800ed2e <_svfiprintf_r+0x36>
 800ed10:	2140      	movs	r1, #64	@ 0x40
 800ed12:	f7fd fd0b 	bl	800c72c <_malloc_r>
 800ed16:	6028      	str	r0, [r5, #0]
 800ed18:	6128      	str	r0, [r5, #16]
 800ed1a:	b930      	cbnz	r0, 800ed2a <_svfiprintf_r+0x32>
 800ed1c:	230c      	movs	r3, #12
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	b01d      	add	sp, #116	@ 0x74
 800ed26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed2a:	2340      	movs	r3, #64	@ 0x40
 800ed2c:	616b      	str	r3, [r5, #20]
 800ed2e:	2300      	movs	r3, #0
 800ed30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed32:	2320      	movs	r3, #32
 800ed34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed3c:	2330      	movs	r3, #48	@ 0x30
 800ed3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eedc <_svfiprintf_r+0x1e4>
 800ed42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed46:	f04f 0901 	mov.w	r9, #1
 800ed4a:	4623      	mov	r3, r4
 800ed4c:	469a      	mov	sl, r3
 800ed4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed52:	b10a      	cbz	r2, 800ed58 <_svfiprintf_r+0x60>
 800ed54:	2a25      	cmp	r2, #37	@ 0x25
 800ed56:	d1f9      	bne.n	800ed4c <_svfiprintf_r+0x54>
 800ed58:	ebba 0b04 	subs.w	fp, sl, r4
 800ed5c:	d00b      	beq.n	800ed76 <_svfiprintf_r+0x7e>
 800ed5e:	465b      	mov	r3, fp
 800ed60:	4622      	mov	r2, r4
 800ed62:	4629      	mov	r1, r5
 800ed64:	4638      	mov	r0, r7
 800ed66:	f7ff ff6c 	bl	800ec42 <__ssputs_r>
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	f000 80a7 	beq.w	800eebe <_svfiprintf_r+0x1c6>
 800ed70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed72:	445a      	add	r2, fp
 800ed74:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed76:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 809f 	beq.w	800eebe <_svfiprintf_r+0x1c6>
 800ed80:	2300      	movs	r3, #0
 800ed82:	f04f 32ff 	mov.w	r2, #4294967295
 800ed86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed8a:	f10a 0a01 	add.w	sl, sl, #1
 800ed8e:	9304      	str	r3, [sp, #16]
 800ed90:	9307      	str	r3, [sp, #28]
 800ed92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed96:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed98:	4654      	mov	r4, sl
 800ed9a:	2205      	movs	r2, #5
 800ed9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda0:	484e      	ldr	r0, [pc, #312]	@ (800eedc <_svfiprintf_r+0x1e4>)
 800eda2:	f7f1 fa1d 	bl	80001e0 <memchr>
 800eda6:	9a04      	ldr	r2, [sp, #16]
 800eda8:	b9d8      	cbnz	r0, 800ede2 <_svfiprintf_r+0xea>
 800edaa:	06d0      	lsls	r0, r2, #27
 800edac:	bf44      	itt	mi
 800edae:	2320      	movmi	r3, #32
 800edb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edb4:	0711      	lsls	r1, r2, #28
 800edb6:	bf44      	itt	mi
 800edb8:	232b      	movmi	r3, #43	@ 0x2b
 800edba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edbe:	f89a 3000 	ldrb.w	r3, [sl]
 800edc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800edc4:	d015      	beq.n	800edf2 <_svfiprintf_r+0xfa>
 800edc6:	9a07      	ldr	r2, [sp, #28]
 800edc8:	4654      	mov	r4, sl
 800edca:	2000      	movs	r0, #0
 800edcc:	f04f 0c0a 	mov.w	ip, #10
 800edd0:	4621      	mov	r1, r4
 800edd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edd6:	3b30      	subs	r3, #48	@ 0x30
 800edd8:	2b09      	cmp	r3, #9
 800edda:	d94b      	bls.n	800ee74 <_svfiprintf_r+0x17c>
 800eddc:	b1b0      	cbz	r0, 800ee0c <_svfiprintf_r+0x114>
 800edde:	9207      	str	r2, [sp, #28]
 800ede0:	e014      	b.n	800ee0c <_svfiprintf_r+0x114>
 800ede2:	eba0 0308 	sub.w	r3, r0, r8
 800ede6:	fa09 f303 	lsl.w	r3, r9, r3
 800edea:	4313      	orrs	r3, r2
 800edec:	9304      	str	r3, [sp, #16]
 800edee:	46a2      	mov	sl, r4
 800edf0:	e7d2      	b.n	800ed98 <_svfiprintf_r+0xa0>
 800edf2:	9b03      	ldr	r3, [sp, #12]
 800edf4:	1d19      	adds	r1, r3, #4
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	9103      	str	r1, [sp, #12]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	bfbb      	ittet	lt
 800edfe:	425b      	neglt	r3, r3
 800ee00:	f042 0202 	orrlt.w	r2, r2, #2
 800ee04:	9307      	strge	r3, [sp, #28]
 800ee06:	9307      	strlt	r3, [sp, #28]
 800ee08:	bfb8      	it	lt
 800ee0a:	9204      	strlt	r2, [sp, #16]
 800ee0c:	7823      	ldrb	r3, [r4, #0]
 800ee0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee10:	d10a      	bne.n	800ee28 <_svfiprintf_r+0x130>
 800ee12:	7863      	ldrb	r3, [r4, #1]
 800ee14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee16:	d132      	bne.n	800ee7e <_svfiprintf_r+0x186>
 800ee18:	9b03      	ldr	r3, [sp, #12]
 800ee1a:	1d1a      	adds	r2, r3, #4
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	9203      	str	r2, [sp, #12]
 800ee20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee24:	3402      	adds	r4, #2
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eeec <_svfiprintf_r+0x1f4>
 800ee2c:	7821      	ldrb	r1, [r4, #0]
 800ee2e:	2203      	movs	r2, #3
 800ee30:	4650      	mov	r0, sl
 800ee32:	f7f1 f9d5 	bl	80001e0 <memchr>
 800ee36:	b138      	cbz	r0, 800ee48 <_svfiprintf_r+0x150>
 800ee38:	9b04      	ldr	r3, [sp, #16]
 800ee3a:	eba0 000a 	sub.w	r0, r0, sl
 800ee3e:	2240      	movs	r2, #64	@ 0x40
 800ee40:	4082      	lsls	r2, r0
 800ee42:	4313      	orrs	r3, r2
 800ee44:	3401      	adds	r4, #1
 800ee46:	9304      	str	r3, [sp, #16]
 800ee48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee4c:	4824      	ldr	r0, [pc, #144]	@ (800eee0 <_svfiprintf_r+0x1e8>)
 800ee4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee52:	2206      	movs	r2, #6
 800ee54:	f7f1 f9c4 	bl	80001e0 <memchr>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d036      	beq.n	800eeca <_svfiprintf_r+0x1d2>
 800ee5c:	4b21      	ldr	r3, [pc, #132]	@ (800eee4 <_svfiprintf_r+0x1ec>)
 800ee5e:	bb1b      	cbnz	r3, 800eea8 <_svfiprintf_r+0x1b0>
 800ee60:	9b03      	ldr	r3, [sp, #12]
 800ee62:	3307      	adds	r3, #7
 800ee64:	f023 0307 	bic.w	r3, r3, #7
 800ee68:	3308      	adds	r3, #8
 800ee6a:	9303      	str	r3, [sp, #12]
 800ee6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee6e:	4433      	add	r3, r6
 800ee70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee72:	e76a      	b.n	800ed4a <_svfiprintf_r+0x52>
 800ee74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee78:	460c      	mov	r4, r1
 800ee7a:	2001      	movs	r0, #1
 800ee7c:	e7a8      	b.n	800edd0 <_svfiprintf_r+0xd8>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	3401      	adds	r4, #1
 800ee82:	9305      	str	r3, [sp, #20]
 800ee84:	4619      	mov	r1, r3
 800ee86:	f04f 0c0a 	mov.w	ip, #10
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee90:	3a30      	subs	r2, #48	@ 0x30
 800ee92:	2a09      	cmp	r2, #9
 800ee94:	d903      	bls.n	800ee9e <_svfiprintf_r+0x1a6>
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d0c6      	beq.n	800ee28 <_svfiprintf_r+0x130>
 800ee9a:	9105      	str	r1, [sp, #20]
 800ee9c:	e7c4      	b.n	800ee28 <_svfiprintf_r+0x130>
 800ee9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eea2:	4604      	mov	r4, r0
 800eea4:	2301      	movs	r3, #1
 800eea6:	e7f0      	b.n	800ee8a <_svfiprintf_r+0x192>
 800eea8:	ab03      	add	r3, sp, #12
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	462a      	mov	r2, r5
 800eeae:	4b0e      	ldr	r3, [pc, #56]	@ (800eee8 <_svfiprintf_r+0x1f0>)
 800eeb0:	a904      	add	r1, sp, #16
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	f3af 8000 	nop.w
 800eeb8:	1c42      	adds	r2, r0, #1
 800eeba:	4606      	mov	r6, r0
 800eebc:	d1d6      	bne.n	800ee6c <_svfiprintf_r+0x174>
 800eebe:	89ab      	ldrh	r3, [r5, #12]
 800eec0:	065b      	lsls	r3, r3, #25
 800eec2:	f53f af2d 	bmi.w	800ed20 <_svfiprintf_r+0x28>
 800eec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eec8:	e72c      	b.n	800ed24 <_svfiprintf_r+0x2c>
 800eeca:	ab03      	add	r3, sp, #12
 800eecc:	9300      	str	r3, [sp, #0]
 800eece:	462a      	mov	r2, r5
 800eed0:	4b05      	ldr	r3, [pc, #20]	@ (800eee8 <_svfiprintf_r+0x1f0>)
 800eed2:	a904      	add	r1, sp, #16
 800eed4:	4638      	mov	r0, r7
 800eed6:	f000 fa45 	bl	800f364 <_printf_i>
 800eeda:	e7ed      	b.n	800eeb8 <_svfiprintf_r+0x1c0>
 800eedc:	08062460 	.word	0x08062460
 800eee0:	0806246a 	.word	0x0806246a
 800eee4:	00000000 	.word	0x00000000
 800eee8:	0800ec43 	.word	0x0800ec43
 800eeec:	08062466 	.word	0x08062466

0800eef0 <_sungetc_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	1c4b      	adds	r3, r1, #1
 800eef4:	4614      	mov	r4, r2
 800eef6:	d103      	bne.n	800ef00 <_sungetc_r+0x10>
 800eef8:	f04f 35ff 	mov.w	r5, #4294967295
 800eefc:	4628      	mov	r0, r5
 800eefe:	bd38      	pop	{r3, r4, r5, pc}
 800ef00:	8993      	ldrh	r3, [r2, #12]
 800ef02:	f023 0320 	bic.w	r3, r3, #32
 800ef06:	8193      	strh	r3, [r2, #12]
 800ef08:	6853      	ldr	r3, [r2, #4]
 800ef0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ef0c:	b2cd      	uxtb	r5, r1
 800ef0e:	b18a      	cbz	r2, 800ef34 <_sungetc_r+0x44>
 800ef10:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ef12:	429a      	cmp	r2, r3
 800ef14:	dd08      	ble.n	800ef28 <_sungetc_r+0x38>
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	1e5a      	subs	r2, r3, #1
 800ef1a:	6022      	str	r2, [r4, #0]
 800ef1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ef20:	6863      	ldr	r3, [r4, #4]
 800ef22:	3301      	adds	r3, #1
 800ef24:	6063      	str	r3, [r4, #4]
 800ef26:	e7e9      	b.n	800eefc <_sungetc_r+0xc>
 800ef28:	4621      	mov	r1, r4
 800ef2a:	f000 fd6e 	bl	800fa0a <__submore>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d0f1      	beq.n	800ef16 <_sungetc_r+0x26>
 800ef32:	e7e1      	b.n	800eef8 <_sungetc_r+0x8>
 800ef34:	6921      	ldr	r1, [r4, #16]
 800ef36:	6822      	ldr	r2, [r4, #0]
 800ef38:	b141      	cbz	r1, 800ef4c <_sungetc_r+0x5c>
 800ef3a:	4291      	cmp	r1, r2
 800ef3c:	d206      	bcs.n	800ef4c <_sungetc_r+0x5c>
 800ef3e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ef42:	42a9      	cmp	r1, r5
 800ef44:	d102      	bne.n	800ef4c <_sungetc_r+0x5c>
 800ef46:	3a01      	subs	r2, #1
 800ef48:	6022      	str	r2, [r4, #0]
 800ef4a:	e7ea      	b.n	800ef22 <_sungetc_r+0x32>
 800ef4c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ef50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef54:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef56:	2303      	movs	r3, #3
 800ef58:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ef5a:	4623      	mov	r3, r4
 800ef5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ef60:	6023      	str	r3, [r4, #0]
 800ef62:	2301      	movs	r3, #1
 800ef64:	e7de      	b.n	800ef24 <_sungetc_r+0x34>

0800ef66 <__ssrefill_r>:
 800ef66:	b510      	push	{r4, lr}
 800ef68:	460c      	mov	r4, r1
 800ef6a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ef6c:	b169      	cbz	r1, 800ef8a <__ssrefill_r+0x24>
 800ef6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef72:	4299      	cmp	r1, r3
 800ef74:	d001      	beq.n	800ef7a <__ssrefill_r+0x14>
 800ef76:	f7fe fd97 	bl	800daa8 <_free_r>
 800ef7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef7c:	6063      	str	r3, [r4, #4]
 800ef7e:	2000      	movs	r0, #0
 800ef80:	6360      	str	r0, [r4, #52]	@ 0x34
 800ef82:	b113      	cbz	r3, 800ef8a <__ssrefill_r+0x24>
 800ef84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ef86:	6023      	str	r3, [r4, #0]
 800ef88:	bd10      	pop	{r4, pc}
 800ef8a:	6923      	ldr	r3, [r4, #16]
 800ef8c:	6023      	str	r3, [r4, #0]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	6063      	str	r3, [r4, #4]
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	f043 0320 	orr.w	r3, r3, #32
 800ef98:	81a3      	strh	r3, [r4, #12]
 800ef9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef9e:	e7f3      	b.n	800ef88 <__ssrefill_r+0x22>

0800efa0 <__ssvfiscanf_r>:
 800efa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efa4:	460c      	mov	r4, r1
 800efa6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800efaa:	2100      	movs	r1, #0
 800efac:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800efb0:	49a5      	ldr	r1, [pc, #660]	@ (800f248 <__ssvfiscanf_r+0x2a8>)
 800efb2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800efb4:	f10d 0804 	add.w	r8, sp, #4
 800efb8:	49a4      	ldr	r1, [pc, #656]	@ (800f24c <__ssvfiscanf_r+0x2ac>)
 800efba:	4fa5      	ldr	r7, [pc, #660]	@ (800f250 <__ssvfiscanf_r+0x2b0>)
 800efbc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800efc0:	4606      	mov	r6, r0
 800efc2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	7813      	ldrb	r3, [r2, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f000 8158 	beq.w	800f27e <__ssvfiscanf_r+0x2de>
 800efce:	5cf9      	ldrb	r1, [r7, r3]
 800efd0:	f011 0108 	ands.w	r1, r1, #8
 800efd4:	f102 0501 	add.w	r5, r2, #1
 800efd8:	d019      	beq.n	800f00e <__ssvfiscanf_r+0x6e>
 800efda:	6863      	ldr	r3, [r4, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	dd0f      	ble.n	800f000 <__ssvfiscanf_r+0x60>
 800efe0:	6823      	ldr	r3, [r4, #0]
 800efe2:	781a      	ldrb	r2, [r3, #0]
 800efe4:	5cba      	ldrb	r2, [r7, r2]
 800efe6:	0712      	lsls	r2, r2, #28
 800efe8:	d401      	bmi.n	800efee <__ssvfiscanf_r+0x4e>
 800efea:	462a      	mov	r2, r5
 800efec:	e7eb      	b.n	800efc6 <__ssvfiscanf_r+0x26>
 800efee:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800eff0:	3201      	adds	r2, #1
 800eff2:	9245      	str	r2, [sp, #276]	@ 0x114
 800eff4:	6862      	ldr	r2, [r4, #4]
 800eff6:	3301      	adds	r3, #1
 800eff8:	3a01      	subs	r2, #1
 800effa:	6062      	str	r2, [r4, #4]
 800effc:	6023      	str	r3, [r4, #0]
 800effe:	e7ec      	b.n	800efda <__ssvfiscanf_r+0x3a>
 800f000:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f002:	4621      	mov	r1, r4
 800f004:	4630      	mov	r0, r6
 800f006:	4798      	blx	r3
 800f008:	2800      	cmp	r0, #0
 800f00a:	d0e9      	beq.n	800efe0 <__ssvfiscanf_r+0x40>
 800f00c:	e7ed      	b.n	800efea <__ssvfiscanf_r+0x4a>
 800f00e:	2b25      	cmp	r3, #37	@ 0x25
 800f010:	d012      	beq.n	800f038 <__ssvfiscanf_r+0x98>
 800f012:	4699      	mov	r9, r3
 800f014:	6863      	ldr	r3, [r4, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f340 8093 	ble.w	800f142 <__ssvfiscanf_r+0x1a2>
 800f01c:	6822      	ldr	r2, [r4, #0]
 800f01e:	7813      	ldrb	r3, [r2, #0]
 800f020:	454b      	cmp	r3, r9
 800f022:	f040 812c 	bne.w	800f27e <__ssvfiscanf_r+0x2de>
 800f026:	6863      	ldr	r3, [r4, #4]
 800f028:	3b01      	subs	r3, #1
 800f02a:	6063      	str	r3, [r4, #4]
 800f02c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f02e:	3201      	adds	r2, #1
 800f030:	3301      	adds	r3, #1
 800f032:	6022      	str	r2, [r4, #0]
 800f034:	9345      	str	r3, [sp, #276]	@ 0x114
 800f036:	e7d8      	b.n	800efea <__ssvfiscanf_r+0x4a>
 800f038:	9141      	str	r1, [sp, #260]	@ 0x104
 800f03a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f03c:	7853      	ldrb	r3, [r2, #1]
 800f03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f040:	bf02      	ittt	eq
 800f042:	2310      	moveq	r3, #16
 800f044:	1c95      	addeq	r5, r2, #2
 800f046:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f048:	220a      	movs	r2, #10
 800f04a:	46a9      	mov	r9, r5
 800f04c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f050:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f054:	2b09      	cmp	r3, #9
 800f056:	d91e      	bls.n	800f096 <__ssvfiscanf_r+0xf6>
 800f058:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f254 <__ssvfiscanf_r+0x2b4>
 800f05c:	2203      	movs	r2, #3
 800f05e:	4650      	mov	r0, sl
 800f060:	f7f1 f8be 	bl	80001e0 <memchr>
 800f064:	b138      	cbz	r0, 800f076 <__ssvfiscanf_r+0xd6>
 800f066:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f068:	eba0 000a 	sub.w	r0, r0, sl
 800f06c:	2301      	movs	r3, #1
 800f06e:	4083      	lsls	r3, r0
 800f070:	4313      	orrs	r3, r2
 800f072:	9341      	str	r3, [sp, #260]	@ 0x104
 800f074:	464d      	mov	r5, r9
 800f076:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f07a:	2b78      	cmp	r3, #120	@ 0x78
 800f07c:	d806      	bhi.n	800f08c <__ssvfiscanf_r+0xec>
 800f07e:	2b57      	cmp	r3, #87	@ 0x57
 800f080:	d810      	bhi.n	800f0a4 <__ssvfiscanf_r+0x104>
 800f082:	2b25      	cmp	r3, #37	@ 0x25
 800f084:	d0c5      	beq.n	800f012 <__ssvfiscanf_r+0x72>
 800f086:	d857      	bhi.n	800f138 <__ssvfiscanf_r+0x198>
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d065      	beq.n	800f158 <__ssvfiscanf_r+0x1b8>
 800f08c:	2303      	movs	r3, #3
 800f08e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f090:	230a      	movs	r3, #10
 800f092:	9342      	str	r3, [sp, #264]	@ 0x108
 800f094:	e078      	b.n	800f188 <__ssvfiscanf_r+0x1e8>
 800f096:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f098:	fb02 1103 	mla	r1, r2, r3, r1
 800f09c:	3930      	subs	r1, #48	@ 0x30
 800f09e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f0a0:	464d      	mov	r5, r9
 800f0a2:	e7d2      	b.n	800f04a <__ssvfiscanf_r+0xaa>
 800f0a4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f0a8:	2a20      	cmp	r2, #32
 800f0aa:	d8ef      	bhi.n	800f08c <__ssvfiscanf_r+0xec>
 800f0ac:	a101      	add	r1, pc, #4	@ (adr r1, 800f0b4 <__ssvfiscanf_r+0x114>)
 800f0ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f0b2:	bf00      	nop
 800f0b4:	0800f167 	.word	0x0800f167
 800f0b8:	0800f08d 	.word	0x0800f08d
 800f0bc:	0800f08d 	.word	0x0800f08d
 800f0c0:	0800f1c1 	.word	0x0800f1c1
 800f0c4:	0800f08d 	.word	0x0800f08d
 800f0c8:	0800f08d 	.word	0x0800f08d
 800f0cc:	0800f08d 	.word	0x0800f08d
 800f0d0:	0800f08d 	.word	0x0800f08d
 800f0d4:	0800f08d 	.word	0x0800f08d
 800f0d8:	0800f08d 	.word	0x0800f08d
 800f0dc:	0800f08d 	.word	0x0800f08d
 800f0e0:	0800f1d7 	.word	0x0800f1d7
 800f0e4:	0800f1bd 	.word	0x0800f1bd
 800f0e8:	0800f13f 	.word	0x0800f13f
 800f0ec:	0800f13f 	.word	0x0800f13f
 800f0f0:	0800f13f 	.word	0x0800f13f
 800f0f4:	0800f08d 	.word	0x0800f08d
 800f0f8:	0800f179 	.word	0x0800f179
 800f0fc:	0800f08d 	.word	0x0800f08d
 800f100:	0800f08d 	.word	0x0800f08d
 800f104:	0800f08d 	.word	0x0800f08d
 800f108:	0800f08d 	.word	0x0800f08d
 800f10c:	0800f1e7 	.word	0x0800f1e7
 800f110:	0800f181 	.word	0x0800f181
 800f114:	0800f15f 	.word	0x0800f15f
 800f118:	0800f08d 	.word	0x0800f08d
 800f11c:	0800f08d 	.word	0x0800f08d
 800f120:	0800f1e3 	.word	0x0800f1e3
 800f124:	0800f08d 	.word	0x0800f08d
 800f128:	0800f1bd 	.word	0x0800f1bd
 800f12c:	0800f08d 	.word	0x0800f08d
 800f130:	0800f08d 	.word	0x0800f08d
 800f134:	0800f167 	.word	0x0800f167
 800f138:	3b45      	subs	r3, #69	@ 0x45
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	d8a6      	bhi.n	800f08c <__ssvfiscanf_r+0xec>
 800f13e:	2305      	movs	r3, #5
 800f140:	e021      	b.n	800f186 <__ssvfiscanf_r+0x1e6>
 800f142:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f144:	4621      	mov	r1, r4
 800f146:	4630      	mov	r0, r6
 800f148:	4798      	blx	r3
 800f14a:	2800      	cmp	r0, #0
 800f14c:	f43f af66 	beq.w	800f01c <__ssvfiscanf_r+0x7c>
 800f150:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f152:	2800      	cmp	r0, #0
 800f154:	f040 808b 	bne.w	800f26e <__ssvfiscanf_r+0x2ce>
 800f158:	f04f 30ff 	mov.w	r0, #4294967295
 800f15c:	e08b      	b.n	800f276 <__ssvfiscanf_r+0x2d6>
 800f15e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f160:	f042 0220 	orr.w	r2, r2, #32
 800f164:	9241      	str	r2, [sp, #260]	@ 0x104
 800f166:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f16c:	9241      	str	r2, [sp, #260]	@ 0x104
 800f16e:	2210      	movs	r2, #16
 800f170:	2b6e      	cmp	r3, #110	@ 0x6e
 800f172:	9242      	str	r2, [sp, #264]	@ 0x108
 800f174:	d902      	bls.n	800f17c <__ssvfiscanf_r+0x1dc>
 800f176:	e005      	b.n	800f184 <__ssvfiscanf_r+0x1e4>
 800f178:	2300      	movs	r3, #0
 800f17a:	9342      	str	r3, [sp, #264]	@ 0x108
 800f17c:	2303      	movs	r3, #3
 800f17e:	e002      	b.n	800f186 <__ssvfiscanf_r+0x1e6>
 800f180:	2308      	movs	r3, #8
 800f182:	9342      	str	r3, [sp, #264]	@ 0x108
 800f184:	2304      	movs	r3, #4
 800f186:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f188:	6863      	ldr	r3, [r4, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	dd39      	ble.n	800f202 <__ssvfiscanf_r+0x262>
 800f18e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f190:	0659      	lsls	r1, r3, #25
 800f192:	d404      	bmi.n	800f19e <__ssvfiscanf_r+0x1fe>
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	781a      	ldrb	r2, [r3, #0]
 800f198:	5cba      	ldrb	r2, [r7, r2]
 800f19a:	0712      	lsls	r2, r2, #28
 800f19c:	d438      	bmi.n	800f210 <__ssvfiscanf_r+0x270>
 800f19e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f1a0:	2b02      	cmp	r3, #2
 800f1a2:	dc47      	bgt.n	800f234 <__ssvfiscanf_r+0x294>
 800f1a4:	466b      	mov	r3, sp
 800f1a6:	4622      	mov	r2, r4
 800f1a8:	a941      	add	r1, sp, #260	@ 0x104
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f000 f9fa 	bl	800f5a4 <_scanf_chars>
 800f1b0:	2801      	cmp	r0, #1
 800f1b2:	d064      	beq.n	800f27e <__ssvfiscanf_r+0x2de>
 800f1b4:	2802      	cmp	r0, #2
 800f1b6:	f47f af18 	bne.w	800efea <__ssvfiscanf_r+0x4a>
 800f1ba:	e7c9      	b.n	800f150 <__ssvfiscanf_r+0x1b0>
 800f1bc:	220a      	movs	r2, #10
 800f1be:	e7d7      	b.n	800f170 <__ssvfiscanf_r+0x1d0>
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	4640      	mov	r0, r8
 800f1c4:	f000 fbe8 	bl	800f998 <__sccl>
 800f1c8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f1ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1ce:	9341      	str	r3, [sp, #260]	@ 0x104
 800f1d0:	4605      	mov	r5, r0
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e7d7      	b.n	800f186 <__ssvfiscanf_r+0x1e6>
 800f1d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f1d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1dc:	9341      	str	r3, [sp, #260]	@ 0x104
 800f1de:	2300      	movs	r3, #0
 800f1e0:	e7d1      	b.n	800f186 <__ssvfiscanf_r+0x1e6>
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	e7cf      	b.n	800f186 <__ssvfiscanf_r+0x1e6>
 800f1e6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f1e8:	06c3      	lsls	r3, r0, #27
 800f1ea:	f53f aefe 	bmi.w	800efea <__ssvfiscanf_r+0x4a>
 800f1ee:	9b00      	ldr	r3, [sp, #0]
 800f1f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f1f2:	1d19      	adds	r1, r3, #4
 800f1f4:	9100      	str	r1, [sp, #0]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	07c0      	lsls	r0, r0, #31
 800f1fa:	bf4c      	ite	mi
 800f1fc:	801a      	strhmi	r2, [r3, #0]
 800f1fe:	601a      	strpl	r2, [r3, #0]
 800f200:	e6f3      	b.n	800efea <__ssvfiscanf_r+0x4a>
 800f202:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f204:	4621      	mov	r1, r4
 800f206:	4630      	mov	r0, r6
 800f208:	4798      	blx	r3
 800f20a:	2800      	cmp	r0, #0
 800f20c:	d0bf      	beq.n	800f18e <__ssvfiscanf_r+0x1ee>
 800f20e:	e79f      	b.n	800f150 <__ssvfiscanf_r+0x1b0>
 800f210:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f212:	3201      	adds	r2, #1
 800f214:	9245      	str	r2, [sp, #276]	@ 0x114
 800f216:	6862      	ldr	r2, [r4, #4]
 800f218:	3a01      	subs	r2, #1
 800f21a:	2a00      	cmp	r2, #0
 800f21c:	6062      	str	r2, [r4, #4]
 800f21e:	dd02      	ble.n	800f226 <__ssvfiscanf_r+0x286>
 800f220:	3301      	adds	r3, #1
 800f222:	6023      	str	r3, [r4, #0]
 800f224:	e7b6      	b.n	800f194 <__ssvfiscanf_r+0x1f4>
 800f226:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f228:	4621      	mov	r1, r4
 800f22a:	4630      	mov	r0, r6
 800f22c:	4798      	blx	r3
 800f22e:	2800      	cmp	r0, #0
 800f230:	d0b0      	beq.n	800f194 <__ssvfiscanf_r+0x1f4>
 800f232:	e78d      	b.n	800f150 <__ssvfiscanf_r+0x1b0>
 800f234:	2b04      	cmp	r3, #4
 800f236:	dc0f      	bgt.n	800f258 <__ssvfiscanf_r+0x2b8>
 800f238:	466b      	mov	r3, sp
 800f23a:	4622      	mov	r2, r4
 800f23c:	a941      	add	r1, sp, #260	@ 0x104
 800f23e:	4630      	mov	r0, r6
 800f240:	f000 fa0a 	bl	800f658 <_scanf_i>
 800f244:	e7b4      	b.n	800f1b0 <__ssvfiscanf_r+0x210>
 800f246:	bf00      	nop
 800f248:	0800eef1 	.word	0x0800eef1
 800f24c:	0800ef67 	.word	0x0800ef67
 800f250:	08062179 	.word	0x08062179
 800f254:	08062466 	.word	0x08062466
 800f258:	4b0a      	ldr	r3, [pc, #40]	@ (800f284 <__ssvfiscanf_r+0x2e4>)
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	f43f aec5 	beq.w	800efea <__ssvfiscanf_r+0x4a>
 800f260:	466b      	mov	r3, sp
 800f262:	4622      	mov	r2, r4
 800f264:	a941      	add	r1, sp, #260	@ 0x104
 800f266:	4630      	mov	r0, r6
 800f268:	f3af 8000 	nop.w
 800f26c:	e7a0      	b.n	800f1b0 <__ssvfiscanf_r+0x210>
 800f26e:	89a3      	ldrh	r3, [r4, #12]
 800f270:	065b      	lsls	r3, r3, #25
 800f272:	f53f af71 	bmi.w	800f158 <__ssvfiscanf_r+0x1b8>
 800f276:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f27e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f280:	e7f9      	b.n	800f276 <__ssvfiscanf_r+0x2d6>
 800f282:	bf00      	nop
 800f284:	00000000 	.word	0x00000000

0800f288 <_printf_common>:
 800f288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f28c:	4616      	mov	r6, r2
 800f28e:	4698      	mov	r8, r3
 800f290:	688a      	ldr	r2, [r1, #8]
 800f292:	690b      	ldr	r3, [r1, #16]
 800f294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f298:	4293      	cmp	r3, r2
 800f29a:	bfb8      	it	lt
 800f29c:	4613      	movlt	r3, r2
 800f29e:	6033      	str	r3, [r6, #0]
 800f2a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f2a4:	4607      	mov	r7, r0
 800f2a6:	460c      	mov	r4, r1
 800f2a8:	b10a      	cbz	r2, 800f2ae <_printf_common+0x26>
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	6033      	str	r3, [r6, #0]
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	0699      	lsls	r1, r3, #26
 800f2b2:	bf42      	ittt	mi
 800f2b4:	6833      	ldrmi	r3, [r6, #0]
 800f2b6:	3302      	addmi	r3, #2
 800f2b8:	6033      	strmi	r3, [r6, #0]
 800f2ba:	6825      	ldr	r5, [r4, #0]
 800f2bc:	f015 0506 	ands.w	r5, r5, #6
 800f2c0:	d106      	bne.n	800f2d0 <_printf_common+0x48>
 800f2c2:	f104 0a19 	add.w	sl, r4, #25
 800f2c6:	68e3      	ldr	r3, [r4, #12]
 800f2c8:	6832      	ldr	r2, [r6, #0]
 800f2ca:	1a9b      	subs	r3, r3, r2
 800f2cc:	42ab      	cmp	r3, r5
 800f2ce:	dc26      	bgt.n	800f31e <_printf_common+0x96>
 800f2d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f2d4:	6822      	ldr	r2, [r4, #0]
 800f2d6:	3b00      	subs	r3, #0
 800f2d8:	bf18      	it	ne
 800f2da:	2301      	movne	r3, #1
 800f2dc:	0692      	lsls	r2, r2, #26
 800f2de:	d42b      	bmi.n	800f338 <_printf_common+0xb0>
 800f2e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f2e4:	4641      	mov	r1, r8
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	47c8      	blx	r9
 800f2ea:	3001      	adds	r0, #1
 800f2ec:	d01e      	beq.n	800f32c <_printf_common+0xa4>
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	6922      	ldr	r2, [r4, #16]
 800f2f2:	f003 0306 	and.w	r3, r3, #6
 800f2f6:	2b04      	cmp	r3, #4
 800f2f8:	bf02      	ittt	eq
 800f2fa:	68e5      	ldreq	r5, [r4, #12]
 800f2fc:	6833      	ldreq	r3, [r6, #0]
 800f2fe:	1aed      	subeq	r5, r5, r3
 800f300:	68a3      	ldr	r3, [r4, #8]
 800f302:	bf0c      	ite	eq
 800f304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f308:	2500      	movne	r5, #0
 800f30a:	4293      	cmp	r3, r2
 800f30c:	bfc4      	itt	gt
 800f30e:	1a9b      	subgt	r3, r3, r2
 800f310:	18ed      	addgt	r5, r5, r3
 800f312:	2600      	movs	r6, #0
 800f314:	341a      	adds	r4, #26
 800f316:	42b5      	cmp	r5, r6
 800f318:	d11a      	bne.n	800f350 <_printf_common+0xc8>
 800f31a:	2000      	movs	r0, #0
 800f31c:	e008      	b.n	800f330 <_printf_common+0xa8>
 800f31e:	2301      	movs	r3, #1
 800f320:	4652      	mov	r2, sl
 800f322:	4641      	mov	r1, r8
 800f324:	4638      	mov	r0, r7
 800f326:	47c8      	blx	r9
 800f328:	3001      	adds	r0, #1
 800f32a:	d103      	bne.n	800f334 <_printf_common+0xac>
 800f32c:	f04f 30ff 	mov.w	r0, #4294967295
 800f330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f334:	3501      	adds	r5, #1
 800f336:	e7c6      	b.n	800f2c6 <_printf_common+0x3e>
 800f338:	18e1      	adds	r1, r4, r3
 800f33a:	1c5a      	adds	r2, r3, #1
 800f33c:	2030      	movs	r0, #48	@ 0x30
 800f33e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f342:	4422      	add	r2, r4
 800f344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f34c:	3302      	adds	r3, #2
 800f34e:	e7c7      	b.n	800f2e0 <_printf_common+0x58>
 800f350:	2301      	movs	r3, #1
 800f352:	4622      	mov	r2, r4
 800f354:	4641      	mov	r1, r8
 800f356:	4638      	mov	r0, r7
 800f358:	47c8      	blx	r9
 800f35a:	3001      	adds	r0, #1
 800f35c:	d0e6      	beq.n	800f32c <_printf_common+0xa4>
 800f35e:	3601      	adds	r6, #1
 800f360:	e7d9      	b.n	800f316 <_printf_common+0x8e>
	...

0800f364 <_printf_i>:
 800f364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f368:	7e0f      	ldrb	r7, [r1, #24]
 800f36a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f36c:	2f78      	cmp	r7, #120	@ 0x78
 800f36e:	4691      	mov	r9, r2
 800f370:	4680      	mov	r8, r0
 800f372:	460c      	mov	r4, r1
 800f374:	469a      	mov	sl, r3
 800f376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f37a:	d807      	bhi.n	800f38c <_printf_i+0x28>
 800f37c:	2f62      	cmp	r7, #98	@ 0x62
 800f37e:	d80a      	bhi.n	800f396 <_printf_i+0x32>
 800f380:	2f00      	cmp	r7, #0
 800f382:	f000 80d2 	beq.w	800f52a <_printf_i+0x1c6>
 800f386:	2f58      	cmp	r7, #88	@ 0x58
 800f388:	f000 80b9 	beq.w	800f4fe <_printf_i+0x19a>
 800f38c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f394:	e03a      	b.n	800f40c <_printf_i+0xa8>
 800f396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f39a:	2b15      	cmp	r3, #21
 800f39c:	d8f6      	bhi.n	800f38c <_printf_i+0x28>
 800f39e:	a101      	add	r1, pc, #4	@ (adr r1, 800f3a4 <_printf_i+0x40>)
 800f3a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3a4:	0800f3fd 	.word	0x0800f3fd
 800f3a8:	0800f411 	.word	0x0800f411
 800f3ac:	0800f38d 	.word	0x0800f38d
 800f3b0:	0800f38d 	.word	0x0800f38d
 800f3b4:	0800f38d 	.word	0x0800f38d
 800f3b8:	0800f38d 	.word	0x0800f38d
 800f3bc:	0800f411 	.word	0x0800f411
 800f3c0:	0800f38d 	.word	0x0800f38d
 800f3c4:	0800f38d 	.word	0x0800f38d
 800f3c8:	0800f38d 	.word	0x0800f38d
 800f3cc:	0800f38d 	.word	0x0800f38d
 800f3d0:	0800f511 	.word	0x0800f511
 800f3d4:	0800f43b 	.word	0x0800f43b
 800f3d8:	0800f4cb 	.word	0x0800f4cb
 800f3dc:	0800f38d 	.word	0x0800f38d
 800f3e0:	0800f38d 	.word	0x0800f38d
 800f3e4:	0800f533 	.word	0x0800f533
 800f3e8:	0800f38d 	.word	0x0800f38d
 800f3ec:	0800f43b 	.word	0x0800f43b
 800f3f0:	0800f38d 	.word	0x0800f38d
 800f3f4:	0800f38d 	.word	0x0800f38d
 800f3f8:	0800f4d3 	.word	0x0800f4d3
 800f3fc:	6833      	ldr	r3, [r6, #0]
 800f3fe:	1d1a      	adds	r2, r3, #4
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	6032      	str	r2, [r6, #0]
 800f404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f40c:	2301      	movs	r3, #1
 800f40e:	e09d      	b.n	800f54c <_printf_i+0x1e8>
 800f410:	6833      	ldr	r3, [r6, #0]
 800f412:	6820      	ldr	r0, [r4, #0]
 800f414:	1d19      	adds	r1, r3, #4
 800f416:	6031      	str	r1, [r6, #0]
 800f418:	0606      	lsls	r6, r0, #24
 800f41a:	d501      	bpl.n	800f420 <_printf_i+0xbc>
 800f41c:	681d      	ldr	r5, [r3, #0]
 800f41e:	e003      	b.n	800f428 <_printf_i+0xc4>
 800f420:	0645      	lsls	r5, r0, #25
 800f422:	d5fb      	bpl.n	800f41c <_printf_i+0xb8>
 800f424:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f428:	2d00      	cmp	r5, #0
 800f42a:	da03      	bge.n	800f434 <_printf_i+0xd0>
 800f42c:	232d      	movs	r3, #45	@ 0x2d
 800f42e:	426d      	negs	r5, r5
 800f430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f434:	4859      	ldr	r0, [pc, #356]	@ (800f59c <_printf_i+0x238>)
 800f436:	230a      	movs	r3, #10
 800f438:	e011      	b.n	800f45e <_printf_i+0xfa>
 800f43a:	6821      	ldr	r1, [r4, #0]
 800f43c:	6833      	ldr	r3, [r6, #0]
 800f43e:	0608      	lsls	r0, r1, #24
 800f440:	f853 5b04 	ldr.w	r5, [r3], #4
 800f444:	d402      	bmi.n	800f44c <_printf_i+0xe8>
 800f446:	0649      	lsls	r1, r1, #25
 800f448:	bf48      	it	mi
 800f44a:	b2ad      	uxthmi	r5, r5
 800f44c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f44e:	4853      	ldr	r0, [pc, #332]	@ (800f59c <_printf_i+0x238>)
 800f450:	6033      	str	r3, [r6, #0]
 800f452:	bf14      	ite	ne
 800f454:	230a      	movne	r3, #10
 800f456:	2308      	moveq	r3, #8
 800f458:	2100      	movs	r1, #0
 800f45a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f45e:	6866      	ldr	r6, [r4, #4]
 800f460:	60a6      	str	r6, [r4, #8]
 800f462:	2e00      	cmp	r6, #0
 800f464:	bfa2      	ittt	ge
 800f466:	6821      	ldrge	r1, [r4, #0]
 800f468:	f021 0104 	bicge.w	r1, r1, #4
 800f46c:	6021      	strge	r1, [r4, #0]
 800f46e:	b90d      	cbnz	r5, 800f474 <_printf_i+0x110>
 800f470:	2e00      	cmp	r6, #0
 800f472:	d04b      	beq.n	800f50c <_printf_i+0x1a8>
 800f474:	4616      	mov	r6, r2
 800f476:	fbb5 f1f3 	udiv	r1, r5, r3
 800f47a:	fb03 5711 	mls	r7, r3, r1, r5
 800f47e:	5dc7      	ldrb	r7, [r0, r7]
 800f480:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f484:	462f      	mov	r7, r5
 800f486:	42bb      	cmp	r3, r7
 800f488:	460d      	mov	r5, r1
 800f48a:	d9f4      	bls.n	800f476 <_printf_i+0x112>
 800f48c:	2b08      	cmp	r3, #8
 800f48e:	d10b      	bne.n	800f4a8 <_printf_i+0x144>
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	07df      	lsls	r7, r3, #31
 800f494:	d508      	bpl.n	800f4a8 <_printf_i+0x144>
 800f496:	6923      	ldr	r3, [r4, #16]
 800f498:	6861      	ldr	r1, [r4, #4]
 800f49a:	4299      	cmp	r1, r3
 800f49c:	bfde      	ittt	le
 800f49e:	2330      	movle	r3, #48	@ 0x30
 800f4a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f4a8:	1b92      	subs	r2, r2, r6
 800f4aa:	6122      	str	r2, [r4, #16]
 800f4ac:	f8cd a000 	str.w	sl, [sp]
 800f4b0:	464b      	mov	r3, r9
 800f4b2:	aa03      	add	r2, sp, #12
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	f7ff fee6 	bl	800f288 <_printf_common>
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d14a      	bne.n	800f556 <_printf_i+0x1f2>
 800f4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c4:	b004      	add	sp, #16
 800f4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	f043 0320 	orr.w	r3, r3, #32
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	4833      	ldr	r0, [pc, #204]	@ (800f5a0 <_printf_i+0x23c>)
 800f4d4:	2778      	movs	r7, #120	@ 0x78
 800f4d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	6831      	ldr	r1, [r6, #0]
 800f4de:	061f      	lsls	r7, r3, #24
 800f4e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800f4e4:	d402      	bmi.n	800f4ec <_printf_i+0x188>
 800f4e6:	065f      	lsls	r7, r3, #25
 800f4e8:	bf48      	it	mi
 800f4ea:	b2ad      	uxthmi	r5, r5
 800f4ec:	6031      	str	r1, [r6, #0]
 800f4ee:	07d9      	lsls	r1, r3, #31
 800f4f0:	bf44      	itt	mi
 800f4f2:	f043 0320 	orrmi.w	r3, r3, #32
 800f4f6:	6023      	strmi	r3, [r4, #0]
 800f4f8:	b11d      	cbz	r5, 800f502 <_printf_i+0x19e>
 800f4fa:	2310      	movs	r3, #16
 800f4fc:	e7ac      	b.n	800f458 <_printf_i+0xf4>
 800f4fe:	4827      	ldr	r0, [pc, #156]	@ (800f59c <_printf_i+0x238>)
 800f500:	e7e9      	b.n	800f4d6 <_printf_i+0x172>
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	f023 0320 	bic.w	r3, r3, #32
 800f508:	6023      	str	r3, [r4, #0]
 800f50a:	e7f6      	b.n	800f4fa <_printf_i+0x196>
 800f50c:	4616      	mov	r6, r2
 800f50e:	e7bd      	b.n	800f48c <_printf_i+0x128>
 800f510:	6833      	ldr	r3, [r6, #0]
 800f512:	6825      	ldr	r5, [r4, #0]
 800f514:	6961      	ldr	r1, [r4, #20]
 800f516:	1d18      	adds	r0, r3, #4
 800f518:	6030      	str	r0, [r6, #0]
 800f51a:	062e      	lsls	r6, r5, #24
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	d501      	bpl.n	800f524 <_printf_i+0x1c0>
 800f520:	6019      	str	r1, [r3, #0]
 800f522:	e002      	b.n	800f52a <_printf_i+0x1c6>
 800f524:	0668      	lsls	r0, r5, #25
 800f526:	d5fb      	bpl.n	800f520 <_printf_i+0x1bc>
 800f528:	8019      	strh	r1, [r3, #0]
 800f52a:	2300      	movs	r3, #0
 800f52c:	6123      	str	r3, [r4, #16]
 800f52e:	4616      	mov	r6, r2
 800f530:	e7bc      	b.n	800f4ac <_printf_i+0x148>
 800f532:	6833      	ldr	r3, [r6, #0]
 800f534:	1d1a      	adds	r2, r3, #4
 800f536:	6032      	str	r2, [r6, #0]
 800f538:	681e      	ldr	r6, [r3, #0]
 800f53a:	6862      	ldr	r2, [r4, #4]
 800f53c:	2100      	movs	r1, #0
 800f53e:	4630      	mov	r0, r6
 800f540:	f7f0 fe4e 	bl	80001e0 <memchr>
 800f544:	b108      	cbz	r0, 800f54a <_printf_i+0x1e6>
 800f546:	1b80      	subs	r0, r0, r6
 800f548:	6060      	str	r0, [r4, #4]
 800f54a:	6863      	ldr	r3, [r4, #4]
 800f54c:	6123      	str	r3, [r4, #16]
 800f54e:	2300      	movs	r3, #0
 800f550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f554:	e7aa      	b.n	800f4ac <_printf_i+0x148>
 800f556:	6923      	ldr	r3, [r4, #16]
 800f558:	4632      	mov	r2, r6
 800f55a:	4649      	mov	r1, r9
 800f55c:	4640      	mov	r0, r8
 800f55e:	47d0      	blx	sl
 800f560:	3001      	adds	r0, #1
 800f562:	d0ad      	beq.n	800f4c0 <_printf_i+0x15c>
 800f564:	6823      	ldr	r3, [r4, #0]
 800f566:	079b      	lsls	r3, r3, #30
 800f568:	d413      	bmi.n	800f592 <_printf_i+0x22e>
 800f56a:	68e0      	ldr	r0, [r4, #12]
 800f56c:	9b03      	ldr	r3, [sp, #12]
 800f56e:	4298      	cmp	r0, r3
 800f570:	bfb8      	it	lt
 800f572:	4618      	movlt	r0, r3
 800f574:	e7a6      	b.n	800f4c4 <_printf_i+0x160>
 800f576:	2301      	movs	r3, #1
 800f578:	4632      	mov	r2, r6
 800f57a:	4649      	mov	r1, r9
 800f57c:	4640      	mov	r0, r8
 800f57e:	47d0      	blx	sl
 800f580:	3001      	adds	r0, #1
 800f582:	d09d      	beq.n	800f4c0 <_printf_i+0x15c>
 800f584:	3501      	adds	r5, #1
 800f586:	68e3      	ldr	r3, [r4, #12]
 800f588:	9903      	ldr	r1, [sp, #12]
 800f58a:	1a5b      	subs	r3, r3, r1
 800f58c:	42ab      	cmp	r3, r5
 800f58e:	dcf2      	bgt.n	800f576 <_printf_i+0x212>
 800f590:	e7eb      	b.n	800f56a <_printf_i+0x206>
 800f592:	2500      	movs	r5, #0
 800f594:	f104 0619 	add.w	r6, r4, #25
 800f598:	e7f5      	b.n	800f586 <_printf_i+0x222>
 800f59a:	bf00      	nop
 800f59c:	08062471 	.word	0x08062471
 800f5a0:	08062482 	.word	0x08062482

0800f5a4 <_scanf_chars>:
 800f5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5a8:	4615      	mov	r5, r2
 800f5aa:	688a      	ldr	r2, [r1, #8]
 800f5ac:	4680      	mov	r8, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	b932      	cbnz	r2, 800f5c0 <_scanf_chars+0x1c>
 800f5b2:	698a      	ldr	r2, [r1, #24]
 800f5b4:	2a00      	cmp	r2, #0
 800f5b6:	bf14      	ite	ne
 800f5b8:	f04f 32ff 	movne.w	r2, #4294967295
 800f5bc:	2201      	moveq	r2, #1
 800f5be:	608a      	str	r2, [r1, #8]
 800f5c0:	6822      	ldr	r2, [r4, #0]
 800f5c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f654 <_scanf_chars+0xb0>
 800f5c6:	06d1      	lsls	r1, r2, #27
 800f5c8:	bf5f      	itttt	pl
 800f5ca:	681a      	ldrpl	r2, [r3, #0]
 800f5cc:	1d11      	addpl	r1, r2, #4
 800f5ce:	6019      	strpl	r1, [r3, #0]
 800f5d0:	6816      	ldrpl	r6, [r2, #0]
 800f5d2:	2700      	movs	r7, #0
 800f5d4:	69a0      	ldr	r0, [r4, #24]
 800f5d6:	b188      	cbz	r0, 800f5fc <_scanf_chars+0x58>
 800f5d8:	2801      	cmp	r0, #1
 800f5da:	d107      	bne.n	800f5ec <_scanf_chars+0x48>
 800f5dc:	682b      	ldr	r3, [r5, #0]
 800f5de:	781a      	ldrb	r2, [r3, #0]
 800f5e0:	6963      	ldr	r3, [r4, #20]
 800f5e2:	5c9b      	ldrb	r3, [r3, r2]
 800f5e4:	b953      	cbnz	r3, 800f5fc <_scanf_chars+0x58>
 800f5e6:	2f00      	cmp	r7, #0
 800f5e8:	d031      	beq.n	800f64e <_scanf_chars+0xaa>
 800f5ea:	e022      	b.n	800f632 <_scanf_chars+0x8e>
 800f5ec:	2802      	cmp	r0, #2
 800f5ee:	d120      	bne.n	800f632 <_scanf_chars+0x8e>
 800f5f0:	682b      	ldr	r3, [r5, #0]
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f5f8:	071b      	lsls	r3, r3, #28
 800f5fa:	d41a      	bmi.n	800f632 <_scanf_chars+0x8e>
 800f5fc:	6823      	ldr	r3, [r4, #0]
 800f5fe:	06da      	lsls	r2, r3, #27
 800f600:	bf5e      	ittt	pl
 800f602:	682b      	ldrpl	r3, [r5, #0]
 800f604:	781b      	ldrbpl	r3, [r3, #0]
 800f606:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f60a:	682a      	ldr	r2, [r5, #0]
 800f60c:	686b      	ldr	r3, [r5, #4]
 800f60e:	3201      	adds	r2, #1
 800f610:	602a      	str	r2, [r5, #0]
 800f612:	68a2      	ldr	r2, [r4, #8]
 800f614:	3b01      	subs	r3, #1
 800f616:	3a01      	subs	r2, #1
 800f618:	606b      	str	r3, [r5, #4]
 800f61a:	3701      	adds	r7, #1
 800f61c:	60a2      	str	r2, [r4, #8]
 800f61e:	b142      	cbz	r2, 800f632 <_scanf_chars+0x8e>
 800f620:	2b00      	cmp	r3, #0
 800f622:	dcd7      	bgt.n	800f5d4 <_scanf_chars+0x30>
 800f624:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f628:	4629      	mov	r1, r5
 800f62a:	4640      	mov	r0, r8
 800f62c:	4798      	blx	r3
 800f62e:	2800      	cmp	r0, #0
 800f630:	d0d0      	beq.n	800f5d4 <_scanf_chars+0x30>
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	f013 0310 	ands.w	r3, r3, #16
 800f638:	d105      	bne.n	800f646 <_scanf_chars+0xa2>
 800f63a:	68e2      	ldr	r2, [r4, #12]
 800f63c:	3201      	adds	r2, #1
 800f63e:	60e2      	str	r2, [r4, #12]
 800f640:	69a2      	ldr	r2, [r4, #24]
 800f642:	b102      	cbz	r2, 800f646 <_scanf_chars+0xa2>
 800f644:	7033      	strb	r3, [r6, #0]
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	443b      	add	r3, r7
 800f64a:	6123      	str	r3, [r4, #16]
 800f64c:	2000      	movs	r0, #0
 800f64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f652:	bf00      	nop
 800f654:	08062179 	.word	0x08062179

0800f658 <_scanf_i>:
 800f658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	4698      	mov	r8, r3
 800f65e:	4b74      	ldr	r3, [pc, #464]	@ (800f830 <_scanf_i+0x1d8>)
 800f660:	460c      	mov	r4, r1
 800f662:	4682      	mov	sl, r0
 800f664:	4616      	mov	r6, r2
 800f666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f66a:	b087      	sub	sp, #28
 800f66c:	ab03      	add	r3, sp, #12
 800f66e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f672:	4b70      	ldr	r3, [pc, #448]	@ (800f834 <_scanf_i+0x1dc>)
 800f674:	69a1      	ldr	r1, [r4, #24]
 800f676:	4a70      	ldr	r2, [pc, #448]	@ (800f838 <_scanf_i+0x1e0>)
 800f678:	2903      	cmp	r1, #3
 800f67a:	bf08      	it	eq
 800f67c:	461a      	moveq	r2, r3
 800f67e:	68a3      	ldr	r3, [r4, #8]
 800f680:	9201      	str	r2, [sp, #4]
 800f682:	1e5a      	subs	r2, r3, #1
 800f684:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f688:	bf88      	it	hi
 800f68a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f68e:	4627      	mov	r7, r4
 800f690:	bf82      	ittt	hi
 800f692:	eb03 0905 	addhi.w	r9, r3, r5
 800f696:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f69a:	60a3      	strhi	r3, [r4, #8]
 800f69c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f6a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f6a4:	bf98      	it	ls
 800f6a6:	f04f 0900 	movls.w	r9, #0
 800f6aa:	6023      	str	r3, [r4, #0]
 800f6ac:	463d      	mov	r5, r7
 800f6ae:	f04f 0b00 	mov.w	fp, #0
 800f6b2:	6831      	ldr	r1, [r6, #0]
 800f6b4:	ab03      	add	r3, sp, #12
 800f6b6:	7809      	ldrb	r1, [r1, #0]
 800f6b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f6bc:	2202      	movs	r2, #2
 800f6be:	f7f0 fd8f 	bl	80001e0 <memchr>
 800f6c2:	b328      	cbz	r0, 800f710 <_scanf_i+0xb8>
 800f6c4:	f1bb 0f01 	cmp.w	fp, #1
 800f6c8:	d159      	bne.n	800f77e <_scanf_i+0x126>
 800f6ca:	6862      	ldr	r2, [r4, #4]
 800f6cc:	b92a      	cbnz	r2, 800f6da <_scanf_i+0x82>
 800f6ce:	6822      	ldr	r2, [r4, #0]
 800f6d0:	2108      	movs	r1, #8
 800f6d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f6d6:	6061      	str	r1, [r4, #4]
 800f6d8:	6022      	str	r2, [r4, #0]
 800f6da:	6822      	ldr	r2, [r4, #0]
 800f6dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f6e0:	6022      	str	r2, [r4, #0]
 800f6e2:	68a2      	ldr	r2, [r4, #8]
 800f6e4:	1e51      	subs	r1, r2, #1
 800f6e6:	60a1      	str	r1, [r4, #8]
 800f6e8:	b192      	cbz	r2, 800f710 <_scanf_i+0xb8>
 800f6ea:	6832      	ldr	r2, [r6, #0]
 800f6ec:	1c51      	adds	r1, r2, #1
 800f6ee:	6031      	str	r1, [r6, #0]
 800f6f0:	7812      	ldrb	r2, [r2, #0]
 800f6f2:	f805 2b01 	strb.w	r2, [r5], #1
 800f6f6:	6872      	ldr	r2, [r6, #4]
 800f6f8:	3a01      	subs	r2, #1
 800f6fa:	2a00      	cmp	r2, #0
 800f6fc:	6072      	str	r2, [r6, #4]
 800f6fe:	dc07      	bgt.n	800f710 <_scanf_i+0xb8>
 800f700:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f704:	4631      	mov	r1, r6
 800f706:	4650      	mov	r0, sl
 800f708:	4790      	blx	r2
 800f70a:	2800      	cmp	r0, #0
 800f70c:	f040 8085 	bne.w	800f81a <_scanf_i+0x1c2>
 800f710:	f10b 0b01 	add.w	fp, fp, #1
 800f714:	f1bb 0f03 	cmp.w	fp, #3
 800f718:	d1cb      	bne.n	800f6b2 <_scanf_i+0x5a>
 800f71a:	6863      	ldr	r3, [r4, #4]
 800f71c:	b90b      	cbnz	r3, 800f722 <_scanf_i+0xca>
 800f71e:	230a      	movs	r3, #10
 800f720:	6063      	str	r3, [r4, #4]
 800f722:	6863      	ldr	r3, [r4, #4]
 800f724:	4945      	ldr	r1, [pc, #276]	@ (800f83c <_scanf_i+0x1e4>)
 800f726:	6960      	ldr	r0, [r4, #20]
 800f728:	1ac9      	subs	r1, r1, r3
 800f72a:	f000 f935 	bl	800f998 <__sccl>
 800f72e:	f04f 0b00 	mov.w	fp, #0
 800f732:	68a3      	ldr	r3, [r4, #8]
 800f734:	6822      	ldr	r2, [r4, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d03d      	beq.n	800f7b6 <_scanf_i+0x15e>
 800f73a:	6831      	ldr	r1, [r6, #0]
 800f73c:	6960      	ldr	r0, [r4, #20]
 800f73e:	f891 c000 	ldrb.w	ip, [r1]
 800f742:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f746:	2800      	cmp	r0, #0
 800f748:	d035      	beq.n	800f7b6 <_scanf_i+0x15e>
 800f74a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f74e:	d124      	bne.n	800f79a <_scanf_i+0x142>
 800f750:	0510      	lsls	r0, r2, #20
 800f752:	d522      	bpl.n	800f79a <_scanf_i+0x142>
 800f754:	f10b 0b01 	add.w	fp, fp, #1
 800f758:	f1b9 0f00 	cmp.w	r9, #0
 800f75c:	d003      	beq.n	800f766 <_scanf_i+0x10e>
 800f75e:	3301      	adds	r3, #1
 800f760:	f109 39ff 	add.w	r9, r9, #4294967295
 800f764:	60a3      	str	r3, [r4, #8]
 800f766:	6873      	ldr	r3, [r6, #4]
 800f768:	3b01      	subs	r3, #1
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	6073      	str	r3, [r6, #4]
 800f76e:	dd1b      	ble.n	800f7a8 <_scanf_i+0x150>
 800f770:	6833      	ldr	r3, [r6, #0]
 800f772:	3301      	adds	r3, #1
 800f774:	6033      	str	r3, [r6, #0]
 800f776:	68a3      	ldr	r3, [r4, #8]
 800f778:	3b01      	subs	r3, #1
 800f77a:	60a3      	str	r3, [r4, #8]
 800f77c:	e7d9      	b.n	800f732 <_scanf_i+0xda>
 800f77e:	f1bb 0f02 	cmp.w	fp, #2
 800f782:	d1ae      	bne.n	800f6e2 <_scanf_i+0x8a>
 800f784:	6822      	ldr	r2, [r4, #0]
 800f786:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f78a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f78e:	d1bf      	bne.n	800f710 <_scanf_i+0xb8>
 800f790:	2110      	movs	r1, #16
 800f792:	6061      	str	r1, [r4, #4]
 800f794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f798:	e7a2      	b.n	800f6e0 <_scanf_i+0x88>
 800f79a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f79e:	6022      	str	r2, [r4, #0]
 800f7a0:	780b      	ldrb	r3, [r1, #0]
 800f7a2:	f805 3b01 	strb.w	r3, [r5], #1
 800f7a6:	e7de      	b.n	800f766 <_scanf_i+0x10e>
 800f7a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f7ac:	4631      	mov	r1, r6
 800f7ae:	4650      	mov	r0, sl
 800f7b0:	4798      	blx	r3
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d0df      	beq.n	800f776 <_scanf_i+0x11e>
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	05d9      	lsls	r1, r3, #23
 800f7ba:	d50d      	bpl.n	800f7d8 <_scanf_i+0x180>
 800f7bc:	42bd      	cmp	r5, r7
 800f7be:	d909      	bls.n	800f7d4 <_scanf_i+0x17c>
 800f7c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f7c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f7c8:	4632      	mov	r2, r6
 800f7ca:	4650      	mov	r0, sl
 800f7cc:	4798      	blx	r3
 800f7ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800f7d2:	464d      	mov	r5, r9
 800f7d4:	42bd      	cmp	r5, r7
 800f7d6:	d028      	beq.n	800f82a <_scanf_i+0x1d2>
 800f7d8:	6822      	ldr	r2, [r4, #0]
 800f7da:	f012 0210 	ands.w	r2, r2, #16
 800f7de:	d113      	bne.n	800f808 <_scanf_i+0x1b0>
 800f7e0:	702a      	strb	r2, [r5, #0]
 800f7e2:	6863      	ldr	r3, [r4, #4]
 800f7e4:	9e01      	ldr	r6, [sp, #4]
 800f7e6:	4639      	mov	r1, r7
 800f7e8:	4650      	mov	r0, sl
 800f7ea:	47b0      	blx	r6
 800f7ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f7f0:	6821      	ldr	r1, [r4, #0]
 800f7f2:	1d1a      	adds	r2, r3, #4
 800f7f4:	f8c8 2000 	str.w	r2, [r8]
 800f7f8:	f011 0f20 	tst.w	r1, #32
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	d00f      	beq.n	800f820 <_scanf_i+0x1c8>
 800f800:	6018      	str	r0, [r3, #0]
 800f802:	68e3      	ldr	r3, [r4, #12]
 800f804:	3301      	adds	r3, #1
 800f806:	60e3      	str	r3, [r4, #12]
 800f808:	6923      	ldr	r3, [r4, #16]
 800f80a:	1bed      	subs	r5, r5, r7
 800f80c:	445d      	add	r5, fp
 800f80e:	442b      	add	r3, r5
 800f810:	6123      	str	r3, [r4, #16]
 800f812:	2000      	movs	r0, #0
 800f814:	b007      	add	sp, #28
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81a:	f04f 0b00 	mov.w	fp, #0
 800f81e:	e7ca      	b.n	800f7b6 <_scanf_i+0x15e>
 800f820:	07ca      	lsls	r2, r1, #31
 800f822:	bf4c      	ite	mi
 800f824:	8018      	strhmi	r0, [r3, #0]
 800f826:	6018      	strpl	r0, [r3, #0]
 800f828:	e7eb      	b.n	800f802 <_scanf_i+0x1aa>
 800f82a:	2001      	movs	r0, #1
 800f82c:	e7f2      	b.n	800f814 <_scanf_i+0x1bc>
 800f82e:	bf00      	nop
 800f830:	080107c0 	.word	0x080107c0
 800f834:	0800d5c5 	.word	0x0800d5c5
 800f838:	0800ec25 	.word	0x0800ec25
 800f83c:	080624a3 	.word	0x080624a3

0800f840 <__sflush_r>:
 800f840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f848:	0716      	lsls	r6, r2, #28
 800f84a:	4605      	mov	r5, r0
 800f84c:	460c      	mov	r4, r1
 800f84e:	d454      	bmi.n	800f8fa <__sflush_r+0xba>
 800f850:	684b      	ldr	r3, [r1, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	dc02      	bgt.n	800f85c <__sflush_r+0x1c>
 800f856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dd48      	ble.n	800f8ee <__sflush_r+0xae>
 800f85c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f85e:	2e00      	cmp	r6, #0
 800f860:	d045      	beq.n	800f8ee <__sflush_r+0xae>
 800f862:	2300      	movs	r3, #0
 800f864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f868:	682f      	ldr	r7, [r5, #0]
 800f86a:	6a21      	ldr	r1, [r4, #32]
 800f86c:	602b      	str	r3, [r5, #0]
 800f86e:	d030      	beq.n	800f8d2 <__sflush_r+0x92>
 800f870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f872:	89a3      	ldrh	r3, [r4, #12]
 800f874:	0759      	lsls	r1, r3, #29
 800f876:	d505      	bpl.n	800f884 <__sflush_r+0x44>
 800f878:	6863      	ldr	r3, [r4, #4]
 800f87a:	1ad2      	subs	r2, r2, r3
 800f87c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f87e:	b10b      	cbz	r3, 800f884 <__sflush_r+0x44>
 800f880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f882:	1ad2      	subs	r2, r2, r3
 800f884:	2300      	movs	r3, #0
 800f886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f888:	6a21      	ldr	r1, [r4, #32]
 800f88a:	4628      	mov	r0, r5
 800f88c:	47b0      	blx	r6
 800f88e:	1c43      	adds	r3, r0, #1
 800f890:	89a3      	ldrh	r3, [r4, #12]
 800f892:	d106      	bne.n	800f8a2 <__sflush_r+0x62>
 800f894:	6829      	ldr	r1, [r5, #0]
 800f896:	291d      	cmp	r1, #29
 800f898:	d82b      	bhi.n	800f8f2 <__sflush_r+0xb2>
 800f89a:	4a2a      	ldr	r2, [pc, #168]	@ (800f944 <__sflush_r+0x104>)
 800f89c:	410a      	asrs	r2, r1
 800f89e:	07d6      	lsls	r6, r2, #31
 800f8a0:	d427      	bmi.n	800f8f2 <__sflush_r+0xb2>
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	6062      	str	r2, [r4, #4]
 800f8a6:	04d9      	lsls	r1, r3, #19
 800f8a8:	6922      	ldr	r2, [r4, #16]
 800f8aa:	6022      	str	r2, [r4, #0]
 800f8ac:	d504      	bpl.n	800f8b8 <__sflush_r+0x78>
 800f8ae:	1c42      	adds	r2, r0, #1
 800f8b0:	d101      	bne.n	800f8b6 <__sflush_r+0x76>
 800f8b2:	682b      	ldr	r3, [r5, #0]
 800f8b4:	b903      	cbnz	r3, 800f8b8 <__sflush_r+0x78>
 800f8b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8ba:	602f      	str	r7, [r5, #0]
 800f8bc:	b1b9      	cbz	r1, 800f8ee <__sflush_r+0xae>
 800f8be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8c2:	4299      	cmp	r1, r3
 800f8c4:	d002      	beq.n	800f8cc <__sflush_r+0x8c>
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f7fe f8ee 	bl	800daa8 <_free_r>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8d0:	e00d      	b.n	800f8ee <__sflush_r+0xae>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	47b0      	blx	r6
 800f8d8:	4602      	mov	r2, r0
 800f8da:	1c50      	adds	r0, r2, #1
 800f8dc:	d1c9      	bne.n	800f872 <__sflush_r+0x32>
 800f8de:	682b      	ldr	r3, [r5, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d0c6      	beq.n	800f872 <__sflush_r+0x32>
 800f8e4:	2b1d      	cmp	r3, #29
 800f8e6:	d001      	beq.n	800f8ec <__sflush_r+0xac>
 800f8e8:	2b16      	cmp	r3, #22
 800f8ea:	d11e      	bne.n	800f92a <__sflush_r+0xea>
 800f8ec:	602f      	str	r7, [r5, #0]
 800f8ee:	2000      	movs	r0, #0
 800f8f0:	e022      	b.n	800f938 <__sflush_r+0xf8>
 800f8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8f6:	b21b      	sxth	r3, r3
 800f8f8:	e01b      	b.n	800f932 <__sflush_r+0xf2>
 800f8fa:	690f      	ldr	r7, [r1, #16]
 800f8fc:	2f00      	cmp	r7, #0
 800f8fe:	d0f6      	beq.n	800f8ee <__sflush_r+0xae>
 800f900:	0793      	lsls	r3, r2, #30
 800f902:	680e      	ldr	r6, [r1, #0]
 800f904:	bf08      	it	eq
 800f906:	694b      	ldreq	r3, [r1, #20]
 800f908:	600f      	str	r7, [r1, #0]
 800f90a:	bf18      	it	ne
 800f90c:	2300      	movne	r3, #0
 800f90e:	eba6 0807 	sub.w	r8, r6, r7
 800f912:	608b      	str	r3, [r1, #8]
 800f914:	f1b8 0f00 	cmp.w	r8, #0
 800f918:	dde9      	ble.n	800f8ee <__sflush_r+0xae>
 800f91a:	6a21      	ldr	r1, [r4, #32]
 800f91c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f91e:	4643      	mov	r3, r8
 800f920:	463a      	mov	r2, r7
 800f922:	4628      	mov	r0, r5
 800f924:	47b0      	blx	r6
 800f926:	2800      	cmp	r0, #0
 800f928:	dc08      	bgt.n	800f93c <__sflush_r+0xfc>
 800f92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f932:	81a3      	strh	r3, [r4, #12]
 800f934:	f04f 30ff 	mov.w	r0, #4294967295
 800f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93c:	4407      	add	r7, r0
 800f93e:	eba8 0800 	sub.w	r8, r8, r0
 800f942:	e7e7      	b.n	800f914 <__sflush_r+0xd4>
 800f944:	dfbffffe 	.word	0xdfbffffe

0800f948 <_fflush_r>:
 800f948:	b538      	push	{r3, r4, r5, lr}
 800f94a:	690b      	ldr	r3, [r1, #16]
 800f94c:	4605      	mov	r5, r0
 800f94e:	460c      	mov	r4, r1
 800f950:	b913      	cbnz	r3, 800f958 <_fflush_r+0x10>
 800f952:	2500      	movs	r5, #0
 800f954:	4628      	mov	r0, r5
 800f956:	bd38      	pop	{r3, r4, r5, pc}
 800f958:	b118      	cbz	r0, 800f962 <_fflush_r+0x1a>
 800f95a:	6a03      	ldr	r3, [r0, #32]
 800f95c:	b90b      	cbnz	r3, 800f962 <_fflush_r+0x1a>
 800f95e:	f7fd fec9 	bl	800d6f4 <__sinit>
 800f962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d0f3      	beq.n	800f952 <_fflush_r+0xa>
 800f96a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f96c:	07d0      	lsls	r0, r2, #31
 800f96e:	d404      	bmi.n	800f97a <_fflush_r+0x32>
 800f970:	0599      	lsls	r1, r3, #22
 800f972:	d402      	bmi.n	800f97a <_fflush_r+0x32>
 800f974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f976:	f7fe f874 	bl	800da62 <__retarget_lock_acquire_recursive>
 800f97a:	4628      	mov	r0, r5
 800f97c:	4621      	mov	r1, r4
 800f97e:	f7ff ff5f 	bl	800f840 <__sflush_r>
 800f982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f984:	07da      	lsls	r2, r3, #31
 800f986:	4605      	mov	r5, r0
 800f988:	d4e4      	bmi.n	800f954 <_fflush_r+0xc>
 800f98a:	89a3      	ldrh	r3, [r4, #12]
 800f98c:	059b      	lsls	r3, r3, #22
 800f98e:	d4e1      	bmi.n	800f954 <_fflush_r+0xc>
 800f990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f992:	f7fe f867 	bl	800da64 <__retarget_lock_release_recursive>
 800f996:	e7dd      	b.n	800f954 <_fflush_r+0xc>

0800f998 <__sccl>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	780b      	ldrb	r3, [r1, #0]
 800f99c:	4604      	mov	r4, r0
 800f99e:	2b5e      	cmp	r3, #94	@ 0x5e
 800f9a0:	bf0b      	itete	eq
 800f9a2:	784b      	ldrbeq	r3, [r1, #1]
 800f9a4:	1c4a      	addne	r2, r1, #1
 800f9a6:	1c8a      	addeq	r2, r1, #2
 800f9a8:	2100      	movne	r1, #0
 800f9aa:	bf08      	it	eq
 800f9ac:	2101      	moveq	r1, #1
 800f9ae:	3801      	subs	r0, #1
 800f9b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f9b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f9b8:	42a8      	cmp	r0, r5
 800f9ba:	d1fb      	bne.n	800f9b4 <__sccl+0x1c>
 800f9bc:	b90b      	cbnz	r3, 800f9c2 <__sccl+0x2a>
 800f9be:	1e50      	subs	r0, r2, #1
 800f9c0:	bd70      	pop	{r4, r5, r6, pc}
 800f9c2:	f081 0101 	eor.w	r1, r1, #1
 800f9c6:	54e1      	strb	r1, [r4, r3]
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f9d0:	2d2d      	cmp	r5, #45	@ 0x2d
 800f9d2:	d005      	beq.n	800f9e0 <__sccl+0x48>
 800f9d4:	2d5d      	cmp	r5, #93	@ 0x5d
 800f9d6:	d016      	beq.n	800fa06 <__sccl+0x6e>
 800f9d8:	2d00      	cmp	r5, #0
 800f9da:	d0f1      	beq.n	800f9c0 <__sccl+0x28>
 800f9dc:	462b      	mov	r3, r5
 800f9de:	e7f2      	b.n	800f9c6 <__sccl+0x2e>
 800f9e0:	7846      	ldrb	r6, [r0, #1]
 800f9e2:	2e5d      	cmp	r6, #93	@ 0x5d
 800f9e4:	d0fa      	beq.n	800f9dc <__sccl+0x44>
 800f9e6:	42b3      	cmp	r3, r6
 800f9e8:	dcf8      	bgt.n	800f9dc <__sccl+0x44>
 800f9ea:	3002      	adds	r0, #2
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	3201      	adds	r2, #1
 800f9f0:	4296      	cmp	r6, r2
 800f9f2:	54a1      	strb	r1, [r4, r2]
 800f9f4:	dcfb      	bgt.n	800f9ee <__sccl+0x56>
 800f9f6:	1af2      	subs	r2, r6, r3
 800f9f8:	3a01      	subs	r2, #1
 800f9fa:	1c5d      	adds	r5, r3, #1
 800f9fc:	42b3      	cmp	r3, r6
 800f9fe:	bfa8      	it	ge
 800fa00:	2200      	movge	r2, #0
 800fa02:	18ab      	adds	r3, r5, r2
 800fa04:	e7e1      	b.n	800f9ca <__sccl+0x32>
 800fa06:	4610      	mov	r0, r2
 800fa08:	e7da      	b.n	800f9c0 <__sccl+0x28>

0800fa0a <__submore>:
 800fa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa0e:	460c      	mov	r4, r1
 800fa10:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fa12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa16:	4299      	cmp	r1, r3
 800fa18:	d11d      	bne.n	800fa56 <__submore+0x4c>
 800fa1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800fa1e:	f7fc fe85 	bl	800c72c <_malloc_r>
 800fa22:	b918      	cbnz	r0, 800fa2c <__submore+0x22>
 800fa24:	f04f 30ff 	mov.w	r0, #4294967295
 800fa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa30:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fa32:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800fa36:	6360      	str	r0, [r4, #52]	@ 0x34
 800fa38:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800fa3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800fa40:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800fa44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fa48:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800fa4c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800fa50:	6020      	str	r0, [r4, #0]
 800fa52:	2000      	movs	r0, #0
 800fa54:	e7e8      	b.n	800fa28 <__submore+0x1e>
 800fa56:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800fa58:	0077      	lsls	r7, r6, #1
 800fa5a:	463a      	mov	r2, r7
 800fa5c:	f7fc fefa 	bl	800c854 <_realloc_r>
 800fa60:	4605      	mov	r5, r0
 800fa62:	2800      	cmp	r0, #0
 800fa64:	d0de      	beq.n	800fa24 <__submore+0x1a>
 800fa66:	eb00 0806 	add.w	r8, r0, r6
 800fa6a:	4601      	mov	r1, r0
 800fa6c:	4632      	mov	r2, r6
 800fa6e:	4640      	mov	r0, r8
 800fa70:	f7fe f801 	bl	800da76 <memcpy>
 800fa74:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800fa78:	f8c4 8000 	str.w	r8, [r4]
 800fa7c:	e7e9      	b.n	800fa52 <__submore+0x48>

0800fa7e <memmove>:
 800fa7e:	4288      	cmp	r0, r1
 800fa80:	b510      	push	{r4, lr}
 800fa82:	eb01 0402 	add.w	r4, r1, r2
 800fa86:	d902      	bls.n	800fa8e <memmove+0x10>
 800fa88:	4284      	cmp	r4, r0
 800fa8a:	4623      	mov	r3, r4
 800fa8c:	d807      	bhi.n	800fa9e <memmove+0x20>
 800fa8e:	1e43      	subs	r3, r0, #1
 800fa90:	42a1      	cmp	r1, r4
 800fa92:	d008      	beq.n	800faa6 <memmove+0x28>
 800fa94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa98:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa9c:	e7f8      	b.n	800fa90 <memmove+0x12>
 800fa9e:	4402      	add	r2, r0
 800faa0:	4601      	mov	r1, r0
 800faa2:	428a      	cmp	r2, r1
 800faa4:	d100      	bne.n	800faa8 <memmove+0x2a>
 800faa6:	bd10      	pop	{r4, pc}
 800faa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fab0:	e7f7      	b.n	800faa2 <memmove+0x24>
	...

0800fab4 <__assert_func>:
 800fab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fab6:	4614      	mov	r4, r2
 800fab8:	461a      	mov	r2, r3
 800faba:	4b09      	ldr	r3, [pc, #36]	@ (800fae0 <__assert_func+0x2c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4605      	mov	r5, r0
 800fac0:	68d8      	ldr	r0, [r3, #12]
 800fac2:	b954      	cbnz	r4, 800fada <__assert_func+0x26>
 800fac4:	4b07      	ldr	r3, [pc, #28]	@ (800fae4 <__assert_func+0x30>)
 800fac6:	461c      	mov	r4, r3
 800fac8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800facc:	9100      	str	r1, [sp, #0]
 800face:	462b      	mov	r3, r5
 800fad0:	4905      	ldr	r1, [pc, #20]	@ (800fae8 <__assert_func+0x34>)
 800fad2:	f000 f821 	bl	800fb18 <fiprintf>
 800fad6:	f000 f831 	bl	800fb3c <abort>
 800fada:	4b04      	ldr	r3, [pc, #16]	@ (800faec <__assert_func+0x38>)
 800fadc:	e7f4      	b.n	800fac8 <__assert_func+0x14>
 800fade:	bf00      	nop
 800fae0:	200001e4 	.word	0x200001e4
 800fae4:	080624e9 	.word	0x080624e9
 800fae8:	080624bb 	.word	0x080624bb
 800faec:	080624ae 	.word	0x080624ae

0800faf0 <_calloc_r>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	fba1 5402 	umull	r5, r4, r1, r2
 800faf6:	b93c      	cbnz	r4, 800fb08 <_calloc_r+0x18>
 800faf8:	4629      	mov	r1, r5
 800fafa:	f7fc fe17 	bl	800c72c <_malloc_r>
 800fafe:	4606      	mov	r6, r0
 800fb00:	b928      	cbnz	r0, 800fb0e <_calloc_r+0x1e>
 800fb02:	2600      	movs	r6, #0
 800fb04:	4630      	mov	r0, r6
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
 800fb08:	220c      	movs	r2, #12
 800fb0a:	6002      	str	r2, [r0, #0]
 800fb0c:	e7f9      	b.n	800fb02 <_calloc_r+0x12>
 800fb0e:	462a      	mov	r2, r5
 800fb10:	4621      	mov	r1, r4
 800fb12:	f7fd fed5 	bl	800d8c0 <memset>
 800fb16:	e7f5      	b.n	800fb04 <_calloc_r+0x14>

0800fb18 <fiprintf>:
 800fb18:	b40e      	push	{r1, r2, r3}
 800fb1a:	b503      	push	{r0, r1, lr}
 800fb1c:	4601      	mov	r1, r0
 800fb1e:	ab03      	add	r3, sp, #12
 800fb20:	4805      	ldr	r0, [pc, #20]	@ (800fb38 <fiprintf+0x20>)
 800fb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb26:	6800      	ldr	r0, [r0, #0]
 800fb28:	9301      	str	r3, [sp, #4]
 800fb2a:	f000 f837 	bl	800fb9c <_vfiprintf_r>
 800fb2e:	b002      	add	sp, #8
 800fb30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb34:	b003      	add	sp, #12
 800fb36:	4770      	bx	lr
 800fb38:	200001e4 	.word	0x200001e4

0800fb3c <abort>:
 800fb3c:	b508      	push	{r3, lr}
 800fb3e:	2006      	movs	r0, #6
 800fb40:	f000 fa00 	bl	800ff44 <raise>
 800fb44:	2001      	movs	r0, #1
 800fb46:	f7f8 fa13 	bl	8007f70 <_exit>

0800fb4a <__sfputc_r>:
 800fb4a:	6893      	ldr	r3, [r2, #8]
 800fb4c:	3b01      	subs	r3, #1
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	b410      	push	{r4}
 800fb52:	6093      	str	r3, [r2, #8]
 800fb54:	da08      	bge.n	800fb68 <__sfputc_r+0x1e>
 800fb56:	6994      	ldr	r4, [r2, #24]
 800fb58:	42a3      	cmp	r3, r4
 800fb5a:	db01      	blt.n	800fb60 <__sfputc_r+0x16>
 800fb5c:	290a      	cmp	r1, #10
 800fb5e:	d103      	bne.n	800fb68 <__sfputc_r+0x1e>
 800fb60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb64:	f000 b932 	b.w	800fdcc <__swbuf_r>
 800fb68:	6813      	ldr	r3, [r2, #0]
 800fb6a:	1c58      	adds	r0, r3, #1
 800fb6c:	6010      	str	r0, [r2, #0]
 800fb6e:	7019      	strb	r1, [r3, #0]
 800fb70:	4608      	mov	r0, r1
 800fb72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb76:	4770      	bx	lr

0800fb78 <__sfputs_r>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	4606      	mov	r6, r0
 800fb7c:	460f      	mov	r7, r1
 800fb7e:	4614      	mov	r4, r2
 800fb80:	18d5      	adds	r5, r2, r3
 800fb82:	42ac      	cmp	r4, r5
 800fb84:	d101      	bne.n	800fb8a <__sfputs_r+0x12>
 800fb86:	2000      	movs	r0, #0
 800fb88:	e007      	b.n	800fb9a <__sfputs_r+0x22>
 800fb8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb8e:	463a      	mov	r2, r7
 800fb90:	4630      	mov	r0, r6
 800fb92:	f7ff ffda 	bl	800fb4a <__sfputc_r>
 800fb96:	1c43      	adds	r3, r0, #1
 800fb98:	d1f3      	bne.n	800fb82 <__sfputs_r+0xa>
 800fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fb9c <_vfiprintf_r>:
 800fb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba0:	460d      	mov	r5, r1
 800fba2:	b09d      	sub	sp, #116	@ 0x74
 800fba4:	4614      	mov	r4, r2
 800fba6:	4698      	mov	r8, r3
 800fba8:	4606      	mov	r6, r0
 800fbaa:	b118      	cbz	r0, 800fbb4 <_vfiprintf_r+0x18>
 800fbac:	6a03      	ldr	r3, [r0, #32]
 800fbae:	b90b      	cbnz	r3, 800fbb4 <_vfiprintf_r+0x18>
 800fbb0:	f7fd fda0 	bl	800d6f4 <__sinit>
 800fbb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbb6:	07d9      	lsls	r1, r3, #31
 800fbb8:	d405      	bmi.n	800fbc6 <_vfiprintf_r+0x2a>
 800fbba:	89ab      	ldrh	r3, [r5, #12]
 800fbbc:	059a      	lsls	r2, r3, #22
 800fbbe:	d402      	bmi.n	800fbc6 <_vfiprintf_r+0x2a>
 800fbc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbc2:	f7fd ff4e 	bl	800da62 <__retarget_lock_acquire_recursive>
 800fbc6:	89ab      	ldrh	r3, [r5, #12]
 800fbc8:	071b      	lsls	r3, r3, #28
 800fbca:	d501      	bpl.n	800fbd0 <_vfiprintf_r+0x34>
 800fbcc:	692b      	ldr	r3, [r5, #16]
 800fbce:	b99b      	cbnz	r3, 800fbf8 <_vfiprintf_r+0x5c>
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f000 f938 	bl	800fe48 <__swsetup_r>
 800fbd8:	b170      	cbz	r0, 800fbf8 <_vfiprintf_r+0x5c>
 800fbda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbdc:	07dc      	lsls	r4, r3, #31
 800fbde:	d504      	bpl.n	800fbea <_vfiprintf_r+0x4e>
 800fbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe4:	b01d      	add	sp, #116	@ 0x74
 800fbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbea:	89ab      	ldrh	r3, [r5, #12]
 800fbec:	0598      	lsls	r0, r3, #22
 800fbee:	d4f7      	bmi.n	800fbe0 <_vfiprintf_r+0x44>
 800fbf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbf2:	f7fd ff37 	bl	800da64 <__retarget_lock_release_recursive>
 800fbf6:	e7f3      	b.n	800fbe0 <_vfiprintf_r+0x44>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbfc:	2320      	movs	r3, #32
 800fbfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc02:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc06:	2330      	movs	r3, #48	@ 0x30
 800fc08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fdb8 <_vfiprintf_r+0x21c>
 800fc0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc10:	f04f 0901 	mov.w	r9, #1
 800fc14:	4623      	mov	r3, r4
 800fc16:	469a      	mov	sl, r3
 800fc18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc1c:	b10a      	cbz	r2, 800fc22 <_vfiprintf_r+0x86>
 800fc1e:	2a25      	cmp	r2, #37	@ 0x25
 800fc20:	d1f9      	bne.n	800fc16 <_vfiprintf_r+0x7a>
 800fc22:	ebba 0b04 	subs.w	fp, sl, r4
 800fc26:	d00b      	beq.n	800fc40 <_vfiprintf_r+0xa4>
 800fc28:	465b      	mov	r3, fp
 800fc2a:	4622      	mov	r2, r4
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f7ff ffa2 	bl	800fb78 <__sfputs_r>
 800fc34:	3001      	adds	r0, #1
 800fc36:	f000 80a7 	beq.w	800fd88 <_vfiprintf_r+0x1ec>
 800fc3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc3c:	445a      	add	r2, fp
 800fc3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc40:	f89a 3000 	ldrb.w	r3, [sl]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	f000 809f 	beq.w	800fd88 <_vfiprintf_r+0x1ec>
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc54:	f10a 0a01 	add.w	sl, sl, #1
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	9307      	str	r3, [sp, #28]
 800fc5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc60:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc62:	4654      	mov	r4, sl
 800fc64:	2205      	movs	r2, #5
 800fc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc6a:	4853      	ldr	r0, [pc, #332]	@ (800fdb8 <_vfiprintf_r+0x21c>)
 800fc6c:	f7f0 fab8 	bl	80001e0 <memchr>
 800fc70:	9a04      	ldr	r2, [sp, #16]
 800fc72:	b9d8      	cbnz	r0, 800fcac <_vfiprintf_r+0x110>
 800fc74:	06d1      	lsls	r1, r2, #27
 800fc76:	bf44      	itt	mi
 800fc78:	2320      	movmi	r3, #32
 800fc7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc7e:	0713      	lsls	r3, r2, #28
 800fc80:	bf44      	itt	mi
 800fc82:	232b      	movmi	r3, #43	@ 0x2b
 800fc84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc88:	f89a 3000 	ldrb.w	r3, [sl]
 800fc8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc8e:	d015      	beq.n	800fcbc <_vfiprintf_r+0x120>
 800fc90:	9a07      	ldr	r2, [sp, #28]
 800fc92:	4654      	mov	r4, sl
 800fc94:	2000      	movs	r0, #0
 800fc96:	f04f 0c0a 	mov.w	ip, #10
 800fc9a:	4621      	mov	r1, r4
 800fc9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fca0:	3b30      	subs	r3, #48	@ 0x30
 800fca2:	2b09      	cmp	r3, #9
 800fca4:	d94b      	bls.n	800fd3e <_vfiprintf_r+0x1a2>
 800fca6:	b1b0      	cbz	r0, 800fcd6 <_vfiprintf_r+0x13a>
 800fca8:	9207      	str	r2, [sp, #28]
 800fcaa:	e014      	b.n	800fcd6 <_vfiprintf_r+0x13a>
 800fcac:	eba0 0308 	sub.w	r3, r0, r8
 800fcb0:	fa09 f303 	lsl.w	r3, r9, r3
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	9304      	str	r3, [sp, #16]
 800fcb8:	46a2      	mov	sl, r4
 800fcba:	e7d2      	b.n	800fc62 <_vfiprintf_r+0xc6>
 800fcbc:	9b03      	ldr	r3, [sp, #12]
 800fcbe:	1d19      	adds	r1, r3, #4
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	9103      	str	r1, [sp, #12]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	bfbb      	ittet	lt
 800fcc8:	425b      	neglt	r3, r3
 800fcca:	f042 0202 	orrlt.w	r2, r2, #2
 800fcce:	9307      	strge	r3, [sp, #28]
 800fcd0:	9307      	strlt	r3, [sp, #28]
 800fcd2:	bfb8      	it	lt
 800fcd4:	9204      	strlt	r2, [sp, #16]
 800fcd6:	7823      	ldrb	r3, [r4, #0]
 800fcd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800fcda:	d10a      	bne.n	800fcf2 <_vfiprintf_r+0x156>
 800fcdc:	7863      	ldrb	r3, [r4, #1]
 800fcde:	2b2a      	cmp	r3, #42	@ 0x2a
 800fce0:	d132      	bne.n	800fd48 <_vfiprintf_r+0x1ac>
 800fce2:	9b03      	ldr	r3, [sp, #12]
 800fce4:	1d1a      	adds	r2, r3, #4
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	9203      	str	r2, [sp, #12]
 800fcea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fcee:	3402      	adds	r4, #2
 800fcf0:	9305      	str	r3, [sp, #20]
 800fcf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fdc8 <_vfiprintf_r+0x22c>
 800fcf6:	7821      	ldrb	r1, [r4, #0]
 800fcf8:	2203      	movs	r2, #3
 800fcfa:	4650      	mov	r0, sl
 800fcfc:	f7f0 fa70 	bl	80001e0 <memchr>
 800fd00:	b138      	cbz	r0, 800fd12 <_vfiprintf_r+0x176>
 800fd02:	9b04      	ldr	r3, [sp, #16]
 800fd04:	eba0 000a 	sub.w	r0, r0, sl
 800fd08:	2240      	movs	r2, #64	@ 0x40
 800fd0a:	4082      	lsls	r2, r0
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	3401      	adds	r4, #1
 800fd10:	9304      	str	r3, [sp, #16]
 800fd12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd16:	4829      	ldr	r0, [pc, #164]	@ (800fdbc <_vfiprintf_r+0x220>)
 800fd18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd1c:	2206      	movs	r2, #6
 800fd1e:	f7f0 fa5f 	bl	80001e0 <memchr>
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d03f      	beq.n	800fda6 <_vfiprintf_r+0x20a>
 800fd26:	4b26      	ldr	r3, [pc, #152]	@ (800fdc0 <_vfiprintf_r+0x224>)
 800fd28:	bb1b      	cbnz	r3, 800fd72 <_vfiprintf_r+0x1d6>
 800fd2a:	9b03      	ldr	r3, [sp, #12]
 800fd2c:	3307      	adds	r3, #7
 800fd2e:	f023 0307 	bic.w	r3, r3, #7
 800fd32:	3308      	adds	r3, #8
 800fd34:	9303      	str	r3, [sp, #12]
 800fd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd38:	443b      	add	r3, r7
 800fd3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd3c:	e76a      	b.n	800fc14 <_vfiprintf_r+0x78>
 800fd3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd42:	460c      	mov	r4, r1
 800fd44:	2001      	movs	r0, #1
 800fd46:	e7a8      	b.n	800fc9a <_vfiprintf_r+0xfe>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	3401      	adds	r4, #1
 800fd4c:	9305      	str	r3, [sp, #20]
 800fd4e:	4619      	mov	r1, r3
 800fd50:	f04f 0c0a 	mov.w	ip, #10
 800fd54:	4620      	mov	r0, r4
 800fd56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd5a:	3a30      	subs	r2, #48	@ 0x30
 800fd5c:	2a09      	cmp	r2, #9
 800fd5e:	d903      	bls.n	800fd68 <_vfiprintf_r+0x1cc>
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d0c6      	beq.n	800fcf2 <_vfiprintf_r+0x156>
 800fd64:	9105      	str	r1, [sp, #20]
 800fd66:	e7c4      	b.n	800fcf2 <_vfiprintf_r+0x156>
 800fd68:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e7f0      	b.n	800fd54 <_vfiprintf_r+0x1b8>
 800fd72:	ab03      	add	r3, sp, #12
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	462a      	mov	r2, r5
 800fd78:	4b12      	ldr	r3, [pc, #72]	@ (800fdc4 <_vfiprintf_r+0x228>)
 800fd7a:	a904      	add	r1, sp, #16
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f3af 8000 	nop.w
 800fd82:	4607      	mov	r7, r0
 800fd84:	1c78      	adds	r0, r7, #1
 800fd86:	d1d6      	bne.n	800fd36 <_vfiprintf_r+0x19a>
 800fd88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd8a:	07d9      	lsls	r1, r3, #31
 800fd8c:	d405      	bmi.n	800fd9a <_vfiprintf_r+0x1fe>
 800fd8e:	89ab      	ldrh	r3, [r5, #12]
 800fd90:	059a      	lsls	r2, r3, #22
 800fd92:	d402      	bmi.n	800fd9a <_vfiprintf_r+0x1fe>
 800fd94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd96:	f7fd fe65 	bl	800da64 <__retarget_lock_release_recursive>
 800fd9a:	89ab      	ldrh	r3, [r5, #12]
 800fd9c:	065b      	lsls	r3, r3, #25
 800fd9e:	f53f af1f 	bmi.w	800fbe0 <_vfiprintf_r+0x44>
 800fda2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fda4:	e71e      	b.n	800fbe4 <_vfiprintf_r+0x48>
 800fda6:	ab03      	add	r3, sp, #12
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	462a      	mov	r2, r5
 800fdac:	4b05      	ldr	r3, [pc, #20]	@ (800fdc4 <_vfiprintf_r+0x228>)
 800fdae:	a904      	add	r1, sp, #16
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f7ff fad7 	bl	800f364 <_printf_i>
 800fdb6:	e7e4      	b.n	800fd82 <_vfiprintf_r+0x1e6>
 800fdb8:	08062460 	.word	0x08062460
 800fdbc:	0806246a 	.word	0x0806246a
 800fdc0:	00000000 	.word	0x00000000
 800fdc4:	0800fb79 	.word	0x0800fb79
 800fdc8:	08062466 	.word	0x08062466

0800fdcc <__swbuf_r>:
 800fdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdce:	460e      	mov	r6, r1
 800fdd0:	4614      	mov	r4, r2
 800fdd2:	4605      	mov	r5, r0
 800fdd4:	b118      	cbz	r0, 800fdde <__swbuf_r+0x12>
 800fdd6:	6a03      	ldr	r3, [r0, #32]
 800fdd8:	b90b      	cbnz	r3, 800fdde <__swbuf_r+0x12>
 800fdda:	f7fd fc8b 	bl	800d6f4 <__sinit>
 800fdde:	69a3      	ldr	r3, [r4, #24]
 800fde0:	60a3      	str	r3, [r4, #8]
 800fde2:	89a3      	ldrh	r3, [r4, #12]
 800fde4:	071a      	lsls	r2, r3, #28
 800fde6:	d501      	bpl.n	800fdec <__swbuf_r+0x20>
 800fde8:	6923      	ldr	r3, [r4, #16]
 800fdea:	b943      	cbnz	r3, 800fdfe <__swbuf_r+0x32>
 800fdec:	4621      	mov	r1, r4
 800fdee:	4628      	mov	r0, r5
 800fdf0:	f000 f82a 	bl	800fe48 <__swsetup_r>
 800fdf4:	b118      	cbz	r0, 800fdfe <__swbuf_r+0x32>
 800fdf6:	f04f 37ff 	mov.w	r7, #4294967295
 800fdfa:	4638      	mov	r0, r7
 800fdfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdfe:	6823      	ldr	r3, [r4, #0]
 800fe00:	6922      	ldr	r2, [r4, #16]
 800fe02:	1a98      	subs	r0, r3, r2
 800fe04:	6963      	ldr	r3, [r4, #20]
 800fe06:	b2f6      	uxtb	r6, r6
 800fe08:	4283      	cmp	r3, r0
 800fe0a:	4637      	mov	r7, r6
 800fe0c:	dc05      	bgt.n	800fe1a <__swbuf_r+0x4e>
 800fe0e:	4621      	mov	r1, r4
 800fe10:	4628      	mov	r0, r5
 800fe12:	f7ff fd99 	bl	800f948 <_fflush_r>
 800fe16:	2800      	cmp	r0, #0
 800fe18:	d1ed      	bne.n	800fdf6 <__swbuf_r+0x2a>
 800fe1a:	68a3      	ldr	r3, [r4, #8]
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	60a3      	str	r3, [r4, #8]
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	6022      	str	r2, [r4, #0]
 800fe26:	701e      	strb	r6, [r3, #0]
 800fe28:	6962      	ldr	r2, [r4, #20]
 800fe2a:	1c43      	adds	r3, r0, #1
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d004      	beq.n	800fe3a <__swbuf_r+0x6e>
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	07db      	lsls	r3, r3, #31
 800fe34:	d5e1      	bpl.n	800fdfa <__swbuf_r+0x2e>
 800fe36:	2e0a      	cmp	r6, #10
 800fe38:	d1df      	bne.n	800fdfa <__swbuf_r+0x2e>
 800fe3a:	4621      	mov	r1, r4
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	f7ff fd83 	bl	800f948 <_fflush_r>
 800fe42:	2800      	cmp	r0, #0
 800fe44:	d0d9      	beq.n	800fdfa <__swbuf_r+0x2e>
 800fe46:	e7d6      	b.n	800fdf6 <__swbuf_r+0x2a>

0800fe48 <__swsetup_r>:
 800fe48:	b538      	push	{r3, r4, r5, lr}
 800fe4a:	4b29      	ldr	r3, [pc, #164]	@ (800fef0 <__swsetup_r+0xa8>)
 800fe4c:	4605      	mov	r5, r0
 800fe4e:	6818      	ldr	r0, [r3, #0]
 800fe50:	460c      	mov	r4, r1
 800fe52:	b118      	cbz	r0, 800fe5c <__swsetup_r+0x14>
 800fe54:	6a03      	ldr	r3, [r0, #32]
 800fe56:	b90b      	cbnz	r3, 800fe5c <__swsetup_r+0x14>
 800fe58:	f7fd fc4c 	bl	800d6f4 <__sinit>
 800fe5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe60:	0719      	lsls	r1, r3, #28
 800fe62:	d422      	bmi.n	800feaa <__swsetup_r+0x62>
 800fe64:	06da      	lsls	r2, r3, #27
 800fe66:	d407      	bmi.n	800fe78 <__swsetup_r+0x30>
 800fe68:	2209      	movs	r2, #9
 800fe6a:	602a      	str	r2, [r5, #0]
 800fe6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe70:	81a3      	strh	r3, [r4, #12]
 800fe72:	f04f 30ff 	mov.w	r0, #4294967295
 800fe76:	e033      	b.n	800fee0 <__swsetup_r+0x98>
 800fe78:	0758      	lsls	r0, r3, #29
 800fe7a:	d512      	bpl.n	800fea2 <__swsetup_r+0x5a>
 800fe7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe7e:	b141      	cbz	r1, 800fe92 <__swsetup_r+0x4a>
 800fe80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe84:	4299      	cmp	r1, r3
 800fe86:	d002      	beq.n	800fe8e <__swsetup_r+0x46>
 800fe88:	4628      	mov	r0, r5
 800fe8a:	f7fd fe0d 	bl	800daa8 <_free_r>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fe98:	81a3      	strh	r3, [r4, #12]
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	6063      	str	r3, [r4, #4]
 800fe9e:	6923      	ldr	r3, [r4, #16]
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	f043 0308 	orr.w	r3, r3, #8
 800fea8:	81a3      	strh	r3, [r4, #12]
 800feaa:	6923      	ldr	r3, [r4, #16]
 800feac:	b94b      	cbnz	r3, 800fec2 <__swsetup_r+0x7a>
 800feae:	89a3      	ldrh	r3, [r4, #12]
 800feb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800feb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800feb8:	d003      	beq.n	800fec2 <__swsetup_r+0x7a>
 800feba:	4621      	mov	r1, r4
 800febc:	4628      	mov	r0, r5
 800febe:	f000 f883 	bl	800ffc8 <__smakebuf_r>
 800fec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fec6:	f013 0201 	ands.w	r2, r3, #1
 800feca:	d00a      	beq.n	800fee2 <__swsetup_r+0x9a>
 800fecc:	2200      	movs	r2, #0
 800fece:	60a2      	str	r2, [r4, #8]
 800fed0:	6962      	ldr	r2, [r4, #20]
 800fed2:	4252      	negs	r2, r2
 800fed4:	61a2      	str	r2, [r4, #24]
 800fed6:	6922      	ldr	r2, [r4, #16]
 800fed8:	b942      	cbnz	r2, 800feec <__swsetup_r+0xa4>
 800feda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fede:	d1c5      	bne.n	800fe6c <__swsetup_r+0x24>
 800fee0:	bd38      	pop	{r3, r4, r5, pc}
 800fee2:	0799      	lsls	r1, r3, #30
 800fee4:	bf58      	it	pl
 800fee6:	6962      	ldrpl	r2, [r4, #20]
 800fee8:	60a2      	str	r2, [r4, #8]
 800feea:	e7f4      	b.n	800fed6 <__swsetup_r+0x8e>
 800feec:	2000      	movs	r0, #0
 800feee:	e7f7      	b.n	800fee0 <__swsetup_r+0x98>
 800fef0:	200001e4 	.word	0x200001e4

0800fef4 <_raise_r>:
 800fef4:	291f      	cmp	r1, #31
 800fef6:	b538      	push	{r3, r4, r5, lr}
 800fef8:	4605      	mov	r5, r0
 800fefa:	460c      	mov	r4, r1
 800fefc:	d904      	bls.n	800ff08 <_raise_r+0x14>
 800fefe:	2316      	movs	r3, #22
 800ff00:	6003      	str	r3, [r0, #0]
 800ff02:	f04f 30ff 	mov.w	r0, #4294967295
 800ff06:	bd38      	pop	{r3, r4, r5, pc}
 800ff08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff0a:	b112      	cbz	r2, 800ff12 <_raise_r+0x1e>
 800ff0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff10:	b94b      	cbnz	r3, 800ff26 <_raise_r+0x32>
 800ff12:	4628      	mov	r0, r5
 800ff14:	f000 f830 	bl	800ff78 <_getpid_r>
 800ff18:	4622      	mov	r2, r4
 800ff1a:	4601      	mov	r1, r0
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff22:	f000 b817 	b.w	800ff54 <_kill_r>
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d00a      	beq.n	800ff40 <_raise_r+0x4c>
 800ff2a:	1c59      	adds	r1, r3, #1
 800ff2c:	d103      	bne.n	800ff36 <_raise_r+0x42>
 800ff2e:	2316      	movs	r3, #22
 800ff30:	6003      	str	r3, [r0, #0]
 800ff32:	2001      	movs	r0, #1
 800ff34:	e7e7      	b.n	800ff06 <_raise_r+0x12>
 800ff36:	2100      	movs	r1, #0
 800ff38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	4798      	blx	r3
 800ff40:	2000      	movs	r0, #0
 800ff42:	e7e0      	b.n	800ff06 <_raise_r+0x12>

0800ff44 <raise>:
 800ff44:	4b02      	ldr	r3, [pc, #8]	@ (800ff50 <raise+0xc>)
 800ff46:	4601      	mov	r1, r0
 800ff48:	6818      	ldr	r0, [r3, #0]
 800ff4a:	f7ff bfd3 	b.w	800fef4 <_raise_r>
 800ff4e:	bf00      	nop
 800ff50:	200001e4 	.word	0x200001e4

0800ff54 <_kill_r>:
 800ff54:	b538      	push	{r3, r4, r5, lr}
 800ff56:	4d07      	ldr	r5, [pc, #28]	@ (800ff74 <_kill_r+0x20>)
 800ff58:	2300      	movs	r3, #0
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	4608      	mov	r0, r1
 800ff5e:	4611      	mov	r1, r2
 800ff60:	602b      	str	r3, [r5, #0]
 800ff62:	f7f7 fff5 	bl	8007f50 <_kill>
 800ff66:	1c43      	adds	r3, r0, #1
 800ff68:	d102      	bne.n	800ff70 <_kill_r+0x1c>
 800ff6a:	682b      	ldr	r3, [r5, #0]
 800ff6c:	b103      	cbz	r3, 800ff70 <_kill_r+0x1c>
 800ff6e:	6023      	str	r3, [r4, #0]
 800ff70:	bd38      	pop	{r3, r4, r5, pc}
 800ff72:	bf00      	nop
 800ff74:	20001790 	.word	0x20001790

0800ff78 <_getpid_r>:
 800ff78:	f7f7 bfe2 	b.w	8007f40 <_getpid>

0800ff7c <__swhatbuf_r>:
 800ff7c:	b570      	push	{r4, r5, r6, lr}
 800ff7e:	460c      	mov	r4, r1
 800ff80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff84:	2900      	cmp	r1, #0
 800ff86:	b096      	sub	sp, #88	@ 0x58
 800ff88:	4615      	mov	r5, r2
 800ff8a:	461e      	mov	r6, r3
 800ff8c:	da0d      	bge.n	800ffaa <__swhatbuf_r+0x2e>
 800ff8e:	89a3      	ldrh	r3, [r4, #12]
 800ff90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ff94:	f04f 0100 	mov.w	r1, #0
 800ff98:	bf14      	ite	ne
 800ff9a:	2340      	movne	r3, #64	@ 0x40
 800ff9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	6031      	str	r1, [r6, #0]
 800ffa4:	602b      	str	r3, [r5, #0]
 800ffa6:	b016      	add	sp, #88	@ 0x58
 800ffa8:	bd70      	pop	{r4, r5, r6, pc}
 800ffaa:	466a      	mov	r2, sp
 800ffac:	f000 f848 	bl	8010040 <_fstat_r>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	dbec      	blt.n	800ff8e <__swhatbuf_r+0x12>
 800ffb4:	9901      	ldr	r1, [sp, #4]
 800ffb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ffba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ffbe:	4259      	negs	r1, r3
 800ffc0:	4159      	adcs	r1, r3
 800ffc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ffc6:	e7eb      	b.n	800ffa0 <__swhatbuf_r+0x24>

0800ffc8 <__smakebuf_r>:
 800ffc8:	898b      	ldrh	r3, [r1, #12]
 800ffca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffcc:	079d      	lsls	r5, r3, #30
 800ffce:	4606      	mov	r6, r0
 800ffd0:	460c      	mov	r4, r1
 800ffd2:	d507      	bpl.n	800ffe4 <__smakebuf_r+0x1c>
 800ffd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	6123      	str	r3, [r4, #16]
 800ffdc:	2301      	movs	r3, #1
 800ffde:	6163      	str	r3, [r4, #20]
 800ffe0:	b003      	add	sp, #12
 800ffe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffe4:	ab01      	add	r3, sp, #4
 800ffe6:	466a      	mov	r2, sp
 800ffe8:	f7ff ffc8 	bl	800ff7c <__swhatbuf_r>
 800ffec:	9f00      	ldr	r7, [sp, #0]
 800ffee:	4605      	mov	r5, r0
 800fff0:	4639      	mov	r1, r7
 800fff2:	4630      	mov	r0, r6
 800fff4:	f7fc fb9a 	bl	800c72c <_malloc_r>
 800fff8:	b948      	cbnz	r0, 801000e <__smakebuf_r+0x46>
 800fffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fffe:	059a      	lsls	r2, r3, #22
 8010000:	d4ee      	bmi.n	800ffe0 <__smakebuf_r+0x18>
 8010002:	f023 0303 	bic.w	r3, r3, #3
 8010006:	f043 0302 	orr.w	r3, r3, #2
 801000a:	81a3      	strh	r3, [r4, #12]
 801000c:	e7e2      	b.n	800ffd4 <__smakebuf_r+0xc>
 801000e:	89a3      	ldrh	r3, [r4, #12]
 8010010:	6020      	str	r0, [r4, #0]
 8010012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010016:	81a3      	strh	r3, [r4, #12]
 8010018:	9b01      	ldr	r3, [sp, #4]
 801001a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801001e:	b15b      	cbz	r3, 8010038 <__smakebuf_r+0x70>
 8010020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010024:	4630      	mov	r0, r6
 8010026:	f000 f81d 	bl	8010064 <_isatty_r>
 801002a:	b128      	cbz	r0, 8010038 <__smakebuf_r+0x70>
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	f023 0303 	bic.w	r3, r3, #3
 8010032:	f043 0301 	orr.w	r3, r3, #1
 8010036:	81a3      	strh	r3, [r4, #12]
 8010038:	89a3      	ldrh	r3, [r4, #12]
 801003a:	431d      	orrs	r5, r3
 801003c:	81a5      	strh	r5, [r4, #12]
 801003e:	e7cf      	b.n	800ffe0 <__smakebuf_r+0x18>

08010040 <_fstat_r>:
 8010040:	b538      	push	{r3, r4, r5, lr}
 8010042:	4d07      	ldr	r5, [pc, #28]	@ (8010060 <_fstat_r+0x20>)
 8010044:	2300      	movs	r3, #0
 8010046:	4604      	mov	r4, r0
 8010048:	4608      	mov	r0, r1
 801004a:	4611      	mov	r1, r2
 801004c:	602b      	str	r3, [r5, #0]
 801004e:	f7f7 ffdf 	bl	8008010 <_fstat>
 8010052:	1c43      	adds	r3, r0, #1
 8010054:	d102      	bne.n	801005c <_fstat_r+0x1c>
 8010056:	682b      	ldr	r3, [r5, #0]
 8010058:	b103      	cbz	r3, 801005c <_fstat_r+0x1c>
 801005a:	6023      	str	r3, [r4, #0]
 801005c:	bd38      	pop	{r3, r4, r5, pc}
 801005e:	bf00      	nop
 8010060:	20001790 	.word	0x20001790

08010064 <_isatty_r>:
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	4d06      	ldr	r5, [pc, #24]	@ (8010080 <_isatty_r+0x1c>)
 8010068:	2300      	movs	r3, #0
 801006a:	4604      	mov	r4, r0
 801006c:	4608      	mov	r0, r1
 801006e:	602b      	str	r3, [r5, #0]
 8010070:	f7f7 ffde 	bl	8008030 <_isatty>
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	d102      	bne.n	801007e <_isatty_r+0x1a>
 8010078:	682b      	ldr	r3, [r5, #0]
 801007a:	b103      	cbz	r3, 801007e <_isatty_r+0x1a>
 801007c:	6023      	str	r3, [r4, #0]
 801007e:	bd38      	pop	{r3, r4, r5, pc}
 8010080:	20001790 	.word	0x20001790

08010084 <_init>:
 8010084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010086:	bf00      	nop
 8010088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801008a:	bc08      	pop	{r3}
 801008c:	469e      	mov	lr, r3
 801008e:	4770      	bx	lr

08010090 <_fini>:
 8010090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010092:	bf00      	nop
 8010094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010096:	bc08      	pop	{r3}
 8010098:	469e      	mov	lr, r3
 801009a:	4770      	bx	lr
